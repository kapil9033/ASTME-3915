SWC_Com_Init:

-- Test Case: SWC_Com_Init.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_Init
TEST.NEW
TEST.NAME:SWC_Com_Init.001
TEST.NOTES:
Seq & Probepoints 

if(Rte_Call_Event_Crashreaktion_GetEventFailed(&SWC_Com_LastEventStatusTestFailedCrashreaktion) != E_OK) --> TRUE

		#define Rte_Call_Event_Crashreaktion_GetEventFailed(arg1) (Xlock_GetEventFailed((Xlock_EventIdType)7, arg1))	
		if(XCLOCK_INT1 == 2000){  XCLOCK_INT1 = EventId;  XCLOCK_INT2 = *EventFailed;  return 0;}
		else if(XCLOCK_INT1 == 2001){  XCLOCK_INT1 = EventId;  XCLOCK_INT2 = *EventFailed;  return 1;}


		#define Rte_Call_DatasetVector_Data_Get_Function_Elm_iInv_VW(arg1) (DatasetVector_Data_Get_Function_Elm_iInv_VW(arg1), ((Std_ReturnType)RTE_E_OK))
		if(DATASET_RTEIF_INT1 == 2000){DATASET_RTEIF_INT1 = *Value;}
		
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT1:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT2:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT1:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].Elm_iInv_VW:123
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LastEventStatusTestFailedCrashreaktion:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT1:7
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT1:123
TEST.FLOW
  SWC_Com.c.SWC_Com_Init
  Xlock.c.Xlock_GetEventFailed
  DatasetVector_RteIf.c.DatasetVector_Data_Get_Function_Elm_iInv_VW
  SWC_Com.c.SWC_Com_Init
TEST.END_FLOW
TEST.END


SWC_Com_MainFunction:

-- Test Case: SWC_Com_MainFunction.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_MainFunction
TEST.NEW
TEST.NAME:SWC_Com_MainFunction.001
TEST.NOTES:
Seq & Probe points info 


			SWC_Com_RxProcessing
			if(VECTORCAST_INT1 == 2222){ VECTORCAST_INT1 = 1; return 0;}
			
			SWC_Com_TxProcessing
			if(VECTORCAST_INT2 == 2222){ VECTORCAST_INT2 = 1; return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2222
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2222
TEST.VALUE:DatasetInfo.<<GLOBAL>>.DatasetInfo_AudiDatasetCompatibleSparePartNumber:MACRO=TRUE
TEST.VALUE:DatasetInfo.<<GLOBAL>>.DatasetInfo_AudiDatasetCompatibleSwVersion:MACRO=TRUE
TEST.VALUE:DatasetInfo.<<GLOBAL>>.DatasetInfo_AudiDatasetCompatibleEcuHwNumber:MACRO=TRUE
TEST.VALUE:DatasetInfo.<<GLOBAL>>.DatasetInfo_AudiDatasetPresent:MACRO=TRUE
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime20MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime40MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime50MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime80MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime100MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime160MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime200MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime320MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime500MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime1000MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime480ms:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime400ms:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime20MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_20MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime40MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_40MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime50MS:0
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime80MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_80MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime100MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_100MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime160MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_160MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime200MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_200MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime320MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_320MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime500MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_500MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime1000MS:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_1000MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime480ms:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_480MS
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime400ms:MACRO=SWC_COM_LOADSHARING_RESET_MSGCYCLETIME_400MS
TEST.FLOW
  SWC_Com.c.SWC_Com_MainFunction
  DatasetInfo.c.DatasetInfo_GetDatasetAudiState
  SWC_Com.c.SWC_Com_RxProcessing
  SWC_Com.c.SWC_Com_TxProcessing
  SWC_Com.c.SWC_Com_MainFunction_Ctr20ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr40ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr50ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr80ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr100ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr160ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr200ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr320ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr400ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr480ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr500ms
  SWC_Com.c.SWC_Com_MainFunction_Ctr1000ms
  SWC_Com.c.SWC_Com_MainFunction
TEST.END_FLOW
TEST.END


SWC_Com_MainFunction10ms:

-- Test Case: SWC_Com_MainFunction10ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_MainFunction10ms
TEST.NEW
TEST.NAME:SWC_Com_MainFunction10ms.001
TEST.NOTES:
Seq & Probepoints 

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_AB_Crash_Int ComWrapper_CAN_Rx_Signals_Get_AB_Crash_Int
		if(ComWrapper_INT1 == 2000){  ComWrapper_INT1 = physValReq;  *data =0;  ComWrapper_INT2 = *data;  return 0;}
		else if(ComWrapper_INT1 == 2001){  ComWrapper_INT1 = physValReq;  *data =2;  ComWrapper_INT2 = *data;  return 0;}

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_AB_Stellgliedtest ComWrapper_CAN_Rx_Signals_Get_AB_Stellgliedtest
		if(ComWrapper_INT3 == 2000){  ComWrapper_INT3 = physValReq;  *data =0;  ComWrapper_INT4 = *data;  return 0;}

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM
		if(ComWrapper_INT5 == 2000){  ComWrapper_INT5 = physValReq;  *data =100;  ComWrapper_INT6 = *data;  return 0;}
		else if(ComWrapper_INT5 == 2001){  ComWrapper_INT5 = physValReq;  *data =1500;  ComWrapper_INT6 = *data;  return 0;}
		else if(ComWrapper_INT5 == 2002){  ComWrapper_INT5 = physValReq;  *data =1500;  ComWrapper_INT6 = *data;  return 32;}

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft
		if(ComWrapper_INT7 == 2000){  ComWrapper_INT7 = physValReq;  *data =0;  ComWrapper_INT8 = *data;  return 0;}
		else if(ComWrapper_INT7 == 2001){  ComWrapper_INT7 = physValReq;  *data =1;  ComWrapper_INT8 = *data;  return 0;}

else if ( (RetValOfConditionActive == RTE_E_OK) && ( CanSig_AB_Crash_Int == 0u ) ) --> TRUE

		#define Rte_Call_EnableCondDemConditionVoko_ZasKl15Timeout_GetFunctionPermission(arg1) (FiM_GetFunctionPermission((FiM_FunctionIdType)2244, arg1))
		if(FIM_INT1 == 2000){  FIM_INT1 = FID;  *Permission =0;  FIM_INT2 = *Permission;  return 0;}
		else if(FIM_INT1 == 2001){  FIM_INT1 = FID;  *Permission =1;  FIM_INT2 = *Permission;  return 0;}
		else if(FIM_INT3 == 2000){  FIM_INT3 = FID;  *Permission =0;  FIM_INT4 = *Permission;  return 0;}
		else if(FIM_INT3 == 2001){  FIM_INT3 = FID;  *Permission =1;  FIM_INT4 = *Permission;  return 0;}
		else if(FIM_INT5 == 2000){  FIM_INT5 = FID;  *Permission =0;  FIM_INT6 = *Permission;  return 0;}
		else if(FIM_INT5 == 2001){  FIM_INT5 = FID;  *Permission =1;  FIM_INT6 = *Permission;  return 0;}


  if (TRUE == PermissionZasKl15Timeout) --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15 ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15
		if(ComWrapper_INT9 == 2000){  ComWrapper_INT9 = physValReq;  *data =0;  ComWrapper_INT10 = *data;  return 0;}
		else if(ComWrapper_INT9 == 2001){  ComWrapper_INT9 = physValReq;  *data =1;  ComWrapper_INT10 = *data;  return 0;}

if(SWC_Com_LastEventStatusTestFailedCrashreaktion == FALSE) --> TRUE

		#define Rte_Call_Event_Crashreaktion_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)7, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
		
		
		
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT10:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.FIM_INT1:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.FIM_INT2:2001
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LastEventStatusTestFailedCrashreaktion:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:7
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT1:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT2:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT3:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT4:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT5:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT6:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT7:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT8:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT9:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT10:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.FIM_INT1:2244
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.FIM_INT2:1
TEST.FLOW
  SWC_Com.c.SWC_Com_MainFunction10ms
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_AB_Crash_Int
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_AB_Stellgliedtest
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft
  FiM.c.FiM_GetFunctionPermission
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_MainFunction10ms
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_MainFunction10ms.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_MainFunction10ms
TEST.NEW
TEST.NAME:SWC_Com_MainFunction10ms.002
TEST.NOTES:
Seq & Probepoints 

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_AB_Crash_Int ComWrapper_CAN_Rx_Signals_Get_AB_Crash_Int
		if(ComWrapper_INT1 == 2000){  ComWrapper_INT1 = physValReq;  *data =0;  ComWrapper_INT2 = *data;  return 0;}
		else if(ComWrapper_INT1 == 2001){  ComWrapper_INT1 = physValReq;  *data =2;  ComWrapper_INT2 = *data;  return 0;}

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_AB_Stellgliedtest ComWrapper_CAN_Rx_Signals_Get_AB_Stellgliedtest
		if(ComWrapper_INT3 == 2000){  ComWrapper_INT3 = physValReq;  *data =0;  ComWrapper_INT4 = *data;  return 0;}

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM
		if(ComWrapper_INT5 == 2000){  ComWrapper_INT5 = physValReq;  *data =100;  ComWrapper_INT6 = *data;  return 0;}
		else if(ComWrapper_INT5 == 2001){  ComWrapper_INT5 = physValReq;  *data =1500;  ComWrapper_INT6 = *data;  return 0;}
		else if(ComWrapper_INT5 == 2002){  ComWrapper_INT5 = physValReq;  *data =1500;  ComWrapper_INT6 = *data;  return 32;}

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft
		if(ComWrapper_INT7 == 2000){  ComWrapper_INT7 = physValReq;  *data =0;  ComWrapper_INT8 = *data;  return 0;}
		else if(ComWrapper_INT7 == 2001){  ComWrapper_INT7 = physValReq;  *data =1;  ComWrapper_INT8 = *data;  return 0;}

else if ( (RetValOfConditionActive == RTE_E_OK) && ( CanSig_AB_Crash_Int == 0u ) ) --> TRUE

		#define Rte_Call_EnableCondDemConditionVoko_ZasKl15Timeout_GetFunctionPermission(arg1) (FiM_GetFunctionPermission((FiM_FunctionIdType)2244, arg1))
		if(FIM_INT1 == 2000){  FIM_INT1 = FID;  *Permission =0;  FIM_INT2 = *Permission;  return 0;}
		else if(FIM_INT1 == 2001){  FIM_INT1 = FID;  *Permission =1;  FIM_INT2 = *Permission;  return 0;}
		else if(FIM_INT3 == 2000){  FIM_INT3 = FID;  *Permission =0;  FIM_INT4 = *Permission;  return 0;}
		else if(FIM_INT3 == 2001){  FIM_INT3 = FID;  *Permission =1;  FIM_INT4 = *Permission;  return 0;}
		else if(FIM_INT5 == 2000){  FIM_INT5 = FID;  *Permission =0;  FIM_INT6 = *Permission;  return 0;}
		else if(FIM_INT5 == 2001){  FIM_INT5 = FID;  *Permission =1;  FIM_INT6 = *Permission;  return 0;}


  if (TRUE == PermissionZasKl15Timeout) --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15 ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15
		if(ComWrapper_INT9 == 2000){  ComWrapper_INT9 = physValReq;  *data =0;  ComWrapper_INT10 = *data;  return 0;}
		else if(ComWrapper_INT9 == 2001){  ComWrapper_INT9 = physValReq;  *data =1;  ComWrapper_INT10 = *data;  return 0;}

if(SWC_Com_LastEventStatusTestFailedCrashreaktion == FALSE) --> FALSE

		#define Rte_Call_Event_Crashreaktion_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)7, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
		
		
		
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT10:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.FIM_INT1:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.FIM_INT2:2001
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LastEventStatusTestFailedCrashreaktion:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:7
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT1:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT2:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT3:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT4:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT5:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT6:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT7:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT8:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT9:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT10:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.FIM_INT1:2244
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.FIM_INT2:1
TEST.FLOW
  SWC_Com.c.SWC_Com_MainFunction10ms
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_AB_Crash_Int
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_AB_Stellgliedtest
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft
  FiM.c.FiM_GetFunctionPermission
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_MainFunction10ms
TEST.END_FLOW
TEST.END


SWC_Com_MainFunction50ms:

-- Test Case: SWC_Com_MainFunction50ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_MainFunction50ms
TEST.NEW
TEST.NAME:SWC_Com_MainFunction50ms.001
TEST.NOTES:
Seq & Probepoints

			#define Rte_Call_BSW_Com_BSW_Com_GetNmState BSW_Com_BSW_Com_GetNmState
			if(BSW_Com_INT1 == 2000){  BSW_Com_INT1 = *NmState; *NmState = 4; return 0;}
			else if(BSW_Com_INT1 == 2001){  BSW_Com_INT1 = *NmState; *NmState = 5; return 0;}
			
			#define Rte_Call_EnableCondDemConditionVoko_HvlmVkModusTimeoutInvalid_GetFunctionPermission(arg1) (FiM_GetFunctionPermission((FiM_FunctionIdType)2243, arg1))
			if(FIM_INT1 == 2000){  FIM_INT1 = FID;  *Permission =0;  FIM_INT2 = *Permission;  return 0;}
			else if(FIM_INT1 == 2001){  FIM_INT1 = FID;  *Permission =1;  FIM_INT2 = *Permission;  return 0;}
			else if(FIM_INT3 == 2000){  FIM_INT3 = FID;  *Permission =0;  FIM_INT4 = *Permission;  return 0;}
			else if(FIM_INT3 == 2001){  FIM_INT3 = FID;  *Permission =1;  FIM_INT4 = *Permission;  return 0;}
			else if(FIM_INT5 == 2000){  FIM_INT5 = FID;  *Permission =0;  FIM_INT6 = *Permission;  return 0;}
			else if(FIM_INT5 == 2001){  FIM_INT5 = FID;  *Permission =1;  FIM_INT6 = *Permission;  return 0;}
			
			#define Rte_Call_EnableCondDemConditionVoko_ZasKl15Timeout_GetFunctionPermission(arg1) (FiM_GetFunctionPermission((FiM_FunctionIdType)2244, arg1))
			if(FIM_INT1 == 2000){  FIM_INT1 = FID;  *Permission =0;  FIM_INT2 = *Permission;  return 0;}
			else if(FIM_INT1 == 2001){  FIM_INT1 = FID;  *Permission =1;  FIM_INT2 = *Permission;  return 0;}
			else if(FIM_INT3 == 2000){  FIM_INT3 = FID;  *Permission =0;  FIM_INT4 = *Permission;  return 0;}
			else if(FIM_INT3 == 2001){  FIM_INT3 = FID;  *Permission =1;  FIM_INT4 = *Permission;  return 0;}
			else if(FIM_INT5 == 2000){  FIM_INT5 = FID;  *Permission =0;  FIM_INT6 = *Permission;  return 0;}
			else if(FIM_INT5 == 2001){  FIM_INT5 = FID;  *Permission =1;  FIM_INT6 = *Permission;  return 0;}
			
			#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15 ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15
			if(ComWrapper_INT9 == 2000){  ComWrapper_INT9 = physValReq;  *data =0;  ComWrapper_INT10 = *data;  return 0;}
			else if(ComWrapper_INT9 == 2001){  ComWrapper_INT9 = physValReq;  *data =1;  ComWrapper_INT10 = *data;  return 0;}
			
			#define Rte_Call_EnableCond_EnableCond_DEM_CONDITION_VOKO_SetEnableCondition(arg1) (Dem_SetEnableCondition((uint8)46, arg1))
			if(DEM_INT1 == 2000){  DEM_INT1 = EnableCondition;  return 0;}
			else if(DEM_INT1 == 2001){  DEM_INT1 = EnableCondition;  return 1;}
			
			#define Rte_Call_EnableCond_EnableCond_DEM_CONDITION_Bus_Sleep_SetEnableCondition(arg1) (Dem_SetEnableCondition((uint8)3, arg1))
			if(DEM_INT2 == 2000){  DEM_INT2 = EnableCondition;  return 0;}
			else if(DEM_INT2 == 2001){  DEM_INT2 = EnableCondition;  return 1;}
			
			#define Rte_Call_Timeout_Systeminfo_01_GetFunctionPermission(arg1) (FiM_GetFunctionPermission((FiM_FunctionIdType)1404, arg1))
			if(FIM_INT7 == 2000){  FIM_INT7 = FID;  *Permission =0;  FIM_INT8 = *Permission;  return 0;}
			else if(FIM_INT7 == 2001){  FIM_INT7 = FID;  *Permission =1;  FIM_INT8 = *Permission;  return 0;}
			else if(FIM_INT9 == 2000){  FIM_INT9 = FID;  *Permission =0;  FIM_INT10 = *Permission;  return 0;}
			else if(FIM_INT9 == 2001){  FIM_INT9 = FID;  *Permission =1;  FIM_INT10 = *Permission;  return 0;}
			else if(FIM_INT11 == 2000){  FIM_INT11 = FID;  *Permission =0;  FIM_INT12 = *Permission;  return 0;}
			else if(FIM_INT11 == 2001){  FIM_INT11 = FID;  *Permission =1;  FIM_INT12 = *Permission;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.FLOW
  SWC_Com.c.SWC_Com_MainFunction50ms
  BSW_Com.c.BSW_Com_BSW_Com_GetNmState
  uut_prototype_stubs.Nm_GetState
  FiM.c.FiM_GetFunctionPermission
  FiM.c.FiM_UnitGeneral_GetInitializationStatusSatCumulated
  FiM.c.FiM_GetFunctionPermission
  FiM.c.FiM_UnitGeneral_GetInitializationStatusSatCumulated
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_Modus
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ZAS_Kl_15
  ComWrapper.c.ComWrapper_MapRxReturnType
  Dem.c.Dem_SetEnableCondition
  Dem.c.Dem_APIChecks_MasterInState
  Dem.c.Dem_InitState_TestMasterInState
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsMasterPartition
  Dem.c.Dem_ExtCom_TestCurrentPartitionIsMaster
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsEnableConditionNotDtcSettingAndValid
  Dem.c.Dem_Conditions_EnableCondition_GetGlobalEnableConditionCount
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsBoolean
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_Conditions_EnableCondition_ResetFulfilled
  Dem.c.Dem_Conditions_EnableCondition_IsEnableConditionSupported
  uut_prototype_stubs.SchM_Enter_Dem_DEM_EXCLUSIVE_AREA_1
  Dem.c.Dem_Conditions_EnableCondition_TestFulfilled
  uut_prototype_stubs.SchM_Exit_Dem_DEM_EXCLUSIVE_AREA_1
  Dem.c.Dem_SetEnableCondition
  Dem.c.Dem_APIChecks_MasterInState
  Dem.c.Dem_InitState_TestMasterInState
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsMasterPartition
  Dem.c.Dem_ExtCom_TestCurrentPartitionIsMaster
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsEnableConditionNotDtcSettingAndValid
  Dem.c.Dem_Conditions_EnableCondition_GetGlobalEnableConditionCount
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsBoolean
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_Conditions_EnableCondition_ResetFulfilled
  Dem.c.Dem_Conditions_EnableCondition_IsEnableConditionSupported
  uut_prototype_stubs.SchM_Enter_Dem_DEM_EXCLUSIVE_AREA_1
  Dem.c.Dem_Conditions_EnableCondition_TestFulfilled
  uut_prototype_stubs.SchM_Exit_Dem_DEM_EXCLUSIVE_AREA_1
  FiM.c.FiM_GetFunctionPermission
  FiM.c.FiM_UnitGeneral_GetInitializationStatusSatCumulated
  SWC_Com.c.SWC_Com_MainFunction50ms_EnableCondition_SiBus3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_03
  uut_prototype_stubs.Rte_Read_ComWrapper_Systeminfo_01_SI_BUS_03
  ComWrapper.c.ComWrapper_MapRxReturnType
  Dem.c.Dem_SetEnableCondition
  Dem.c.Dem_APIChecks_MasterInState
  Dem.c.Dem_InitState_TestMasterInState
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsMasterPartition
  Dem.c.Dem_ExtCom_TestCurrentPartitionIsMaster
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsEnableConditionNotDtcSettingAndValid
  Dem.c.Dem_Conditions_EnableCondition_GetGlobalEnableConditionCount
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsBoolean
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_Conditions_EnableCondition_ResetFulfilled
  Dem.c.Dem_Conditions_EnableCondition_IsEnableConditionSupported
  uut_prototype_stubs.SchM_Enter_Dem_DEM_EXCLUSIVE_AREA_1
  Dem.c.Dem_Conditions_EnableCondition_TestFulfilled
  uut_prototype_stubs.SchM_Exit_Dem_DEM_EXCLUSIVE_AREA_1
  SWC_Com.c.SWC_Com_MainFunction50ms_EnableCondition_SiBus4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_04
  uut_prototype_stubs.Rte_Read_ComWrapper_Systeminfo_01_SI_BUS_04
  ComWrapper.c.ComWrapper_MapRxReturnType
  Dem.c.Dem_SetEnableCondition
  Dem.c.Dem_APIChecks_MasterInState
  Dem.c.Dem_InitState_TestMasterInState
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsMasterPartition
  Dem.c.Dem_ExtCom_TestCurrentPartitionIsMaster
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsEnableConditionNotDtcSettingAndValid
  Dem.c.Dem_Conditions_EnableCondition_GetGlobalEnableConditionCount
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsBoolean
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_Conditions_EnableCondition_ResetFulfilled
  Dem.c.Dem_Conditions_EnableCondition_IsEnableConditionSupported
  uut_prototype_stubs.SchM_Enter_Dem_DEM_EXCLUSIVE_AREA_1
  Dem.c.Dem_Conditions_EnableCondition_TestFulfilled
  uut_prototype_stubs.SchM_Exit_Dem_DEM_EXCLUSIVE_AREA_1
  SWC_Com.c.SWC_Com_MainFunction50ms_EnableCondition_SiBus6
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_06
  uut_prototype_stubs.Rte_Read_ComWrapper_Systeminfo_01_SI_BUS_06
  ComWrapper.c.ComWrapper_MapRxReturnType
  Dem.c.Dem_SetEnableCondition
  Dem.c.Dem_APIChecks_MasterInState
  Dem.c.Dem_InitState_TestMasterInState
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsMasterPartition
  Dem.c.Dem_ExtCom_TestCurrentPartitionIsMaster
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsEnableConditionNotDtcSettingAndValid
  Dem.c.Dem_Conditions_EnableCondition_GetGlobalEnableConditionCount
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsBoolean
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_Conditions_EnableCondition_ResetFulfilled
  Dem.c.Dem_Conditions_EnableCondition_IsEnableConditionSupported
  uut_prototype_stubs.SchM_Enter_Dem_DEM_EXCLUSIVE_AREA_1
  Dem.c.Dem_Conditions_EnableCondition_TestFulfilled
  uut_prototype_stubs.SchM_Exit_Dem_DEM_EXCLUSIVE_AREA_1
  SWC_Com.c.SWC_Com_MainFunction50ms_EnableCondition_SiBus10
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_10
  uut_prototype_stubs.Rte_Read_ComWrapper_Systeminfo_01_SI_BUS_10
  ComWrapper.c.ComWrapper_MapRxReturnType
  Dem.c.Dem_SetEnableCondition
  Dem.c.Dem_APIChecks_MasterInState
  Dem.c.Dem_InitState_TestMasterInState
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsMasterPartition
  Dem.c.Dem_ExtCom_TestCurrentPartitionIsMaster
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsEnableConditionNotDtcSettingAndValid
  Dem.c.Dem_Conditions_EnableCondition_GetGlobalEnableConditionCount
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsBoolean
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_Conditions_EnableCondition_ResetFulfilled
  Dem.c.Dem_Conditions_EnableCondition_IsEnableConditionSupported
  uut_prototype_stubs.SchM_Enter_Dem_DEM_EXCLUSIVE_AREA_1
  Dem.c.Dem_Conditions_EnableCondition_TestFulfilled
  uut_prototype_stubs.SchM_Exit_Dem_DEM_EXCLUSIVE_AREA_1
  SWC_Com.c.SWC_Com_MainFunction50ms_EnableCondition_SiBus13
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_13
  uut_prototype_stubs.Rte_Read_ComWrapper_Systeminfo_01_SI_BUS_13
  ComWrapper.c.ComWrapper_MapRxReturnType
  Dem.c.Dem_SetEnableCondition
  Dem.c.Dem_APIChecks_MasterInState
  Dem.c.Dem_InitState_TestMasterInState
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsMasterPartition
  Dem.c.Dem_ExtCom_TestCurrentPartitionIsMaster
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsEnableConditionNotDtcSettingAndValid
  Dem.c.Dem_Conditions_EnableCondition_GetGlobalEnableConditionCount
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_APIChecks_IsBoolean
  Dem.c.Dem_Error_DetectionHandler
  Dem.c.Dem_Error_isDevErrorDetectEnabled
  Dem.c.Dem_Conditions_EnableCondition_ResetFulfilled
  Dem.c.Dem_Conditions_EnableCondition_IsEnableConditionSupported
  uut_prototype_stubs.SchM_Enter_Dem_DEM_EXCLUSIVE_AREA_1
  Dem.c.Dem_Conditions_EnableCondition_TestFulfilled
  uut_prototype_stubs.SchM_Exit_Dem_DEM_EXCLUSIVE_AREA_1
  SWC_Com.c.SWC_Com_MainFunction50ms
TEST.END_FLOW
TEST.END


SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW:

-- Test Case: SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW
TEST.NEW
TEST.NAME:SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComM_UserRequest_GetCurrentComMode ComM_GetCurrentComMode
		if(COMM_INT1 == 2000){  COMM_INT1 = User;  *ComMode = 0; COMM_INT2 =*ComMode; return 0;}
		else if(COMM_INT1 == 2001){  COMM_INT1 = User; *ComMode = 2; COMM_INT2 =*ComMode; return 0;}

if(COMM_FULL_COMMUNICATION == CurrentComM_Mode)  --> TRUE

		#define Rte_Write_TmeEcu_TmeEcu_bCanAcv_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_bCanAcv_VW

else

		#define Rte_Write_TmeEcu_TmeEcu_bCanAcv_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_bCanAcv_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT1:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT2:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT1:14
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT2:2
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_bCanAcv_VW:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW
  ComM.c.ComM_GetCurrentComMode
  SWC_Com.c.SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW
TEST.NEW
TEST.NAME:SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComM_UserRequest_GetCurrentComMode ComM_GetCurrentComMode
		if(COMM_INT1 == 2000){  COMM_INT1 = User;  *ComMode = 0; COMM_INT2 =*ComMode; return 0;}
		else if(COMM_INT1 == 2001){  COMM_INT1 = User; *ComMode = 2; COMM_INT2 =*ComMode; return 0;}

if(COMM_FULL_COMMUNICATION == CurrentComM_Mode)  

		#define Rte_Write_TmeEcu_TmeEcu_bCanAcv_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_bCanAcv_VW

else  --> TRUE

		#define Rte_Write_TmeEcu_TmeEcu_bCanAcv_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_bCanAcv_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT2:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT1:14
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT2:0
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_bCanAcv_VW:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW
  ComM.c.ComM_GetCurrentComMode
  SWC_Com.c.SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW:

-- Test Case: SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW
TEST.NEW
TEST.NAME:SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Read_StandheizungVerbaut_Value Rte_Read_SWC_Com_StandheizungVerbaut_Value

if(TRUE == sthEnabled) --> TRUE

		#define Rte_Write_TmeDCM_TmeDCM_bParkHeatAvl_VW Rte_Write_SWC_Com_TmeDCM_TmeDCM_bParkHeatAvl_VW

else

		#define Rte_Write_TmeDCM_TmeDCM_bParkHeatAvl_VW Rte_Write_SWC_Com_TmeDCM_TmeDCM_bParkHeatAvl_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeDCM_TmeDCM_bParkHeatAvl_VW:MACRO=FALSE
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Diag_Identification_StandheizungVerbaut_Value:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeDCM_TmeDCM_bParkHeatAvl_VW:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW
  SWC_Com.c.SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW
TEST.NEW
TEST.NAME:SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Read_StandheizungVerbaut_Value Rte_Read_SWC_Com_StandheizungVerbaut_Value

if(TRUE == sthEnabled)

		#define Rte_Write_TmeDCM_TmeDCM_bParkHeatAvl_VW Rte_Write_SWC_Com_TmeDCM_TmeDCM_bParkHeatAvl_VW

else	--> TRUE

		#define Rte_Write_TmeDCM_TmeDCM_bParkHeatAvl_VW Rte_Write_SWC_Com_TmeDCM_TmeDCM_bParkHeatAvl_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeDCM_TmeDCM_bParkHeatAvl_VW:MACRO=TRUE
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Diag_Identification_StandheizungVerbaut_Value:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeDCM_TmeDCM_bParkHeatAvl_VW:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW
  SWC_Com.c.SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW
TEST.END_FLOW
TEST.END


SWC_Com_RteProcessing_SupplyVoltage_To_TmeEcu_uGrid_VW:

-- Test Case: SWC_Com_RteProcessing_SupplyVoltage_To_TmeEcu_uGrid_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RteProcessing_SupplyVoltage_To_TmeEcu_uGrid_VW
TEST.NEW
TEST.NAME:SWC_Com_RteProcessing_SupplyVoltage_To_TmeEcu_uGrid_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_LocalVoltage_AnalogInVSense IoHwAb_InputAnalogInVSense
		if(VC_TmeIoHwAb_INT1 == 2000){  *signal = 4; VC_TmeIoHwAb_INT1 = *signal;  return 0;}

		#define Rte_Write_TmeEcu_TmeEcu_uGrid_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_uGrid_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VC_TmeIoHwAb_INT1:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VC_TmeIoHwAb_INT1:4
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_uGrid_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RteProcessing_SupplyVoltage_To_TmeEcu_uGrid_VW
  VC_TmeIoHwAb.c.IoHwAb_InputAnalogInVSense
  SWC_Com.c.SWC_Com_RteProcessing_SupplyVoltage_To_TmeEcu_uGrid_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing:

-- Test Case: SWC_Com_RxProcessing.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime20MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime40MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime50MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime80MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime100MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime160MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime200MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime320MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime500MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime1000MS:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime480ms:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime400ms:1
TEST.END


SWC_Com_RxProcessing_05ms:

-- Test Case: SWC_Com_RxProcessing_05ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_05ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_05ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_1000MsCall:

-- Test Case: SWC_Com_RxProcessing_1000MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_1000MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_1000MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_1000MsCall
SWC_Com_RxProcessing_500ms
			SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW();
			if(VECTORCAST_INT61 == 2000){ VECTORCAST_INT61 = 1; return 0;}
			
			SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW();
			if(VECTORCAST_INT62 == 2000){ VECTORCAST_INT62 = 1; return 0;}
			
			SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW();
			if(VECTORCAST_INT63 == 2000){ VECTORCAST_INT63 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW();
			if(VECTORCAST_INT64 == 2000){ VECTORCAST_INT64 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW();
			if(VECTORCAST_INT65 == 2000){ VECTORCAST_INT65 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW();
			if(VECTORCAST_INT66 == 2000){ VECTORCAST_INT66 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW();
			if(VECTORCAST_INT67 == 2000){ VECTORCAST_INT67 = 1; return 0;}
			
			SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor();
			if(VECTORCAST_INT68 == 2000){ VECTORCAST_INT68 = 1; return 0;}
			
			SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW();
			if(VECTORCAST_INT69 == 2000){ VECTORCAST_INT69 = 1; return 0;}
			
			SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW();
			if(VECTORCAST_INT70 == 2000){ VECTORCAST_INT70 = 1; return 0;}
			
			SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW();
			if(VECTORCAST_INT71 == 2000){ VECTORCAST_INT71 = 1; return 0;}
			
			SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW();
			if(VECTORCAST_INT72 == 2000){ VECTORCAST_INT72 = 1; return 0;}
			
			SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW();
			if(VECTORCAST_INT73 == 2000){ VECTORCAST_INT73 = 1; return 0;}
			
			SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW();
			if(VECTORCAST_INT74 == 2000){ VECTORCAST_INT74 = 1; return 0;}
			
			SWC_Com_RxProcessing_Motor_67();
			if(VECTORCAST_INT75 == 2000){ VECTORCAST_INT75 = 1; return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT61:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT62:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT63:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT64:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT65:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT66:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT67:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT68:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT69:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT70:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT71:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT72:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT73:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT74:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT75:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime1000MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT61:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT62:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT63:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT64:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT65:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT66:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT67:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT68:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT69:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT70:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT71:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT72:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT73:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT74:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT75:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_1000MsCall
  SWC_Com.c.SWC_Com_RxProcessing_500ms
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW
  SWC_Com.c.SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW
  SWC_Com.c.SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW
  SWC_Com.c.SWC_Com_RxProcessing_Motor_67
  SWC_Com.c.SWC_Com_RxProcessing_1000MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_100MsCall:

-- Test Case: SWC_Com_RxProcessing_100MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_100MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_100MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_100MsCall

			SWC_Com_RxProcessing_50ms()
			
			
			SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW();
			if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW();
			if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}
			
			SWC_Com_RxProcessing_To_AC_stCodConf_VW();
			if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}
			
			SWC_Com_RxProcessing_To_Veh_bT15_VW();
			if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW();
			if(VECTORCAST_INT5 == 2000){ VECTORCAST_INT5 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW();
			if(VECTORCAST_INT6 == 2000){ VECTORCAST_INT6 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW();
			if(VECTORCAST_INT7 == 2000){ VECTORCAST_INT7 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVK_EKK_Sollmodus();
			if(VECTORCAST_INT8 == 2000){ VECTORCAST_INT8 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus();
			if(VECTORCAST_INT9 == 2000){ VECTORCAST_INT9 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW();
			if(VECTORCAST_INT10 == 2000){ VECTORCAST_INT10 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_HYB_Fahrbereitschaft_To_CoVOM_bDrvCycAcv_VW();
			if(VECTORCAST_INT11 == 2000){ VECTORCAST_INT11 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch();
			if(VECTORCAST_INT12 == 2000){ VECTORCAST_INT12 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_StartStopp_Motorstopp_To_StrtStopOut_bStopAcv_VW();
			if(VECTORCAST_INT13 == 2000){ VECTORCAST_INT13 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_StartStopp_Wiederstart_To_StrtStopOut_bRstrtAcv_VW();
			if(VECTORCAST_INT14 == 2000){ VECTORCAST_INT14 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Ext_E_Fahrt_aktiv_To_CoVOM_bElModAcv_VW();
			if(VECTORCAST_INT15 == 2000){ VECTORCAST_INT15 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW();
			if(VECTORCAST_INT16 == 2000){ VECTORCAST_INT16 = 1; return 0;}
			
			SWC_Com_RxProcessing_BEM_STH_Einschaltverbot_To_LvES_bNotAlwParkHeat_VW();
			if(VECTORCAST_INT17 == 2000){ VECTORCAST_INT17 = 1; return 0;}
			
			SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW();
			if(VECTORCAST_INT18 == 2000){ VECTORCAST_INT18 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_StartStopp_Info_To_AC_stCmbEngStrtStopInfo_VW();
			if(VECTORCAST_INT19 == 2000){ VECTORCAST_INT19 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Leistungspriorisierung_To_AC_stPwrsPrio_VW();
			if(VECTORCAST_INT20 == 2000){ VECTORCAST_INT20 = 1; return 0;}
			
			
			SWC_Com_RxProcessing_MO_Klima_Eingr_To_Eng_stHvPrfRedReq_VW();
			if(VECTORCAST_INT21 == 2000){ VECTORCAST_INT21 = 1; return 0;}
			
			SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW();
			if(VECTORCAST_INT22 == 2000){ VECTORCAST_INT22 = 1; return 0;}
			
			SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW();
			if(VECTORCAST_INT23 == 2000){ VECTORCAST_INT23 = 1; return 0;}
			
			SWC_Com_RteProcessing_SupplyVoltage_To_TmeEcu_uGrid_VW();
			if(VECTORCAST_INT24 == 2000){ VECTORCAST_INT24 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW();
			if(VECTORCAST_INT25 == 2000){ VECTORCAST_INT25 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW();
			if(VECTORCAST_INT26 == 2000){ VECTORCAST_INT26 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW();
			if(VECTORCAST_INT27 == 2000){ VECTORCAST_INT27 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW();
			if(VECTORCAST_INT28 == 2000){ VECTORCAST_INT28 = 1; return 0;}
			
			SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW();
			if(VECTORCAST_INT29 == 2000){ VECTORCAST_INT29 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW();
			if(VECTORCAST_INT30 == 2000){ VECTORCAST_INT30 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW();
			if(VECTORCAST_INT31 == 2000){ VECTORCAST_INT31 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW();
			if(VECTORCAST_INT32 == 2000){ VECTORCAST_INT32 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW();
			if(VECTORCAST_INT33 == 2000){ VECTORCAST_INT33 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW();
			if(VECTORCAST_INT34 == 2000){ VECTORCAST_INT34 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW();
			if(VECTORCAST_INT35 == 2000){ VECTORCAST_INT35 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW();
			if(VECTORCAST_INT36 == 2000){ VECTORCAST_INT36 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW();
			if(VECTORCAST_INT37 == 2000){ VECTORCAST_INT37 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW();
			if(VECTORCAST_INT38 == 2000){ VECTORCAST_INT38 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW();
			if(VECTORCAST_INT39 == 2000){ VECTORCAST_INT39 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW();
			if(VECTORCAST_INT40 == 2000){ VECTORCAST_INT40 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW();
			if(VECTORCAST_INT54 == 2000){ VECTORCAST_INT54 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW();
			if(VECTORCAST_INT41 == 2000){ VECTORCAST_INT41 = 1; return 0;}
			
			SWC_Com_RxProcessing_DC_Verlustleistung_To_DcDc_pwrLosAct_VW();
			if(VECTORCAST_INT42 == 2000){ VECTORCAST_INT42 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW();
			if(VECTORCAST_INT43 == 2000){ VECTORCAST_INT43 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW();
			if(VECTORCAST_INT44 == 2000){ VECTORCAST_INT44 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW();
			if(VECTORCAST_INT45 == 2000){ VECTORCAST_INT45 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW();
			if(VECTORCAST_INT46 == 2000){ VECTORCAST_INT46 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW();
			if(VECTORCAST_INT47 == 2000){ VECTORCAST_INT47 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW();
			if(VECTORCAST_INT48 == 2000){ VECTORCAST_INT48 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW();
			if(VECTORCAST_INT49 == 2000){ VECTORCAST_INT49 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW();
			if(VECTORCAST_INT50 == 2000){ VECTORCAST_INT50 = 1; return 0;}
			
			SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW();
			if(VECTORCAST_INT51 == 2000){ VECTORCAST_INT51 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW();
			if(VECTORCAST_INT52 == 2000){ VECTORCAST_INT52 = 1; return 0;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT20:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT21:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT22:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT23:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT24:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT25:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT26:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT27:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT28:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT29:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT30:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT31:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT32:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT33:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT34:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT35:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT36:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT37:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT38:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT39:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT40:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT41:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT42:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT43:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT44:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT45:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT46:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT47:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT48:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT49:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT50:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT51:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT52:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT54:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime100MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT20:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT21:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT22:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT23:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT24:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT25:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT26:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT27:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT28:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT29:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT30:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT31:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT32:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT33:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT34:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT35:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT36:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT37:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT38:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT39:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT40:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT41:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT42:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT43:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT44:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT45:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT46:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT47:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT48:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT49:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT50:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT51:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT52:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT54:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_100MsCall
  SWC_Com.c.SWC_Com_RxProcessing_50ms
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW
  SWC_Com.c.SWC_Com_RxProcessing_To_AC_stCodConf_VW
  SWC_Com.c.SWC_Com_RxProcessing_To_Veh_bT15_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVK_EKK_Sollmodus
  SWC_Com.c.SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HYB_Fahrbereitschaft_To_CoVOM_bDrvCycAcv_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Motorstopp_To_StrtStopOut_bStopAcv_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Wiederstart_To_StrtStopOut_bRstrtAcv_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Ext_E_Fahrt_aktiv_To_CoVOM_bElModAcv_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW
  SWC_Com.c.SWC_Com_RxProcessing_BEM_STH_Einschaltverbot_To_LvES_bNotAlwParkHeat_VW
  SWC_Com.c.SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_StartStopp_Info_To_AC_stCmbEngStrtStopInfo_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Leistungspriorisierung_To_AC_stPwrsPrio_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Klima_Eingr_To_Eng_stHvPrfRedReq_VW
  SWC_Com.c.SWC_Com_RteProcessing_StandheizungVerbaut_To_TmeDCM_bParkHeatAvl_VW
  SWC_Com.c.SWC_Com_RteProcessing_CanActive_To_TmeEcu_bCanAcv_VW
  SWC_Com.c.SWC_Com_RteProcessing_SupplyVoltage_To_TmeEcu_uGrid_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
  SWC_Com.c.SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
  SWC_Com.c.SWC_Com_RxProcessing_DC_Verlustleistung_To_DcDc_pwrLosAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
  SWC_Com.c.SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW
  SWC_Com.c.SWC_Com_RxProcessing_100MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_160MsCall:

-- Test Case: SWC_Com_RxProcessing_160MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_160MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_160MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_160MsCall

			SWC_Com_RxProcessing_80ms()
			SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW();
			if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW();
			if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}
			
			SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW();
			if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}
			
			SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW();
			if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime160MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_160MsCall
  SWC_Com.c.SWC_Com_RxProcessing_80ms
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW
  SWC_Com.c.SWC_Com_RxProcessing_160MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_160ms:

-- Test Case: SWC_Com_RxProcessing_160ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_160ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_160ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_200MsCall:

-- Test Case: SWC_Com_RxProcessing_200MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_200MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_200MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_200MsCall
SWC_Com_RxProcessing_100ms
			SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW();
			if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}
			
			SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW();
			if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}
			
			SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW();
			if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW();
			if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW();
			if(VECTORCAST_INT5 == 2000){ VECTORCAST_INT5 = 1; return 0;}
			
			SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW();
			if(VECTORCAST_INT6 == 2000){ VECTORCAST_INT6 = 1; return 0;}
			
			SWC_Com_RxProcessing_STH_Texte();
			if(VECTORCAST_INT7 == 2000){ VECTORCAST_INT7 = 1; return 0;}
			
			SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW();
			if(VECTORCAST_INT8 == 2000){ VECTORCAST_INT8 = 1; return 0;}
			
			SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW();
			if(VECTORCAST_INT9 == 2000){ VECTORCAST_INT9 = 1; return 0;}
			
			SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW();
			if(VECTORCAST_INT10 == 2000){ VECTORCAST_INT10 = 1; return 0;}
			
			SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW();
			if(VECTORCAST_INT11 == 2000){ VECTORCAST_INT11 = 1; return 0;}
			
			SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW();
			if(VECTORCAST_INT12 == 2000){ VECTORCAST_INT12 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW();
			if(VECTORCAST_INT13 == 2000){ VECTORCAST_INT13 = 1; return 0;}
			
			SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW();
			if(VECTORCAST_INT14 == 2000){ VECTORCAST_INT14 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW();
			if(VECTORCAST_INT15 == 2000){ VECTORCAST_INT15 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW();
			if(VECTORCAST_INT16 == 2000){ VECTORCAST_INT16 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW();
			if(VECTORCAST_INT17 == 2000){ VECTORCAST_INT17 = 1; return 0;}
			
			SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW();
			if(VECTORCAST_INT18 == 2000){ VECTORCAST_INT18 = 1; return 0;}
			
			SWC_Com_RxProcessing_AWC_IstModus_To_HvOBCh_noModInduChOpmAct_VW();
			if(VECTORCAST_INT19 == 2000){ VECTORCAST_INT19 = 1; return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime200MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_200MsCall
  SWC_Com.c.SWC_Com_RxProcessing_100ms
  SWC_Com.c.SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
  SWC_Com.c.SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW
  SWC_Com.c.SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW
  SWC_Com.c.SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW
  SWC_Com.c.SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW
  SWC_Com.c.SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
  SWC_Com.c.SWC_Com_RxProcessing_AWC_IstModus_To_HvOBCh_noModInduChOpmAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_200MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_200ms:

-- Test Case: SWC_Com_RxProcessing_200ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_200ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_200ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_20MsCall:

-- Test Case: SWC_Com_RxProcessing_20MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_20MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_20MsCall.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_20MsCall
SWC_Com_RxProcessing_10ms()
		SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW()
		if(VECTORCAST_INT24 == 2000){  VECTORCAST_INT24 = 1; return 0;}
		
		SWC_Com_RxProcessing_ESP_QBit_v_Signal()
		if(VECTORCAST_INT23 == 2000){  VECTORCAST_INT23 = 1; return 0;}
		
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime20MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_20MsCall
  SWC_Com.c.SWC_Com_RxProcessing_10ms
  SWC_Com.c.SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
  SWC_Com.c.SWC_Com_RxProcessing_ESP_QBit_v_Signal
  SWC_Com.c.SWC_Com_RxProcessing_20MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_240ms:

-- Test Case: SWC_Com_RxProcessing_240ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_240ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_240ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_250ms:

-- Test Case: SWC_Com_RxProcessing_250ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_250ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_250ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_25ms:

-- Test Case: SWC_Com_RxProcessing_25ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_25ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_25ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_320MsCall:

-- Test Case: SWC_Com_RxProcessing_320MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_320MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_320MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_320MsCall
SWC_Com_RxProcessing_160ms


			SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW();
			if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW();
			if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW();
			if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW();
			if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW();
			if(VECTORCAST_INT5 == 2000){ VECTORCAST_INT5 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW();
			if(VECTORCAST_INT6 == 2000){ VECTORCAST_INT6 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW();
			if(VECTORCAST_INT7 == 2000){ VECTORCAST_INT7 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW();
			if(VECTORCAST_INT8 == 2000){ VECTORCAST_INT8 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW();
			if(VECTORCAST_INT9 == 2000){ VECTORCAST_INT9 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW();
			if(VECTORCAST_INT10 == 2000){ VECTORCAST_INT10 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW();
			if(VECTORCAST_INT11 == 2000){ VECTORCAST_INT11 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW();
			if(VECTORCAST_INT12 == 2000){ VECTORCAST_INT12 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW();
			if(VECTORCAST_INT13 == 2000){ VECTORCAST_INT13 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW();
			if(VECTORCAST_INT14 == 2000){ VECTORCAST_INT14 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW();
			if(VECTORCAST_INT15 == 2000){ VECTORCAST_INT15 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW();
			if(VECTORCAST_INT16 == 2000){ VECTORCAST_INT16 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW();
			if(VECTORCAST_INT17 == 2000){ VECTORCAST_INT17 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW();
			if(VECTORCAST_INT18 == 2000){ VECTORCAST_INT18 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW();
			if(VECTORCAST_INT19 == 2000){ VECTORCAST_INT19 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW();
			if(VECTORCAST_INT20 == 2000){ VECTORCAST_INT20 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW();
			if(VECTORCAST_INT21 == 2000){ VECTORCAST_INT21 = 1; return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT20:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT21:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime320MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT20:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT21:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_320MsCall
  SWC_Com.c.SWC_Com_RxProcessing_160ms
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
  SWC_Com.c.SWC_Com_RxProcessing_320MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_400MsCall:

-- Test Case: SWC_Com_RxProcessing_400MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_400MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_400MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_400MsCall
SWC_Com_RxProcessing_160ms
SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW();
if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}

SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW();
if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime400ms:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_400MsCall
  SWC_Com.c.SWC_Com_RxProcessing_200ms
  SWC_Com.c.SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW
  SWC_Com.c.SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW
  SWC_Com.c.SWC_Com_RxProcessing_400MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_40ms:

-- Test Case: SWC_Com_RxProcessing_40ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_40ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_40ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_480MsCall:

-- Test Case: SWC_Com_RxProcessing_480MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_480MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_480MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_480MsCall
SWC_Com_RxProcessing_240ms

			SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW();
			if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW();
			if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW();
			if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW();
			if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW();
			if(VECTORCAST_INT5 == 2000){ VECTORCAST_INT5 = 1; return 0;}
			
			SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW();
			if(VECTORCAST_INT6 == 2000){ VECTORCAST_INT6 = 1; return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime480ms:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_480MsCall
  SWC_Com.c.SWC_Com_RxProcessing_240ms
  SWC_Com.c.SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
  SWC_Com.c.SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
  SWC_Com.c.SWC_Com_RxProcessing_480MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_500MsCall:

-- Test Case: SWC_Com_RxProcessing_500MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_500MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_500MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_500MsCall
SWC_Com_RxProcessing_250ms


			SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW();
			if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}
			
			SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW();
			if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}
			
			SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW();
			if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW();
			if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW();
			if(VECTORCAST_INT5 == 2000){ VECTORCAST_INT5 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW();
			if(VECTORCAST_INT6 == 2000){ VECTORCAST_INT6 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW();
			if(VECTORCAST_INT7 == 2000){ VECTORCAST_INT7 = 1; return 0;}
			
			SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW();
			if(VECTORCAST_INT8 == 2000){ VECTORCAST_INT8 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW();
			if(VECTORCAST_INT9 == 2000){ VECTORCAST_INT9 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW();
			if(VECTORCAST_INT10 == 2000){ VECTORCAST_INT10 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW();
			if(VECTORCAST_INT11 == 2000){ VECTORCAST_INT11 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW();
			if(VECTORCAST_INT12 == 2000){ VECTORCAST_INT12 = 1; return 0;}
			
			SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW();
			if(VECTORCAST_INT13 == 2000){ VECTORCAST_INT13 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW();
			if(VECTORCAST_INT14 == 2000){ VECTORCAST_INT14 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW();
			if(VECTORCAST_INT15 == 2000){ VECTORCAST_INT15 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW();
			if(VECTORCAST_INT16 == 2000){ VECTORCAST_INT16 = 1; return 0;}
			
			SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW();
			if(VECTORCAST_INT17 == 2000){ VECTORCAST_INT17 = 1; return 0;}
			
			SWC_Com_RxProcessing_FS_Luftfeuchte_rel();
			if(VECTORCAST_INT18 == 2000){ VECTORCAST_INT18 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW();
			if(VECTORCAST_INT19 == 2000){ VECTORCAST_INT19 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW();
			if(VECTORCAST_INT20 == 2000){ VECTORCAST_INT20 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW();
			if(VECTORCAST_INT20 == 2000){ VECTORCAST_INT20 = 1; return 0;}
			
			SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW();
			if(VECTORCAST_INT21 == 2000){ VECTORCAST_INT21 = 1; return 0;}
			
			SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW();
			if(VECTORCAST_INT22 == 2000){ VECTORCAST_INT22 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW();
			if(VECTORCAST_INT23 == 2000){ VECTORCAST_INT23 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW();
			if(VECTORCAST_INT24 == 2000){ VECTORCAST_INT24 = 1; return 0;}
			
			SWC_Com_RxProcessing_KBI_Kilometerstand();
			if(VECTORCAST_INT25 == 2000){ VECTORCAST_INT25 = 1; return 0;}
			
			SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW();
			if(VECTORCAST_INT26 == 2000){ VECTORCAST_INT26 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW();
			if(VECTORCAST_INT27 == 2000){ VECTORCAST_INT27 = 1; return 0;}
			
			SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW();
			if(VECTORCAST_INT28 == 2000){ VECTORCAST_INT28 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW();
			if(VECTORCAST_INT29 == 2000){ VECTORCAST_INT29 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW();
			if(VECTORCAST_INT30 == 2000){ VECTORCAST_INT30 = 1; return 0;}
			
			SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW();
			if(VECTORCAST_INT31 == 2000){ VECTORCAST_INT31 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW();
			if(VECTORCAST_INT32 == 2000){ VECTORCAST_INT32 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW();
			if(VECTORCAST_INT33 == 2000){ VECTORCAST_INT33 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW();
			if(VECTORCAST_INT34 == 2000){ VECTORCAST_INT34 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW();
			if(VECTORCAST_INT35 == 2000){ VECTORCAST_INT35 = 1; return 0;}
			
			SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW();
			if(VECTORCAST_INT36 == 2000){ VECTORCAST_INT36 = 1; return 0;}
			
			SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW();
			if(VECTORCAST_INT37 == 2000){ VECTORCAST_INT37 = 1; return 0;}
			
			SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW();
			if(VECTORCAST_INT38 == 2000){ VECTORCAST_INT38 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW();
			if(VECTORCAST_INT39 == 2000){ VECTORCAST_INT39 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW();
			if(VECTORCAST_INT40 == 2000){ VECTORCAST_INT40 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW();
			if(VECTORCAST_INT40 == 2000){ VECTORCAST_INT40 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW();
			if(VECTORCAST_INT41 == 2000){ VECTORCAST_INT41 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW();
			if(VECTORCAST_INT42 == 2000){ VECTORCAST_INT42 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW();
			if(VECTORCAST_INT43 == 2000){ VECTORCAST_INT43 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW();
			if(VECTORCAST_INT44 == 2000){ VECTORCAST_INT44 = 1; return 0;}
			
			SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW();
			if(VECTORCAST_INT45 == 2000){ VECTORCAST_INT45 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW();
			if(VECTORCAST_INT46 == 2000){ VECTORCAST_INT46 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW();
			if(VECTORCAST_INT47 == 2000){ VECTORCAST_INT47 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW();
			if(VECTORCAST_INT48 == 2000){ VECTORCAST_INT48 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW();
			if(VECTORCAST_INT49 == 2000){ VECTORCAST_INT49 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW();
			if(VECTORCAST_INT50 == 2000){ VECTORCAST_INT50 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW();
			if(VECTORCAST_INT51 == 2000){ VECTORCAST_INT51 = 1; return 0;}
			
			SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW();
			if(VECTORCAST_INT52 == 2000){ VECTORCAST_INT52 = 1; return 0;}
			
			SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW();
			if(VECTORCAST_INT53 == 2000){ VECTORCAST_INT53 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW();
			if(VECTORCAST_INT54 == 2000){ VECTORCAST_INT54 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW();
			if(VECTORCAST_INT55 == 2000){ VECTORCAST_INT55 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW();
			if(VECTORCAST_INT56 == 2000){ VECTORCAST_INT56 = 1; return 0;}
			
			SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW();
			if(VECTORCAST_INT57 == 2000){ VECTORCAST_INT57 = 1; return 0;}
			
			SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW();
			if(VECTORCAST_INT58 == 2000){ VECTORCAST_INT58 = 1; return 0;}
			
			SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW();
			if(VECTORCAST_INT59 == 2000){ VECTORCAST_INT59 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW();
			if(VECTORCAST_INT60 == 2000){ VECTORCAST_INT60 = 1; return 0;}
			
			SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW();
			if(VECTORCAST_INT61 == 2000){ VECTORCAST_INT61 = 1; return 0;}
			
			SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW();
			if(VECTORCAST_INT62 == 2000){ VECTORCAST_INT62 = 1; return 0;}
			
			SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW();
			if(VECTORCAST_INT63 == 2000){ VECTORCAST_INT63 = 1; return 0;}
			
			SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW();
			if(VECTORCAST_INT64 == 2000){ VECTORCAST_INT64 = 1; return 0;}
			
			SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW();
			if(VECTORCAST_INT65 == 2000){ VECTORCAST_INT65 = 1; return 0;}
			
			SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW();
			if(VECTORCAST_INT66 == 2000){ VECTORCAST_INT66 = 1; return 0;}
			
			SWC_Com_RxProcessing_LAD_Verlustleistung_To_HvOBCh_pwrLosAct_VW();
			if(VECTORCAST_INT67 == 2000){ VECTORCAST_INT67 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW();
			if(VECTORCAST_INT68 == 2000){ VECTORCAST_INT68 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW();
			if(VECTORCAST_INT69 == 2000){ VECTORCAST_INT69 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW();
			if(VECTORCAST_INT70 == 2000){ VECTORCAST_INT70 = 1; return 0;}
			
			SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW();
			if(VECTORCAST_INT71 == 2000){ VECTORCAST_INT71 = 1; return 0;}
			
			SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW();
			if(VECTORCAST_INT72 == 2000){ VECTORCAST_INT72 = 1; return 0;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT20:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT21:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT22:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT23:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT24:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT25:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT26:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT27:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT28:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT29:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT30:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT31:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT32:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT33:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT34:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT35:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT36:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT37:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT38:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT39:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT40:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT41:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT42:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT43:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT44:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT45:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT46:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT47:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT48:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT49:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT50:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT51:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT52:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT53:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT54:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT55:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT56:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT57:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT58:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT59:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT60:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT61:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT62:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT63:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT64:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT65:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT66:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT67:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT68:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT69:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT70:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT71:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT72:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime500MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT20:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT21:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT22:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT23:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT24:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT25:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT26:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT27:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT28:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT29:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT30:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT31:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT32:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT33:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT34:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT35:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT36:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT37:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT38:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT39:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT40:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT41:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT42:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT43:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT44:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT45:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT46:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT47:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT48:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT49:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT50:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT51:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT52:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT53:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT54:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT55:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT56:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT57:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT58:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT59:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT60:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT61:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT62:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT63:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT64:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT65:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT66:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT67:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT68:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT69:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT70:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT71:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT72:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_500MsCall
  SWC_Com.c.SWC_Com_RxProcessing_250ms
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW
  SWC_Com.c.SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Luftfeuchte_rel
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Kilometerstand
  SWC_Com.c.SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW
  SWC_Com.c.SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW
  SWC_Com.c.SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Verlustleistung_To_HvOBCh_pwrLosAct_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW
  SWC_Com.c.SWC_Com_RxProcessing_500MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_500ms:

-- Test Case: SWC_Com_RxProcessing_500ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_500ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_500ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_50MsCall:

-- Test Case: SWC_Com_RxProcessing_50MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_50MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_50MsCall.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_50MsCall
SWC_Com_RxProcessing_25ms()
SWC_Com_RxProcessing_KBI_Tankwarnung_To_InstrPan_bTankLmpWarn_VW();
if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}

SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW();
if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}

SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW();
if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}

SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW();
if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime50MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_50MsCall
  SWC_Com.c.SWC_Com_RxProcessing_25ms
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Tankwarnung_To_InstrPan_bTankLmpWarn_VW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
  SWC_Com.c.SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
  SWC_Com.c.SWC_Com_RxProcessing_50MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_80MsCall:

-- Test Case: SWC_Com_RxProcessing_80MsCall.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_80MsCall
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_80MsCall.001
TEST.NOTES:
Seq for SWC_Com_RxProcessing_80MsCall

SWC_Com_RxProcessing_40ms()


			SWC_Com_RxProcessing_MO_Heissleuchte_To_Eng_bHotLmp_VW();
			if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = 1; return 0;}
			
			SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW();
			if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = 1; return 0;}
			
			SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW();
			if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}
			
			SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW();
			if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}
			
			SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW();
			if(VECTORCAST_INT5 == 2000){ VECTORCAST_INT5 = 1; return 0;}
			
			SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW();
			if(VECTORCAST_INT6 == 2000){ VECTORCAST_INT6 = 1; return 0;}
			
			SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW();
			if(VECTORCAST_INT7 == 2000){ VECTORCAST_INT7 = 1; return 0;}
			
			SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW();
			if(VECTORCAST_INT8 == 2000){ VECTORCAST_INT8 = 1; return 0;}
			
			SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW();
			if(VECTORCAST_INT9 == 2000){ VECTORCAST_INT9 = 1; return 0;}
			
			SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW();
			if(VECTORCAST_INT10 == 2000){ VECTORCAST_INT10 = 1; return 0;}


TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime80MS:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_80MsCall
  SWC_Com.c.SWC_Com_RxProcessing_40ms
  SWC_Com.c.SWC_Com_RxProcessing_MO_Heissleuchte_To_Eng_bHotLmp_VW
  SWC_Com.c.SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW
  SWC_Com.c.SWC_Com_RxProcessing_80MsCall
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_80ms:

-- Test Case: SWC_Com_RxProcessing_80ms.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_80ms
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_80ms.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_AWC_IstModus_To_HvOBCh_noModInduChOpmAct_VW:

-- Test Case: SWC_Com_RxProcessing_AWC_IstModus_To_HvOBCh_noModInduChOpmAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_AWC_IstModus_To_HvOBCh_noModInduChOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_AWC_IstModus_To_HvOBCh_noModInduChOpmAct_VW.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW:

-- Test Case: SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW

			#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef
			if(ComWrapper_INT88 == 2000){  ComWrapper_INT88 = physValReq;  *data =100;   return 0;}
			else if(ComWrapper_INT88 == 2001){  ComWrapper_INT88 = physValReq;  *data =100; return 8;}
			
			/* Even invalid values shall be transmitted. */
	if( ( RTE_E_OK == comWrapperReturnValue) ||
			( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
			
			#define Rte_Write_Air_Air_tAmbRaw_VW Rte_Write_SWC_Com_Air_Air_tAmbRaw_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT88:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT88:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_stOpmActRaw_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmbRaw_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW:

-- Test Case: SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef
		if(ComWrapper_INT88 == 2000){  ComWrapper_INT88 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT88 == 2001){  ComWrapper_INT88 = physValReq;  *data =100; return 8;}

if( RTE_E_OK == comWrapperReturnValue )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BCM1_Aussen_Temp_ungef_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)773, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Call_LowPassFilter_Filter_U16 SoftwareFilter_LowPassFilter_Filter_U16
		if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

		#define Rte_Write_Air_Air_tAmb_VW Rte_Write_SWC_Com_Air_Air_tAmb_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BCM1_Aussen_Temp_ungef_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)773, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT88:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:773
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT88:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef
		if(ComWrapper_INT88 == 2000){  ComWrapper_INT88 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT88 == 2001){  ComWrapper_INT88 = physValReq;  *data =100; return 8;}

if( RTE_E_OK == comWrapperReturnValue )   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BCM1_Aussen_Temp_ungef_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)773, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

  if( ( SWC_Com_InterpFilterSamplPt_Eng_v_VW[i] <= SWC_Com_AppSig_Eng_v_VW ) && ( SWC_Com_InterpFilterSamplPt_Eng_v_VW[i + 1] > SWC_Com_AppSig_Eng_v_VW ) )     --> TRUE

		#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_vVeh_T_VW(arg1,arg2) (DatasetVector_ComFilterData_Get_tiFil_vVeh_T_VW(arg1, arg2), ((Std_ReturnType)RTE_E_OK))
		if(DATASET_RTEIF_INT4 == 2000){DATASET_RTEIF_INT4 = Index; DATASET_RTEIF_INT5 = *Value;}
		else if(DATASET_RTEIF_INT6 == 2000){DATASET_RTEIF_INT6 = Index; DATASET_RTEIF_INT7 = *Value;}

		#define Rte_Call_LowPassFilter_Filter_U16 SoftwareFilter_LowPassFilter_Filter_U16
		if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

		#define Rte_Write_Air_Air_tAmb_VW Rte_Write_SWC_Com_Air_Air_tAmb_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BCM1_Aussen_Temp_ungef_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)773, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT88:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_T_VW[0]:012
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_T_VW[1]:013
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_T_VW[2]:014
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_T_VW[3]:015
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Eng_v_VW:2500
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Air_tAmb_VW_FilterState:SWC_Com_FilterStateIdle
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:773
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT4:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT5:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT6:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT7:11
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT88:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:19660800
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:300
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:26226
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:1000
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Air_tAmb_VW_FilterState:SWC_Com_FilterStateRunning
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Air_tAmb_VW_InternalMemory:19660800
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_tAmb_VW:4500
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef
  Xlock.c.Xlock_SetEventStatus
  DatasetVector_RteIf.c.DatasetVector_ComFilterData_Get_tiFil_vVeh_T_VW
  DatasetVector_RteIf.c.DatasetVector_ComFilterData_Get_tiFil_vVeh_T_VW
  SoftwareFilter.c.SoftwareFilter_LowPassFilter_Filter_U16
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef
		if(ComWrapper_INT88 == 2000){  ComWrapper_INT88 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT88 == 2001){  ComWrapper_INT88 = physValReq;  *data =100; return 8;}

if( RTE_E_OK == comWrapperReturnValue )   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BCM1_Aussen_Temp_ungef_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)773, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

  if( ( SWC_Com_InterpFilterSamplPt_Eng_v_VW[i] <= SWC_Com_AppSig_Eng_v_VW ) && ( SWC_Com_InterpFilterSamplPt_Eng_v_VW[i + 1] > SWC_Com_AppSig_Eng_v_VW ) )     --> FALSE

		#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_vVeh_T_VW(arg1,arg2) (DatasetVector_ComFilterData_Get_tiFil_vVeh_T_VW(arg1, arg2), ((Std_ReturnType)RTE_E_OK))
		if(DATASET_RTEIF_INT4 == 2000){DATASET_RTEIF_INT4 = Index; DATASET_RTEIF_INT5 = *Value;}
		else if(DATASET_RTEIF_INT6 == 2000){DATASET_RTEIF_INT6 = Index; DATASET_RTEIF_INT7 = *Value;}

		#define Rte_Call_LowPassFilter_Filter_U16 SoftwareFilter_LowPassFilter_Filter_U16
		if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

		#define Rte_Write_Air_Air_tAmb_VW Rte_Write_SWC_Com_Air_Air_tAmb_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BCM1_Aussen_Temp_ungef_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)773, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT88:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_T_VW[0]:012
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_T_VW[1]:013
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_T_VW[2]:014
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_T_VW[3]:015
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Eng_v_VW:15360
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Air_tAmb_VW_FilterState:SWC_Com_FilterStateIdle
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:773
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT4:3
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT5:13
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT88:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:19660800
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:300
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:13
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:1000
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Air_tAmb_VW_FilterState:SWC_Com_FilterStateRunning
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Air_tAmb_VW_InternalMemory:19660800
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_tAmb_VW:4500
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BCM1_Aussen_Temp_ungef
  Xlock.c.Xlock_SetEventStatus
  DatasetVector_RteIf.c.DatasetVector_ComFilterData_Get_tiFil_vVeh_T_VW
  SoftwareFilter.c.SoftwareFilter_LowPassFilter_Filter_U16
  SWC_Com.c.SWC_Com_RxProcessing_BCM1_Aussen_Temp_ungef_To_Air_tAmb_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor:

-- Test Case: SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor

			#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BCM_Kuehlmittel_Sensor ComWrapper_CAN_Rx_Signals_Get_BCM_Kuehlmittel_Sensor
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
			else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =0;   return 0;}
			else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
			
	if (comWrapperReturnValue == RTE_E_OK) --------------> TRUE
			{
			/* No Mapping, just FLAH requirement to set fault code */
		if (TRUE == SWC_Com_CanSig_BCM_Kuehlmittel_Sensor)  --------------> TRUE
			{
			#define Rte_Call_Event_SWC_COM_COOLING_LIQUID_LOW_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)763, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
			}
		else
			{
			#define Rte_Call_Event_SWC_COM_COOLING_LIQUID_LOW_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)763, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
			}
			}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:763
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_tAmbWaBx_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BCM_Kuehlmittel_Sensor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor

			#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BCM_Kuehlmittel_Sensor ComWrapper_CAN_Rx_Signals_Get_BCM_Kuehlmittel_Sensor
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
			else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =0;   return 0;}
			else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
			
	if (comWrapperReturnValue == RTE_E_OK) --------------> TRUE
			{
			/* No Mapping, just FLAH requirement to set fault code */
		if (TRUE == SWC_Com_CanSig_BCM_Kuehlmittel_Sensor)
			{
			#define Rte_Call_Event_SWC_COM_COOLING_LIQUID_LOW_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)763, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
			}
		else   --------------> TRUE
			{
			#define Rte_Call_Event_SWC_COM_COOLING_LIQUID_LOW_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)763, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
			}
			}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:763
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BCM_Kuehlmittel_Sensor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BCM_Kuehlmittel_Sensor
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BEM_STH_Einschaltverbot_To_LvES_bNotAlwParkHeat_VW:

-- Test Case: SWC_Com_RxProcessing_BEM_STH_Einschaltverbot_To_LvES_bNotAlwParkHeat_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BEM_STH_Einschaltverbot_To_LvES_bNotAlwParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BEM_STH_Einschaltverbot_To_LvES_bNotAlwParkHeat_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Einschaltverbot ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Einschaltverbot
		if(ComWrapper_INT70 == 2000){  ComWrapper_INT70 = physValReq;  *data =100;  ComWrapper_INT71 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_LvES_LvES_bNotAlwParkHeat_VW Rte_Write_SWC_Com_LvES_LvES_bNotAlwParkHeat_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT70:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT71:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT70:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT71:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_LvES_LvES_bNotAlwParkHeat_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BEM_STH_Einschaltverbot_To_LvES_bNotAlwParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Einschaltverbot
  SWC_Com.c.SWC_Com_RxProcessing_BEM_STH_Einschaltverbot_To_LvES_bNotAlwParkHeat_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW:

-- Test Case: SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Zielzeit ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Zielzeit
		if(ComWrapper_INT72 == 2000){  ComWrapper_INT72 = physValReq;  *data =100;  ComWrapper_INT73 = *data;  return 0;}
		else if(ComWrapper_INT72 == 2001){  ComWrapper_INT72 = physValReq;  *data =100;  ComWrapper_INT73 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BEM_STH_Zielzeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)774, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_LvES_LvES_tiAlwParkHeat_VW Rte_Write_SWC_Com_LvES_LvES_tiAlwParkHeat_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BEM_STH_Zielzeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)774, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT72:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT73:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:774
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT72:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT73:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Zielzeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Zielzeit ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Zielzeit
		if(ComWrapper_INT72 == 2000){  ComWrapper_INT72 = physValReq;  *data =100;  ComWrapper_INT73 = *data;  return 0;}
		else if(ComWrapper_INT72 == 2001){  ComWrapper_INT72 = physValReq;  *data =100;  ComWrapper_INT73 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BEM_STH_Zielzeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)774, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_LvES_LvES_tiAlwParkHeat_VW Rte_Write_SWC_Com_LvES_LvES_tiAlwParkHeat_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BEM_STH_Zielzeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)774, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT72:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT73:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:774
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT72:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT73:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_LvES_LvES_tiAlwParkHeat_VW:20
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BEM_STH_Zielzeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BEM_STH_Zielzeit_To_LvES_tiAlwParkHeat_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW
#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Batterie_Voko_Anf ComWrapper_CAN_Rx_Signals_Get_BMS_Batterie_Voko_Anf
if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --------> TRUE
#define Rte_Write_HvBatt_HvBatt_bPreCdnThmReq_VW Rte_Write_SWC_Com_HvBatt_HvBatt_bPreCdnThmReq_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )

else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_bPreCdnThmReq_VW:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Batterie_Voko_Anf
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Batterie_Voko_Anf_To_HvBatt_bPreCdnThmReq_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Energieinhalt ComWrapper_CAN_Rx_Signals_Get_BMS_Energieinhalt
		if(ComWrapper_INT115 == 2000){  ComWrapper_INT115 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT115 == 2001){  ComWrapper_INT115 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Energieinhalt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)775, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_HvBatt_HvBatt_wAct_VW Rte_Write_SWC_Com_HvBatt_HvBatt_wAct_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Energieinhalt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)775, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT115:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:775
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT115:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Energieinhalt
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Energieinhalt ComWrapper_CAN_Rx_Signals_Get_BMS_Energieinhalt
		if(ComWrapper_INT115 == 2000){  ComWrapper_INT115 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT115 == 2001){  ComWrapper_INT115 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Energieinhalt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)775, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_HvBatt_HvBatt_wAct_VW Rte_Write_SWC_Com_HvBatt_HvBatt_wAct_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Energieinhalt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)775, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT115:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:775
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT115:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_wAct_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Energieinhalt
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Energieinhalt_To_HvBatt_wAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02 ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =4;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
	if (RTE_E_OK == comWrapperReturnValue)
				{
		if ((Cx4_Blockade_Trockenlauf == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02)||
				(Cx6_Blockade_Trockenlauf_Diag_laeuft == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02))
				{
				#define Rte_Call_Event_BMS_Fehlerstatus_EWP_02_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
		} else if ((Cx1_Pumpe_iO == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02)||
				(Cx3_Pumpe_iO_Diagnose_laeuft == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02))
				{
				#define Rte_Call_Event_BMS_Fehlerstatus_EWP_02_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
		} else
				{
				}
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Fehlerstatus_EWP_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT5 == 2000){  XCLOCK_INT5 = EventId;  VECTORCAST_INT1 = EventStatus;  return 0;}
				
				#define Rte_Write_HvBatt_HvBatt_stFailPmpBatt_VW Rte_Write_SWC_Com_HvBatt_HvBatt_stFailPmpBatt_VW
				
	} else if (comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE)   ------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Fehlerstatus_EWP_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	} else
				{
				/* Timeout or never received. Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:776
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02 ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =4;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)     ------> TRUE
				{
				if ((Cx4_Blockade_Trockenlauf == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02)||
		(Cx6_Blockade_Trockenlauf_Diag_laeuft == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02))     ------> TRUE
				{
				#define Rte_Call_Event_BMS_Fehlerstatus_EWP_02_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
		} else if ((Cx1_Pumpe_iO == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02)||
				(Cx3_Pumpe_iO_Diagnose_laeuft == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02))
				{
				#define Rte_Call_Event_BMS_Fehlerstatus_EWP_02_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
		} else
				{
				/* Do nothing. */
				}
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Fehlerstatus_EWP_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT5 == 2000){  XCLOCK_INT5 = EventId;  VECTORCAST_INT1 = EventStatus;  return 0;}
				
				#define Rte_Write_HvBatt_HvBatt_stFailPmpBatt_VW Rte_Write_SWC_Com_HvBatt_HvBatt_stFailPmpBatt_VW
				
	} else if (comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Fehlerstatus_EWP_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	} else
				{
				/* Timeout or never received. Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:5
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT5:776
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_stFailPmpBatt_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02
  Xlock.c.Xlock_SetEventStatus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02 ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =4;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
				
	if (RTE_E_OK == comWrapperReturnValue)     ------> TRUE
				{
		if ((Cx4_Blockade_Trockenlauf == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02)||
				(Cx6_Blockade_Trockenlauf_Diag_laeuft == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02))
				{
				#define Rte_Call_Event_BMS_Fehlerstatus_EWP_02_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)5, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
		} else if ((Cx1_Pumpe_iO == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02)||
				(Cx3_Pumpe_iO_Diagnose_laeuft == SWC_Com_CanSig_BMS_Fehlerstatus_EWP_02))     ------> TRUE
				{
				#define Rte_Call_Event_BMS_Fehlerstatus_EWP_02_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)5, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
		} else
				{
				/* Do nothing. */
				}
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Fehlerstatus_EWP_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT5 == 2000){  XCLOCK_INT5 = EventId;  VECTORCAST_INT1 = EventStatus;  return 0;}
				
				#define Rte_Write_HvBatt_HvBatt_stFailPmpBatt_VW Rte_Write_SWC_Com_HvBatt_HvBatt_stFailPmpBatt_VW
				
	} else if (comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Fehlerstatus_EWP_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)776, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	} else
				{
				/* Timeout or never received. Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:5
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT5:776
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_stFailPmpBatt_VW:4
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Fehlerstatus_EWP_02
  Xlock.c.Xlock_SetEventStatus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Fehlerstatus_EWP_02_To_HvBatt_stFailPmpBatt_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit_Status ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_HvBatt_HvBatt_stSig_tiIdlHv_VW Rte_Write_SWC_Com_HvBatt_HvBatt_stSig_tiIdlHv_VW
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_stSig_tiIdlHv_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit_Status
  SWC_Com.c.SWC_Com_RxProcessing_BMS_HV_Auszeit_Status_To_HvBatt_stSig_tiIdlHv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =4;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_HvBatt_HvBatt_tiIdlHv_VW Rte_Write_SWC_Com_HvBatt_HvBatt_tiIdlHv_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)777, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if ((comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE) ||
				(comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE)) ------------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)777, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:777
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_tAmbWaBx_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =4;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ------------> TRUE
				
				#define Rte_Write_HvBatt_HvBatt_tiIdlHv_VW Rte_Write_SWC_Com_HvBatt_HvBatt_tiIdlHv_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)777, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if ((comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE) ||
				(comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE))
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)777, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:777
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_tiIdlHv_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_HV_Auszeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_HV_Auszeit_To_HvBatt_tiIdlHv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstModus ComWrapper_CAN_Rx_Signals_Get_BMS_IstModus
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstModus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)778, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvBatt_HvBatt_stMod_VW Rte_Write_SWC_Com_HvBatt_HvBatt_stMod_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )     ---------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstModus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)778, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:778
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstModus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstModus ComWrapper_CAN_Rx_Signals_Get_BMS_IstModus
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   ---------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstModus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)778, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvBatt_HvBatt_stMod_VW Rte_Write_SWC_Com_HvBatt_HvBatt_stMod_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstModus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)778, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:778
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_stMod_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstModus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstModus_To_HvBatt_stMod_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstRuecklaufTemperatur_02 ComWrapper_CAN_Rx_Signals_Get_BMS_IstRuecklaufTemperatur_02
		if(ComWrapper_INT120 == 2000){  ComWrapper_INT120 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT120 == 2001){  ComWrapper_INT120 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstRuecklaufTemperatur_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)779, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvBatt_HvBatt_tCoOut_VW Rte_Write_SWC_Com_HvBatt_HvBatt_tCoOut_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))  ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstRuecklaufTemperatur_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)779, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT120:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:779
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT120:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstRuecklaufTemperatur_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstRuecklaufTemperatur_02 ComWrapper_CAN_Rx_Signals_Get_BMS_IstRuecklaufTemperatur_02
		if(ComWrapper_INT120 == 2000){  ComWrapper_INT120 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT120 == 2001){  ComWrapper_INT120 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)   ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstRuecklaufTemperatur_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)779, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvBatt_HvBatt_tCoOut_VW Rte_Write_SWC_Com_HvBatt_HvBatt_tCoOut_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstRuecklaufTemperatur_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)779, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT120:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:779
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT120:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_tCoOut_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstRuecklaufTemperatur_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstRuecklaufTemperatur_02_To_HvBatt_tCoOut_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstSpannung ComWrapper_CAN_Rx_Signals_Get_BMS_IstSpannung
		if(ComWrapper_INT15 == 2000){  ComWrapper_INT15 = physValReq;  *data =5000;  ComWrapper_INT16 = *data;  return 0;}
		else if(ComWrapper_INT15 == 2001){  ComWrapper_INT15 = physValReq;  *data =100;  ComWrapper_INT16 = *data;  return 0;}
		else if(ComWrapper_INT15 == 2002){  ComWrapper_INT15 = physValReq;  *data =100;  ComWrapper_INT16 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstSpannung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)780, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvBatt_HvBatt_uAct_VW Rte_Write_SWC_Com_HvBatt_HvBatt_uAct_VW
		// No corresponding probe code found for this macro in the provided snippet.

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstSpannung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)780, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT15:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT16:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:780
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT15:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT16:5000
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_uAct_VW:5000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstSpannung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstSpannung ComWrapper_CAN_Rx_Signals_Get_BMS_IstSpannung
		if(ComWrapper_INT15 == 2000){  ComWrapper_INT15 = physValReq;  *data =5000;  ComWrapper_INT16 = *data;  return 0;}
		else if(ComWrapper_INT15 == 2001){  ComWrapper_INT15 = physValReq;  *data =100;  ComWrapper_INT16 = *data;  return 0;}
		else if(ComWrapper_INT15 == 2002){  ComWrapper_INT15 = physValReq;  *data =100;  ComWrapper_INT16 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) 

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstSpannung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)780, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvBatt_HvBatt_uAct_VW Rte_Write_SWC_Com_HvBatt_HvBatt_uAct_VW
		// No corresponding probe code found for this macro in the provided snippet.

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstSpannung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)780, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT15:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT16:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:780
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT15:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT16:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstSpannung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstSpannung_To_HvBatt_uAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02 ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02
		if(ComWrapper_INT13 == 2000){  ComWrapper_INT13 = physValReq;  *data =5000;  ComWrapper_INT14 = *data;  return 0;}
		else if(ComWrapper_INT13 == 2001){  ComWrapper_INT13 = physValReq;  *data =100;  ComWrapper_INT14 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		if (((SInt16) 2046u) < SWC_Com_CanSig_BMS_IstStrom_02)  --> TRUE
		
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)781, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)781, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				if (((SInt16) -1024) > SWC_Com_CanSig_BMS_IstStrom_02)
				
				else if (((SInt16) 1023u) < SWC_Com_CanSig_BMS_IstStrom_02)
				
				else
				
				#define Rte_Write_HvBatt_HvBatt_iAct_VW Rte_Write_SWC_Com_HvBatt_HvBatt_iAct_VW

else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT13:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT14:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:781
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT13:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT14:5000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02 ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02
		if(ComWrapper_INT13 == 2000){  ComWrapper_INT13 = physValReq;  *data =5000;  ComWrapper_INT14 = *data;  return 0;}
	else if(ComWrapper_INT13 == 2002){  ComWrapper_INT13 = physValReq;  *data =100;  ComWrapper_INT14 = *data;  return 0;}
		else if(ComWrapper_INT13 == 2001){  ComWrapper_INT13 = physValReq;  *data =100;  ComWrapper_INT14 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		if (((SInt16) 2046u) < SWC_Com_CanSig_BMS_IstStrom_02)  --> FALSE
		
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)781, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)781, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				if (((SInt16) -1024) > SWC_Com_CanSig_BMS_IstStrom_02)
				
				else if (((SInt16) 1023u) < SWC_Com_CanSig_BMS_IstStrom_02)
				
				else
				
				#define Rte_Write_HvBatt_HvBatt_iAct_VW Rte_Write_SWC_Com_HvBatt_HvBatt_iAct_VW

else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT13:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT14:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:781
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT13:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT14:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_iAct_VW:3200
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW.003
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02 ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02
		if(ComWrapper_INT13 == 2000){  ComWrapper_INT13 = physValReq;  *data =5000;  ComWrapper_INT14 = *data;  return 0;}
	else if(ComWrapper_INT13 == 2002){  ComWrapper_INT13 = physValReq;  *data =100;  ComWrapper_INT14 = *data;  return 0;}
		else if(ComWrapper_INT13 == 2001){  ComWrapper_INT13 = physValReq;  *data =100;  ComWrapper_INT14 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> FALSE

		if (((SInt16) 2046u) < SWC_Com_CanSig_BMS_IstStrom_02)  --> FALSE
		
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)781, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)781, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				if (((SInt16) -1024) > SWC_Com_CanSig_BMS_IstStrom_02)
				
				else if (((SInt16) 1023u) < SWC_Com_CanSig_BMS_IstStrom_02)
				
				else
				
				#define Rte_Write_HvBatt_HvBatt_iAct_VW Rte_Write_SWC_Com_HvBatt_HvBatt_iAct_VW

else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)) --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstStrom_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT13:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT14:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:781
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT13:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT14:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstStrom_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstStrom_02_To_HvBatt_iAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstVorlaufTemperatur ComWrapper_CAN_Rx_Signals_Get_BMS_IstVorlaufTemperatur
		if(ComWrapper_INT89 == 2000){  ComWrapper_INT89 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT89 == 2001){  ComWrapper_INT89 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_tCo_C_VW DatasetVector_ComFilterData_Get_tiFil_tCo_C_VW
		if(DATASET_RTEIF_INT8 == 2000){DATASET_RTEIF_INT8 = *Value;}

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstVorlaufTemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)782, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Call_LowPassFilter_Filter_U16 SoftwareFilter_LowPassFilter_Filter_U16
		if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

		#define Rte_Write_HvBatt_HvBatt_tCoIn_VW Rte_Write_SWC_Com_HvBatt_HvBatt_tCoIn_VW

		
else if ( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) ||
        (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstVorlaufTemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)782, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT89:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:782
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT89:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstVorlaufTemperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_IstVorlaufTemperatur ComWrapper_CAN_Rx_Signals_Get_BMS_IstVorlaufTemperatur
		if(ComWrapper_INT89 == 2000){  ComWrapper_INT89 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT89 == 2001){  ComWrapper_INT89 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_tCo_C_VW DatasetVector_ComFilterData_Get_tiFil_tCo_C_VW
		if(DATASET_RTEIF_INT8 == 2000){DATASET_RTEIF_INT8 = *Value;}

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstVorlaufTemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)782, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Call_LowPassFilter_Filter_U16 SoftwareFilter_LowPassFilter_Filter_U16
		if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

		#define Rte_Write_HvBatt_HvBatt_tCoIn_VW Rte_Write_SWC_Com_HvBatt_HvBatt_tCoIn_VW

		
else if ( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) ||
        (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_IstVorlaufTemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)782, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT89:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_tCo_C_VW:10
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_HvBatt_tCoIn_VW_FilterState:SWC_Com_FilterStateIdle
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:782
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT8:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT89:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:6553600
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:1000
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_HvBatt_tCoIn_VW_FilterState:SWC_Com_FilterStateRunning
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_HvBatt_tCoIn_VW_InternalMemory:6553600
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_tCoIn_VW:4600
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_IstVorlaufTemperatur
  DatasetVector_RteIf.c.DatasetVector_ComFilterData_Get_tiFil_tCo_C_VW
  Xlock.c.Xlock_SetEventStatus
  SoftwareFilter.c.SoftwareFilter_LowPassFilter_Filter_U16
  SWC_Com.c.SWC_Com_RxProcessing_BMS_IstVorlaufTemperatur_To_HvBatt_tCoIn_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_NutzbarerSOC ComWrapper_CAN_Rx_Signals_Get_BMS_NutzbarerSOC
		if(ComWrapper_INT26 == 2000){  ComWrapper_INT26 = physValReq;  *data =100;  ComWrapper_INT27 = *data;  return 0;}
		else if(ComWrapper_INT26 == 2001){  ComWrapper_INT26 = physValReq;  *data =100;  ComWrapper_INT27 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_NutzbarerSOC_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)784, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_HvBatt_HvBatt_rSocCus_VW Rte_Write_SWC_Com_HvBatt_HvBatt_rSocCus_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_NutzbarerSOC_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)784, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT26:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT27:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:784
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT26:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT27:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_rSocCus_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_NutzbarerSOC
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_NutzbarerSOC ComWrapper_CAN_Rx_Signals_Get_BMS_NutzbarerSOC
		if(ComWrapper_INT26 == 2000){  ComWrapper_INT26 = physValReq;  *data =100;  ComWrapper_INT27 = *data;  return 0;}
		else if(ComWrapper_INT26 == 2001){  ComWrapper_INT26 = physValReq;  *data =100;  ComWrapper_INT27 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_NutzbarerSOC_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)784, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_HvBatt_HvBatt_rSocCus_VW Rte_Write_SWC_Com_HvBatt_HvBatt_rSocCus_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_NutzbarerSOC_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)784, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT26:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT27:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:784
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT26:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT27:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_NutzbarerSOC
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_NutzbarerSOC_To_HvBatt_rSocCus_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_SOC_HiRes ComWrapper_CAN_Rx_Signals_Get_BMS_SOC_HiRes
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_SOC_HiRes_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)785, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvBatt_HvBatt_rSocHiResl_VW Rte_Write_SWC_Com_HvBatt_HvBatt_rSocHiResl_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_SOC_HiRes_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)785, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:785
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_SOC_HiRes
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_SOC_HiRes ComWrapper_CAN_Rx_Signals_Get_BMS_SOC_HiRes
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_SOC_HiRes_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)785, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvBatt_HvBatt_rSocHiResl_VW Rte_Write_SWC_Com_HvBatt_HvBatt_rSocHiResl_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_SOC_HiRes_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)785, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:785
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_rSocHiResl_VW:10000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_SOC_HiRes
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SOC_HiRes_To_HvBatt_rSocHiResl_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_BMS_SollVolumenstrom
		if(ComWrapper_INT124 == 2000){  ComWrapper_INT124 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT124 == 2001){  ComWrapper_INT124 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)786, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvBatt_HvBatt_volfBattMin_VW Rte_Write_SWC_Com_HvBatt_HvBatt_volfBattMin_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))    ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)786, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT124:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:786
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT124:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_BMS_SollVolumenstrom
		if(ComWrapper_INT124 == 2000){  ComWrapper_INT124 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT124 == 2001){  ComWrapper_INT124 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)     ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)786, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvBatt_HvBatt_volfBattMin_VW Rte_Write_SWC_Com_HvBatt_HvBatt_volfBattMin_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)786, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT124:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:786
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT124:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_volfBattMin_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_SollVolumenstrom_To_HvBatt_volfBattMin_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Temp_Epsilon ComWrapper_CAN_Rx_Signals_Get_BMS_Temp_Epsilon
				if(ComWrapper_INT131 == 2000){  ComWrapper_INT131 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT131 == 2001){  ComWrapper_INT131 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_HvBatt_HvBatt_tDelta_VW Rte_Write_SWC_Com_HvBatt_HvBatt_tDelta_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT131:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT131:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_tDelta_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Temp_Epsilon
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temp_Epsilon_To_HvBatt_tDelta_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Temperatur ComWrapper_CAN_Rx_Signals_Get_BMS_Temperatur
		if(ComWrapper_INT121 == 2000){  ComWrapper_INT121 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT121 == 2001){  ComWrapper_INT121 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)787, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvBatt_HvBatt_t_VW Rte_Write_SWC_Com_HvBatt_HvBatt_t_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))  ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)787, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT121:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:787
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT121:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Temperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Temperatur ComWrapper_CAN_Rx_Signals_Get_BMS_Temperatur
		if(ComWrapper_INT121 == 2000){  ComWrapper_INT121 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT121 == 2001){  ComWrapper_INT121 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)   ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)787, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvBatt_HvBatt_t_VW Rte_Write_SWC_Com_HvBatt_HvBatt_t_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_BMS_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)787, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT121:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:787
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT121:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_t_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Temperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperatur_To_HvBatt_t_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Temperierung_Anf ComWrapper_CAN_Rx_Signals_Get_BMS_Temperierung_Anf
				if(ComWrapper_INT122 == 2000){  ComWrapper_INT122 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT122 == 2001){  ComWrapper_INT122 = physValReq;  *data =100; return 8;}
				
	if( ( RTE_E_OK                                          == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Write_HvBatt_HvBatt_stDemCoHeatHvBattRaw_VW Rte_Write_SWC_Com_HvBatt_HvBatt_stDemCoHeatHvBattRaw_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT122:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT122:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_stDemCoHeatHvBattRaw_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Temperierung_Anf
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBattRaw_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW:

-- Test Case: SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_BMS_Temperierung_Anf ComWrapper_CAN_Rx_Signals_Get_BMS_Temperierung_Anf
		if(ComWrapper_INT122 == 2000){  ComWrapper_INT122 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT122 == 2001){  ComWrapper_INT122 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_HvBatt_HvBatt_stDemCoHeatHvBatt_VW Rte_Write_SWC_Com_HvBatt_HvBatt_stDemCoHeatHvBatt_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT122:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT122:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvBatt_HvBatt_stDemCoHeatHvBatt_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_BMS_Temperierung_Anf
  SWC_Com.c.SWC_Com_RxProcessing_BMS_Temperierung_Anf_To_HvBatt_stDemCoHeatHvBatt_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW:

-- Test Case: SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_Abregelung_Temperatur ComWrapper_CAN_Rx_Signals_Get_DC_Abregelung_Temperatur
		if(ComWrapper_INT123 == 2000){  ComWrapper_INT123 = physValReq;  *data =100;   return 0;}

	if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_SWC_Com_DcDc_DcDc_bPrfRed_VW Rte_Write_SWC_Com_DcDc_DcDc_bPrfRed_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT123:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT123:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_bPrfRed_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_Abregelung_Temperatur
  SWC_Com.c.SWC_Com_RxProcessing_DC_Abregelung_Temperatur_To_DcDc_bPrfRed_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW:

-- Test Case: SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_HYB_Auslastungsgrad ComWrapper_CAN_Rx_Signals_Get_DC_HYB_Auslastungsgrad
		if(ComWrapper_INT116 == 2000){  ComWrapper_INT116 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT116 == 2001){  ComWrapper_INT116 = physValReq;  *data =100; return 8;}

	if(RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_HYB_Auslastungsgrad_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)788, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_DcDc_DcDc_rWorkLd_VW Rte_Write_SWC_Com_DcDc_DcDc_rWorkLd_VW

	else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))  ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_HYB_Auslastungsgrad_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)788, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT116:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:788
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT116:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_HYB_Auslastungsgrad
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_HYB_Auslastungsgrad ComWrapper_CAN_Rx_Signals_Get_DC_HYB_Auslastungsgrad
		if(ComWrapper_INT116 == 2000){  ComWrapper_INT116 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT116 == 2001){  ComWrapper_INT116 = physValReq;  *data =100; return 8;}

	if(RTE_E_OK == comWrapperReturnValue)   ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_HYB_Auslastungsgrad_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)788, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_DcDc_DcDc_rWorkLd_VW Rte_Write_SWC_Com_DcDc_DcDc_rWorkLd_VW

	else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_HYB_Auslastungsgrad_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)788, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT116:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:788
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT116:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_rWorkLd_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_HYB_Auslastungsgrad
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_HYB_Auslastungsgrad_To_DcDc_rWorkLd_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW:

-- Test Case: SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02 ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02
				if(ComWrapper_INT119 == 2000){  ComWrapper_INT119 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT119 == 2001){  ComWrapper_INT119 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT119 == 2002){  ComWrapper_INT119 = physValReq;  *data =100; return 8;}
				
				/* Even invalid values shall be transmitted. */
	if( ( RTE_E_OK  == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Write_DcDc_DcDc_stOpmActRaw_VW Rte_Write_SWC_Com_DcDc_DcDc_stOpmActRaw_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT119:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT119:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_stOpmActRaw_VW:3
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmActRaw_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW:

-- Test Case: SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02 ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02
		if(ComWrapper_INT119 == 2000){  ComWrapper_INT119 = physValReq;  *data =3;   return 0;}
		else if(ComWrapper_INT119 == 2001){  ComWrapper_INT119 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT119 == 2002){  ComWrapper_INT119 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)

		if(Cx4_Pruefimpuls_12V < SWC_Com_CanSig_DC_IstModus_02)

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

			#define Rte_Write_DcDc_DcDc_stOpmAct_VW Rte_Write_SWC_Com_DcDc_DcDc_stOpmAct_VW

	else if (comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE)  ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT119:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:789
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT119:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02 ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02
		if(ComWrapper_INT119 == 2000){  ComWrapper_INT119 = physValReq;  *data =3;   return 0;}
		else if(ComWrapper_INT119 == 2001){  ComWrapper_INT119 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT119 == 2002){  ComWrapper_INT119 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)   ---> TRUE

		if(Cx4_Pruefimpuls_12V < SWC_Com_CanSig_DC_IstModus_02)   ---> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

			#define Rte_Write_DcDc_DcDc_stOpmAct_VW Rte_Write_SWC_Com_DcDc_DcDc_stOpmAct_VW

	else if (comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT119:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:789
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT119:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02 ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02
		if(ComWrapper_INT119 == 2000){  ComWrapper_INT119 = physValReq;  *data =3;   return 0;}
		else if(ComWrapper_INT119 == 2001){  ComWrapper_INT119 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT119 == 2002){  ComWrapper_INT119 = physValReq;  *data =100; return 8;}

	if (RTE_E_OK == comWrapperReturnValue)   ---> TRUE

		if(Cx4_Pruefimpuls_12V < SWC_Com_CanSig_DC_IstModus_02)

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else     ---> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

			#define Rte_Write_DcDc_DcDc_stOpmAct_VW Rte_Write_SWC_Com_DcDc_DcDc_stOpmAct_VW

	else if (comWrapperReturnValue == RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstModus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)789, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT119:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:789
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT119:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_stOpmAct_VW:3
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_IstModus_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstModus_02_To_DcDc_stOpmAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW:

-- Test Case: SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_IstSpannung_HV ComWrapper_CAN_Rx_Signals_Get_DC_IstSpannung_HV
		if(ComWrapper_INT118 == 2000){  ComWrapper_INT118 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT118 == 2001){  ComWrapper_INT118 = physValReq;  *data =100; return 8;}

	if(RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstSpannung_HV_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)790, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_DcDc_DcDc_uActHv_VW Rte_Write_SWC_Com_DcDc_DcDc_uActHv_VW

	else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue)) -----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstSpannung_HV_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)790, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT118:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:790
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT118:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_IstSpannung_HV
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_IstSpannung_HV ComWrapper_CAN_Rx_Signals_Get_DC_IstSpannung_HV
		if(ComWrapper_INT118 == 2000){  ComWrapper_INT118 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT118 == 2001){  ComWrapper_INT118 = physValReq;  *data =100; return 8;}

	if(RTE_E_OK == comWrapperReturnValue)  -----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstSpannung_HV_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)790, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_DcDc_DcDc_uActHv_VW Rte_Write_SWC_Com_DcDc_DcDc_uActHv_VW

	else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue))

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstSpannung_HV_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)790, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT118:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:790
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT118:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_uActHv_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_IstSpannung_HV
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstSpannung_HV_To_DcDc_uActHv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW:

-- Test Case: SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_IstStrom_HV_02 ComWrapper_CAN_Rx_Signals_Get_DC_IstStrom_HV_02
		if(ComWrapper_INT117 == 2000){  ComWrapper_INT117 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT117 == 2001){  ComWrapper_INT117 = physValReq;  *data =100; return 8;}

	if(RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstStrom_HV_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)791, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_DcDc_DcDc_iActHv_VW Rte_Write_SWC_Com_DcDc_DcDc_iActHv_VW

	else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))  ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstStrom_HV_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)791, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT117:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:791
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT117:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_IstStrom_HV_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_IstStrom_HV_02 ComWrapper_CAN_Rx_Signals_Get_DC_IstStrom_HV_02
		if(ComWrapper_INT117 == 2000){  ComWrapper_INT117 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT117 == 2001){  ComWrapper_INT117 = physValReq;  *data =100; return 8;}

	if(RTE_E_OK == comWrapperReturnValue)   ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstStrom_HV_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)791, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_DcDc_DcDc_iActHv_VW Rte_Write_SWC_Com_DcDc_DcDc_iActHv_VW

	else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
			   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_IstStrom_HV_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)791, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT117:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:791
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT117:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_iActHv_VW:-410
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_IstStrom_HV_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_IstStrom_HV_02_To_DcDc_iActHv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW:

-- Test Case: SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_Temperatur ComWrapper_CAN_Rx_Signals_Get_DC_Temperatur
		if(ComWrapper_INT98 == 2000){  ComWrapper_INT98 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT98 == 2001){  ComWrapper_INT98 = physValReq;  *data =100; return 8;}

if( RTE_E_OK == comWrapperReturnValue )

		#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_DcDc_t_C_VW DatasetVector_ComFilterData_Get_tiFil_DcDc_t_C_VW
		if(DATASET_RTEIF_INT9 == 2000){DATASET_RTEIF_INT9 = *Value;}

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)792, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Call_LowPassFilter_Filter_U16 SoftwareFilter_LowPassFilter_Filter_U16
		if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

		#define Rte_Write_SWC_Com_DcDc_DcDc_t_VW Rte_Write_SWC_Com_DcDc_DcDc_t_VW

		
else if ( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ) ||
        ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)792, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT98:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:792
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT98:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_Temperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_DC_Temperatur ComWrapper_CAN_Rx_Signals_Get_DC_Temperatur
		if(ComWrapper_INT98 == 2000){  ComWrapper_INT98 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT98 == 2001){  ComWrapper_INT98 = physValReq;  *data =100; return 8;}

if( RTE_E_OK == comWrapperReturnValue )  --> TRUE

		#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_DcDc_t_C_VW DatasetVector_ComFilterData_Get_tiFil_DcDc_t_C_VW
		if(DATASET_RTEIF_INT9 == 2000){DATASET_RTEIF_INT9 = *Value;}

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)792, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Call_LowPassFilter_Filter_U16 SoftwareFilter_LowPassFilter_Filter_U16
		if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

		#define Rte_Write_SWC_Com_DcDc_DcDc_t_VW Rte_Write_SWC_Com_DcDc_DcDc_t_VW

		
else if ( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ) ||
        ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) ) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_DC_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)792, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT98:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_DcDc_t_C_VW:10
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_DcDc_t_VW_FilterState:SWC_Com_FilterStateIdle
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:792
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT9:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT98:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:6553600
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:1000
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_DcDc_t_VW_FilterState:SWC_Com_FilterStateRunning
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_t_VW:9600
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_DC_Temperatur
  DatasetVector_RteIf.c.DatasetVector_ComFilterData_Get_tiFil_DcDc_t_C_VW
  Xlock.c.Xlock_SetEventStatus
  SoftwareFilter.c.SoftwareFilter_LowPassFilter_Filter_U16
  SWC_Com.c.SWC_Com_RxProcessing_DC_Temperatur_To_DcDc_t_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_DC_Verlustleistung_To_DcDc_pwrLosAct_VW:

-- Test Case: SWC_Com_RxProcessing_DC_Verlustleistung_To_DcDc_pwrLosAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_DC_Verlustleistung_To_DcDc_pwrLosAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_DC_Verlustleistung_To_DcDc_pwrLosAct_VW.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW:

-- Test Case: SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EFP_Anf_Bremsenkuehlung ComWrapper_CAN_Rx_Signals_Get_EFP_Anf_Bremsenkuehlung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ------> TRUE
		if (signalVal < 3u)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EFP_Anf_Bremsenkuehlung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)794, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Esp_Esp_stReqAirCoBrk2_VW Rte_Write_SWC_Com_Esp_Esp_stReqAirCoBrk2_VW
				}
		else  ------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EFP_Anf_Bremsenkuehlung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)794, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:794
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EFP_Anf_Bremsenkuehlung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EFP_Anf_Bremsenkuehlung ComWrapper_CAN_Rx_Signals_Get_EFP_Anf_Bremsenkuehlung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ------> TRUE
		if (signalVal < 3u)  ------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EFP_Anf_Bremsenkuehlung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)794, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Esp_Esp_stReqAirCoBrk2_VW Rte_Write_SWC_Com_Esp_Esp_stReqAirCoBrk2_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EFP_Anf_Bremsenkuehlung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)794, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:794
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EFP_Anf_Bremsenkuehlung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EFP_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk2_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_EM_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_EM1_EM_SollVolumenstrom
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)795, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm_Elm_volfElmMin_VW Rte_Write_SWC_Com_Elm_Elm_volfElmMin_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)795, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:795
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_volfElmMin_VW:10
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_EM_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_EM_SollVolumenstrom_To_Elm_volfElmMin_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB13 ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB13
				if(ComWrapper_INT130 == 2000){  ComWrapper_INT130 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT130 == 2001){  ComWrapper_INT130 = physValReq;  *data =100; return 8;}
				
	if(DatasetVector_Elm_iInv_VW >= 1u)   ---> TRUE
				{
				comWrapperReturnValue = Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB13( TRUE, &canSignal );
		if(RTE_E_OK == comWrapperReturnValue)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_IstStrom_HYB_13_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)797, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				rteSignal = 32 * canSignal;
				#define Rte_Write_Elm_Elm_iInv_VW Rte_Write_SWC_Com_Elm_Elm_iInv_VW
				
				}
		else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
				(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue))  ---> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_IstStrom_HYB_13_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)797, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else
				{
				}
				}
	else
				{
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT130:2001
TEST.VALUE:SWC_Com.<<GLOBAL>>.DatasetVector_Elm_iInv_VW:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:797
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT130:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB13
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB13 ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB13
				if(ComWrapper_INT130 == 2000){  ComWrapper_INT130 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT130 == 2001){  ComWrapper_INT130 = physValReq;  *data =100; return 8;}
				
	if(DatasetVector_Elm_iInv_VW >= 1u)   ---> TRUE
				{
				comWrapperReturnValue = Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB13( TRUE, &canSignal );
		if(RTE_E_OK == comWrapperReturnValue)   ---> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_IstStrom_HYB_13_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)797, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				rteSignal = 32 * canSignal;
				#define Rte_Write_Elm_Elm_iInv_VW Rte_Write_SWC_Com_Elm_Elm_iInv_VW
				
				}
		else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
				(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue))
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_IstStrom_HYB_13_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)797, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else
				{
				}
				}
	else
				{
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT130:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.DatasetVector_Elm_iInv_VW:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:797
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT130:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_iInv_VW:3200
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB13
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_HYB13_To_Elm_iInv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB10 ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB10
				if(ComWrapper_INT129 == 2000){  ComWrapper_INT129 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT129 == 2001){  ComWrapper_INT129 = physValReq;  *data =100; return 8;}
				
	if(DatasetVector_Elm_iInv_VW == 0u)    ---> TRUE
				{
				comWrapperReturnValue = Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB10( TRUE, &canSignal );
		if(RTE_E_OK == comWrapperReturnValue)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_IstStrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)796, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				rteSignal = 32 * canSignal;
				#define Rte_Write_Elm_Elm_iInv_VW Rte_Write_SWC_Com_Elm_Elm_iInv_VW
				
				}
		else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
				(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue))   ---> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_IstStrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)796, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else
				{
				/* Nothing to do. No action specified for this case */
				}
				}
	else
				{
				/* Nothing to do.*/
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT129:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:796
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT129:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB10
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB10 ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB10
				if(ComWrapper_INT129 == 2000){  ComWrapper_INT129 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT129 == 2001){  ComWrapper_INT129 = physValReq;  *data =100; return 8;}
				
	if(DatasetVector_Elm_iInv_VW == 0u)     ---> TRUE
				{ /*EM1_IstStrom_HYB10*/
				comWrapperReturnValue = Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB10( TRUE, &canSignal );
		if(RTE_E_OK == comWrapperReturnValue)     ---> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_IstStrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)796, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				rteSignal = 32 * canSignal;
				#define Rte_Write_Elm_Elm_iInv_VW Rte_Write_SWC_Com_Elm_Elm_iInv_VW
				
				}
		else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
				(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue))
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_IstStrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)796, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else
				{
				/* Nothing to do. No action specified for this case */
				}
				}
	else
				{
				/* Nothing to do.*/
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT129:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:796
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT129:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_iInv_VW:3200
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_IstStrom_HYB10
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_IstStrom_To_Elm_iInv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Istmodus2 ComWrapper_CAN_Rx_Signals_Get_EM1_Istmodus2
				if(ComWrapper_INT128 == 2000){  ComWrapper_INT128 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT128 == 2001){  ComWrapper_INT128 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT128 == 2002){  ComWrapper_INT128 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ----> TRUE
				
		if (signalVal < 9u)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)798, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_Elm_Elm_stOpmAct_VW Rte_Write_SWC_Com_Elm_Elm_stOpmAct_VW
				
		else   ----> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)798, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT128:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:798
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT128:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Istmodus2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Istmodus2 ComWrapper_CAN_Rx_Signals_Get_EM1_Istmodus2
				if(ComWrapper_INT128 == 2000){  ComWrapper_INT128 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT128 == 2001){  ComWrapper_INT128 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT128 == 2002){  ComWrapper_INT128 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ----> TRUE
				
		if (signalVal < 9u)    ----> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)798, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_Elm_Elm_stOpmAct_VW Rte_Write_SWC_Com_Elm_Elm_stOpmAct_VW
				
		else
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)798, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT128:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:798
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT128:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_stOpmAct_VW:3
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Istmodus2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Istmodus2_To_Elm_stOpmAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_PWR_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_EM1_PWR_SollVolumenstrom
		if(ComWrapper_INT102 == 2000){  ComWrapper_INT102 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT102 == 2001){  ComWrapper_INT102 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_PWR_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)799, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Elm_Elm_volfInvMin_VW Rte_Write_SWC_Com_Elm_Elm_volfInvMin_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_PWR_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)799, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT102:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:799
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT102:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_PWR_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_PWR_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_EM1_PWR_SollVolumenstrom
		if(ComWrapper_INT102 == 2000){  ComWrapper_INT102 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT102 == 2001){  ComWrapper_INT102 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_PWR_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)799, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Elm_Elm_volfInvMin_VW Rte_Write_SWC_Com_Elm_Elm_volfInvMin_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_PWR_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)799, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT102:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:799
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT102:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_volfInvMin_VW:500
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_PWR_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_PWR_SollVolumenstrom_To_Elm_volfInvMin_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_ElMotor ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_ElMotor
		if(ComWrapper_INT101 == 2000){  ComWrapper_INT101 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT101 == 2001){  ComWrapper_INT101 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)800, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Elm_Elm_tActElm_VW Rte_Write_SWC_Com_Elm_Elm_tActElm_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)800, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT101:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:800
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT101:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_ElMotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_ElMotor ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_ElMotor
		if(ComWrapper_INT101 == 2000){  ComWrapper_INT101 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT101 == 2001){  ComWrapper_INT101 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)800, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Elm_Elm_tActElm_VW Rte_Write_SWC_Com_Elm_Elm_tActElm_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)800, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT101:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:800
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT101:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_tActElm_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_ElMotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_ElMotor_To_Elm_tActElm_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_PWR ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_PWR
		if(ComWrapper_INT97 == 2000){  ComWrapper_INT97 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT97 == 2001){  ComWrapper_INT97 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)801, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Elm_Elm_tActInv_VW Rte_Write_SWC_Com_Elm_Elm_tActInv_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)801, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT97:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:801
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT97:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_PWR
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_PWR ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_PWR
		if(ComWrapper_INT101 == 2000){  ComWrapper_INT101 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT101 == 2001){  ComWrapper_INT101 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)801, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Elm_Elm_tActInv_VW Rte_Write_SWC_Com_Elm_Elm_tActInv_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)801, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT97:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:801
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT97:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_tActInv_VW:600
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_PWR
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_PWR_To_Elm_tActInv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_Rotor ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_Rotor
		if(ComWrapper_INT100 == 2000){  ComWrapper_INT100 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT100 == 2001){  ComWrapper_INT100 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)802, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Elm_Elm_tActRtr_VW Rte_Write_SWC_Com_Elm_Elm_tActRtr_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
	   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
	   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)802, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT100:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:802
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT100:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_Rotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_Rotor ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_Rotor
		if(ComWrapper_INT100 == 2000){  ComWrapper_INT100 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT100 == 2001){  ComWrapper_INT100 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)    --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)802, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Elm_Elm_tActRtr_VW Rte_Write_SWC_Com_Elm_Elm_tActRtr_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)802, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT100:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:802
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT100:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_tActRtr_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Temperatur_Rotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Temperatur_Rotor_To_Elm_tActRtr_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung_02 ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)804, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm_Elm_pwrLos2_VW Rte_Write_SWC_Com_Elm_Elm_pwrLos2_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)804, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:804
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung_02 ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)804, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm_Elm_pwrLos2_VW Rte_Write_SWC_Com_Elm_Elm_pwrLos2_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)804, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:804
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_pwrLos2_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_02_To_Elm_pwrLos2_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW:

-- Test Case: SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung
		if(ComWrapper_INT106 == 2000){  ComWrapper_INT106 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT106 == 2001){  ComWrapper_INT106 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> FALSE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)803, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_Elm_Elm_pwrLos1_VW Rte_Write_SWC_Com_Elm_Elm_pwrLos1_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)803, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT106:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:803
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT106:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung
		if(ComWrapper_INT106 == 2000){  ComWrapper_INT106 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT106 == 2001){  ComWrapper_INT106 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)803, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_Elm_Elm_pwrLos1_VW Rte_Write_SWC_Com_Elm_Elm_pwrLos1_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM1_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)803, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT106:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:803
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT106:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm_Elm_pwrLos1_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM1_Verlustleistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM1_Verlustleistung_To_Elm_pwrLos1_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW:

-- Test Case: SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_EM_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_EM2_EM_SollVolumenstrom
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)805, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm2_Elm2_volfElmMin_VW Rte_Write_SWC_Com_Elm2_Elm2_volfElmMin_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)805, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:805
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_EM_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_EM_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_EM2_EM_SollVolumenstrom
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)805, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm2_Elm2_volfElmMin_VW Rte_Write_SWC_Com_Elm2_Elm2_volfElmMin_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)805, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:805
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm2_Elm2_volfElmMin_VW:500
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_EM_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_EM_SollVolumenstrom_To_Elm2_volfElmMin_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW:

-- Test Case: SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Istmodus2 ComWrapper_CAN_Rx_Signals_Get_EM2_Istmodus2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ----------> TRUE
		if (signalVal < 9u)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)806, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_stOpmAct_VW Rte_Write_SWC_Com_Elm2_Elm2_stOpmAct_VW
				}
		else ----------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)806, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:806
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Istmodus2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Istmodus2 ComWrapper_CAN_Rx_Signals_Get_EM2_Istmodus2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ----------> TRUE
		if (signalVal < 9u) ----------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)806, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_stOpmAct_VW Rte_Write_SWC_Com_Elm2_Elm2_stOpmAct_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)806, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:806
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm2_Elm2_stOpmAct_VW:5
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Istmodus2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Istmodus2_To_Elm2_stOpmAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW:

-- Test Case: SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_ElMotor ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_ElMotor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)807, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_tActElm_VW Rte_Write_SWC_Com_Elm2_Elm2_tActElm_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )   -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)807, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:807
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_ElMotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_ElMotor ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_ElMotor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)807, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_tActElm_VW Rte_Write_SWC_Com_Elm2_Elm2_tActElm_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)807, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:807
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm2_Elm2_tActElm_VW:600
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_ElMotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_ElMotor_To_Elm2_tActElm_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW:

-- Test Case: SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_PWR ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_PWR
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)808, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_tActInv_VW Rte_Write_SWC_Com_Elm2_Elm2_tActInv_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)808, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:808
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_PWR
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_PWR ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_PWR
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)808, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_tActInv_VW Rte_Write_SWC_Com_Elm2_Elm2_tActInv_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)808, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:808
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm2_Elm2_tActInv_VW:600
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_PWR
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_PWR_To_Elm2_tActInv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW:

-- Test Case: SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_Rotor ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_Rotor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)809, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_tActRtr_VW Rte_Write_SWC_Com_Elm2_Elm2_tActRtr_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ) -----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)809, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:809
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_Rotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_Rotor ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_Rotor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) -----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)809, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_tActRtr_VW Rte_Write_SWC_Com_Elm2_Elm2_tActRtr_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)809, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:809
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm2_Elm2_tActRtr_VW:-350
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Temperatur_Rotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Temperatur_Rotor_To_Elm2_tActRtr_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW:

-- Test Case: SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Verlustleistung_02 ComWrapper_CAN_Rx_Signals_Get_EM2_Verlustleistung_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)810, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_pwrLos2_VW Rte_Write_SWC_Com_Elm2_Elm2_pwrLos2_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  -----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)810, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:810
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Verlustleistung_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM2_Verlustleistung_02 ComWrapper_CAN_Rx_Signals_Get_EM2_Verlustleistung_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) -----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)810, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Elm2_Elm2_pwrLos2_VW Rte_Write_SWC_Com_Elm2_Elm2_pwrLos2_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM2_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)810, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:810
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm2_Elm2_pwrLos2_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM2_Verlustleistung_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM2_Verlustleistung_02_To_Elm2_pwrLos2_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW:

-- Test Case: SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_EM_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_EM3_EM_SollVolumenstrom
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)811, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_volfElmMin_VW Rte_Write_SWC_Com_Elm3_Elm3_volfElmMin_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)811, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:811
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_EM_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_EM_SollVolumenstrom ComWrapper_CAN_Rx_Signals_Get_EM3_EM_SollVolumenstrom
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)811, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_volfElmMin_VW Rte_Write_SWC_Com_Elm3_Elm3_volfElmMin_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_EM_SollVolumenstrom_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)811, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:811
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm3_Elm3_volfElmMin_VW:10
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_EM_SollVolumenstrom
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_EM_SollVolumenstrom_To_Elm3_volfElmMin_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW:

-- Test Case: SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2 ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if ((signalVal < 9u) || (signalVal == 0x0Au))
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_stOpmAct_VW Rte_Write_SWC_Com_Elm3_Elm3_stOpmAct_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:812
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2 ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =0x0A;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   -------> TRUE
		if ((signalVal < 9u) || (signalVal == 0x0Au))   -------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_stOpmAct_VW Rte_Write_SWC_Com_Elm3_Elm3_stOpmAct_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:812
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm3_Elm3_stOpmAct_VW:10
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2 ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =0x0A;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   -------> TRUE
		if ((signalVal < 9u) || (signalVal == 0x0Au))
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_stOpmAct_VW Rte_Write_SWC_Com_Elm3_Elm3_stOpmAct_VW
				}
		else   -------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Istmodus2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)812, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:812
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Istmodus2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Istmodus2_To_Elm3_stOpmAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW:

-- Test Case: SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_ElMotor ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_ElMotor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)813, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_tActElm_VW Rte_Write_SWC_Com_Elm3_Elm3_tActElm_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)813, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:813
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_ElMotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_ElMotor ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_ElMotor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)813, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_tActElm_VW Rte_Write_SWC_Com_Elm3_Elm3_tActElm_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_ElMotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)813, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:813
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm3_Elm3_tActElm_VW:20
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_ElMotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_ElMotor_To_Elm3_tActElm_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW:

-- Test Case: SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_PWR ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_PWR
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)814, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_tActInv_VW Rte_Write_SWC_Com_Elm3_Elm3_tActInv_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)814, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:814
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_PWR
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_PWR ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_PWR
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)814, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_tActInv_VW Rte_Write_SWC_Com_Elm3_Elm3_tActInv_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_PWR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)814, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:814
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm3_Elm3_tActInv_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_PWR
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_PWR_To_Elm3_tActInv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW:

-- Test Case: SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_Rotor ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_Rotor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)815, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_tActRtr_VW Rte_Write_SWC_Com_Elm3_Elm3_tActRtr_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)815, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:815
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_Rotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_Rotor ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_Rotor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)815, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_tActRtr_VW Rte_Write_SWC_Com_Elm3_Elm3_tActRtr_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Temperatur_Rotor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)815, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:815
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm3_Elm3_tActRtr_VW:20
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Temperatur_Rotor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Temperatur_Rotor_To_Elm3_tActRtr_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW:

-- Test Case: SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Verlustleistung_02 ComWrapper_CAN_Rx_Signals_Get_EM3_Verlustleistung_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)816, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_pwrLos2_VW Rte_Write_SWC_Com_Elm3_Elm3_pwrLos2_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )     ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)816, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:816
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Verlustleistung_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_EM3_Verlustleistung_02 ComWrapper_CAN_Rx_Signals_Get_EM3_Verlustleistung_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)816, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_Elm3_Elm3_pwrLos2_VW Rte_Write_SWC_Com_Elm3_Elm3_pwrLos2_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_EM3_Verlustleistung_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)816, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:816
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Elm3_Elm3_pwrLos2_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_EM3_Verlustleistung_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_EM3_Verlustleistung_02_To_Elm3_pwrLos2_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW:

-- Test Case: SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Bremsenkuehlung ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Bremsenkuehlung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_Esp_Esp_stReqAirCoBrk_VW Rte_Write_SWC_Com_Esp_Esp_stReqAirCoBrk_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Esp_Esp_stReqAirCoBrk_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Bremsenkuehlung
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Bremsenkuehlung_To_Esp_stReqAirCoBrk_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW:

-- Test Case: SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Luefternachlauf ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Luefternachlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
				(void)Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Luefternachlauf( TRUE, &canSig_ESC_Anf_Luefternachlauf );
				#define Rte_Write_Esp_Esp_tiAftRunAirCoBrk_VW Rte_Write_SWC_Com_Esp_Esp_tiAftRunAirCoBrk_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Esp_Esp_tiAftRunAirCoBrk_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Luefternachlauf
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Luefternachlauf_To_Esp_tiAftRunAirCoBrk_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW:

-- Test Case: SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Mindestreku ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Mindestreku
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Write_Esp_Esp_bMinRcpReq_VW Rte_Write_SWC_Com_Esp_Esp_bMinRcpReq_VW
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Esp_Esp_bMinRcpReq_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ESC_Anf_Mindestreku
  SWC_Com.c.SWC_Com_RxProcessing_ESC_Anf_Mindestreku_To_Esp_bMinRcpReq_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_ESP_QBit_v_Signal:

-- Test Case: SWC_Com_RxProcessing_ESP_QBit_v_Signal.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ESP_QBit_v_Signal
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ESP_QBit_v_Signal.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESP_QBit_v_Signal ComWrapper_CAN_Rx_Signals_Get_ESP_QBit_v_Signal
		if(ComWrapper_INT19 == 2000){  ComWrapper_INT19 = physValReq;  *data =0;  ComWrapper_INT20 = *data;  return 0;}
		else if(ComWrapper_INT19 == 2001){  ComWrapper_INT19 = physValReq;  *data =1;  ComWrapper_INT20 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		if (SWC_Com_CanSig_ESP_QBit_v_Signal == TRUE) 
		
				#define Rte_Call_Event_SWC_Com_ESP_QBit_v_Signal_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else   --> TRUE
		
				#define Rte_Call_Event_SWC_Com_ESP_QBit_v_Signal_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT19:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT20:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:765
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT19:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT20:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ESP_QBit_v_Signal
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ESP_QBit_v_Signal
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_ESP_QBit_v_Signal
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_ESP_QBit_v_Signal.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ESP_QBit_v_Signal
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ESP_QBit_v_Signal.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESP_QBit_v_Signal ComWrapper_CAN_Rx_Signals_Get_ESP_QBit_v_Signal
		if(ComWrapper_INT19 == 2000){  ComWrapper_INT19 = physValReq;  *data =0;  ComWrapper_INT20 = *data;  return 0;}
		else if(ComWrapper_INT19 == 2001){  ComWrapper_INT19 = physValReq;  *data =1;  ComWrapper_INT20 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		if (SWC_Com_CanSig_ESP_QBit_v_Signal == TRUE) --> TRUE
		
				#define Rte_Call_Event_SWC_Com_ESP_QBit_v_Signal_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else   
		
				#define Rte_Call_Event_SWC_Com_ESP_QBit_v_Signal_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT19:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT20:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:765
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT19:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT20:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ESP_QBit_v_Signal
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ESP_QBit_v_Signal
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_ESP_QBit_v_Signal
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW:

-- Test Case: SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal
		if(ComWrapper_INT17 == 2000){  ComWrapper_INT17 = physValReq;  *data =55000;  ComWrapper_INT18 = *data;  return 0;}
		else if(ComWrapper_INT17 == 2001){  ComWrapper_INT17 = physValReq;  *data =100;  ComWrapper_INT18 = *data;  return 0;}
		else if(ComWrapper_INT17 == 2002){  ComWrapper_INT17 = physValReq;  *data =100;  ComWrapper_INT18 = *data;  return 8;}

if( RTE_E_OK == comWrapperReturnValue ) --> TRUE

		if( (51199u) < SWC_Com_CanSig_ESP_v_Signal_Unfiltered ) --> TRUE
		
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ESP_v_Signal_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else
		
				#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_vVeh_C_VW DatasetVector_ComFilterData_Get_tiFil_vVeh_C_VW
				if(DATASET_RTEIF_INT4 == 2000){DATASET_RTEIF_INT4 = Index; DATASET_RTEIF_INT5 = *Value;}

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ESP_v_Signal_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				if( SWC_Com_FilterStateIdle == SWC_Com_AppSig_Eng_v_VW_FilterState )
				
				#define Rte_Call_LowPassFilter_Filter_U16 LowPassFilter_Filter_U16
				if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

				#define Rte_Write_Eng_Eng_v_VW Rte_Write_SWC_Com_Eng_Eng_v_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ESP_v_Signal_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT17:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT18:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:817
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT17:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT18:55000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal
		if(ComWrapper_INT17 == 2000){  ComWrapper_INT17 = physValReq;  *data =55000;  ComWrapper_INT18 = *data;  return 0;}
		else if(ComWrapper_INT17 == 2001){  ComWrapper_INT17 = physValReq;  *data =100;  ComWrapper_INT18 = *data;  return 0;}
		else if(ComWrapper_INT17 == 2002){  ComWrapper_INT17 = physValReq;  *data =100;  ComWrapper_INT18 = *data;  return 8;}

if( RTE_E_OK == comWrapperReturnValue )

		if( (51199u) < SWC_Com_CanSig_ESP_v_Signal_Unfiltered )
		
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ESP_v_Signal_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else
		
				#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_vVeh_C_VW DatasetVector_ComFilterData_Get_tiFil_vVeh_C_VW
				if(DATASET_RTEIF_INT2 == 2000){DATASET_RTEIF_INT2 = *Value;}

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ESP_v_Signal_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				if( SWC_Com_FilterStateIdle == SWC_Com_AppSig_Eng_v_VW_FilterState )
				
				#define Rte_Call_LowPassFilter_Filter_U16 LowPassFilter_Filter_U16
				if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

				#define Rte_Write_Eng_Eng_v_VW Rte_Write_SWC_Com_Eng_Eng_v_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ESP_v_Signal_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT17:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT18:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_vVeh_C_VW:123
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Eng_v_VW_FilterState:SWC_Com_FilterStateIdle
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:817
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT2:123
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT17:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT18:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:1230
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:1000
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Eng_v_VW_FilterState:SWC_Com_FilterStateRunning
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_Eng_v_VW_InternalMemory:6553600
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal
  DatasetVector_RteIf.c.DatasetVector_ComFilterData_Get_tiFil_vVeh_C_VW
  Xlock.c.Xlock_SetEventStatus
  SoftwareFilter.c.SoftwareFilter_LowPassFilter_Filter_U16
  SWC_Com.c.SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW.003
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal
		if(ComWrapper_INT17 == 2000){  ComWrapper_INT17 = physValReq;  *data =55000;  ComWrapper_INT18 = *data;  return 0;}
		else if(ComWrapper_INT17 == 2001){  ComWrapper_INT17 = physValReq;  *data =100;  ComWrapper_INT18 = *data;  return 0;}
		else if(ComWrapper_INT17 == 2002){  ComWrapper_INT17 = physValReq;  *data =100;  ComWrapper_INT18 = *data;  return 8;}

if( RTE_E_OK == comWrapperReturnValue ) 

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ESP_v_Signal_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT17:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT18:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:817
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT17:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT18:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ESP_v_Signal
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_ESP_v_Signal_To_Eng_v_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW:

-- Test Case: SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FSA_Luftfeuchte_rel ComWrapper_CAN_Rx_Signals_Get_FSA_Luftfeuchte_rel
				if(ComWrapper_INT127 == 2000){  ComWrapper_INT127 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT127 == 2001){  ComWrapper_INT127 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Luftfeuchte_rel_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)818, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_Air_Air_humRelAmb_VW Rte_Write_SWC_Com_Air_Air_humRelAmb_VW
				
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ))  ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Luftfeuchte_rel_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)818, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT127:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:818
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT127:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FSA_Luftfeuchte_rel
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FSA_Luftfeuchte_rel ComWrapper_CAN_Rx_Signals_Get_FSA_Luftfeuchte_rel
				if(ComWrapper_INT127 == 2000){  ComWrapper_INT127 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT127 == 2001){  ComWrapper_INT127 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Luftfeuchte_rel_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)818, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_Air_Air_humRelAmb_VW Rte_Write_SWC_Com_Air_Air_humRelAmb_VW
				
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ))
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Luftfeuchte_rel_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)818, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT127:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:818
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT127:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_humRelAmb_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FSA_Luftfeuchte_rel
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Luftfeuchte_rel_To_Air_humRelAmb_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW:

-- Test Case: SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FSA_Taupunkt ComWrapper_CAN_Rx_Signals_Get_FSA_Taupunkt
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Taupunkt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)819, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tDewPntDampSensAmb_VW Rte_Write_SWC_Com_AC_AC_tDewPntDampSensAmb_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Taupunkt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)819, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:819
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FSA_Taupunkt
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FSA_Taupunkt ComWrapper_CAN_Rx_Signals_Get_FSA_Taupunkt
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Taupunkt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)819, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tDewPntDampSensAmb_VW Rte_Write_SWC_Com_AC_AC_tDewPntDampSensAmb_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Taupunkt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)819, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:819
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tDewPntDampSensAmb_VW:-398
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FSA_Taupunkt
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Taupunkt_To_AC_tDewPntDampSensAmb_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW:

-- Test Case: SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Luft ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Luft
				if(ComWrapper_INT132 == 2000){  ComWrapper_INT132 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT132 == 2001){  ComWrapper_INT132 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Temp_Luft_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)820, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				SWC_Com_AppSig_Air_tAmbWaBx_VW = ((SWORD_RF_0_1_0_0_0_0p1)(SWC_Com_CanSig_FSA_Temp_Luft) * 10);
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Temp_Luft_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)820, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				Rte_Write_Air_Air_tAmbWaBx_VW( SWC_Com_AppSig_Air_tAmbWaBx_VW );
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT132:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:820
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT132:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_tAmbWaBx_VW:770
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Luft
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Luft ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Luft
				if(ComWrapper_INT132 == 2000){  ComWrapper_INT132 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT132 == 2001){  ComWrapper_INT132 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Temp_Luft_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)820, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				SWC_Com_AppSig_Air_tAmbWaBx_VW = ((SWORD_RF_0_1_0_0_0_0p1)(SWC_Com_CanSig_FSA_Temp_Luft) * 10);
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Temp_Luft_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)820, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				Rte_Write_Air_Air_tAmbWaBx_VW( SWC_Com_AppSig_Air_tAmbWaBx_VW );
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT132:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:820
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT132:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_tAmbWaBx_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Luft
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Luft_To_Air_tAmbWaBx_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW:

-- Test Case: SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Sensor ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Sensor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Temp_Sensor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)821, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tDampSensAmb_VW Rte_Write_SWC_Com_AC_AC_tDampSensAmb_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Temp_Sensor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)821, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:821
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Sensor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Sensor ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Sensor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Temp_Sensor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)821, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tDampSensAmb_VW Rte_Write_SWC_Com_AC_AC_tDampSensAmb_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FSA_Temp_Sensor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)821, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:821
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tDampSensAmb_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FSA_Temp_Sensor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FSA_Temp_Sensor_To_AC_tDampSensAmb_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_FS_Luftfeuchte_rel:

-- Test Case: SWC_Com_RxProcessing_FS_Luftfeuchte_rel.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FS_Luftfeuchte_rel
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FS_Luftfeuchte_rel.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FS_Luftfeuchte_rel

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FS_Luftfeuchte_rel ComWrapper_CAN_Rx_Signals_Get_FS_Luftfeuchte_rel
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_Air_Air_humRelCab_VW Rte_Write_SWC_Com_Air_Air_humRelCab_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Luftfeuchte_rel_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)822, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Luftfeuchte_rel_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)822, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Timeout or never received. Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:822
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Luftfeuchte_rel
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FS_Luftfeuchte_rel
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FS_Luftfeuchte_rel
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_FS_Luftfeuchte_rel.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FS_Luftfeuchte_rel
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FS_Luftfeuchte_rel.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FS_Luftfeuchte_rel

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FS_Luftfeuchte_rel ComWrapper_CAN_Rx_Signals_Get_FS_Luftfeuchte_rel
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_Air_Air_humRelCab_VW Rte_Write_SWC_Com_Air_Air_humRelCab_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Luftfeuchte_rel_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)822, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Luftfeuchte_rel_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)822, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Timeout or never received. Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:822
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_humRelCab_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Luftfeuchte_rel
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FS_Luftfeuchte_rel
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FS_Luftfeuchte_rel
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW:

-- Test Case: SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FS_Taupunkt ComWrapper_CAN_Rx_Signals_Get_FS_Taupunkt
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Taupunkt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)823, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tDewPntDampSensCab_VW Rte_Write_SWC_Com_AC_AC_tDewPntDampSensCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   -----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Taupunkt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)823, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:823
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FS_Taupunkt
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FS_Taupunkt ComWrapper_CAN_Rx_Signals_Get_FS_Taupunkt
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   -----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Taupunkt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)823, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tDewPntDampSensCab_VW Rte_Write_SWC_Com_AC_AC_tDewPntDampSensCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Taupunkt_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)823, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:823
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tDewPntDampSensCab_VW:-296
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FS_Taupunkt
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FS_Taupunkt_To_AC_tDewPntDampSensCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW:

-- Test Case: SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Scheibe ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Scheibe
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Temp_Scheibe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)824, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tShdDampSensCab_VW Rte_Write_SWC_Com_AC_AC_tShdDampSensCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) -------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Temp_Scheibe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)824, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:824
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Scheibe
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Scheibe ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Scheibe
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Temp_Scheibe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)824, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tShdDampSensCab_VW Rte_Write_SWC_Com_AC_AC_tShdDampSensCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Temp_Scheibe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)824, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:824
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tShdDampSensCab_VW:-296
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Scheibe
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Scheibe_To_AC_tShdDampSensCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW:

-- Test Case: SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Sensor ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Sensor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Temp_Sensor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)825, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tDampSensCab_VW Rte_Write_SWC_Com_AC_AC_tDampSensCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Temp_Sensor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)825, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:825
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Sensor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Sensor ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Sensor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Temp_Sensor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)825, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tDampSensCab_VW Rte_Write_SWC_Com_AC_AC_tDampSensCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_FS_Temp_Sensor_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)825, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:825
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tDampSensCab_VW:-390
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_FS_Temp_Sensor
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_FS_Temp_Sensor_To_AC_tDampSensCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW:

-- Test Case: SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02 ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if (signalVal < 9u)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_GearBx_GearBx_stInfo_VW Rte_Write_SWC_Com_GearBx_GearBx_stInfo_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:826
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02 ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ------> TRUE
		if (signalVal < 9u)    ------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_GearBx_GearBx_stInfo_VW Rte_Write_SWC_Com_GearBx_GearBx_stInfo_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:826
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_GearBx_GearBx_stInfo_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02 ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ------> TRUE
		if (signalVal < 9u)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_GearBx_GearBx_stInfo_VW Rte_Write_SWC_Com_GearBx_GearBx_stInfo_VW
				}
		else    ------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_GE_Getriebestatus_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)826, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:826
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_GE_Getriebestatus_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_GE_Getriebestatus_02_To_GearBx_stInfo_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW:

-- Test Case: SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe_HighR ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe_HighR
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Energie_Klima_Vorgabe_HighR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)828, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvES_HvES_wAvlThmHiResl_VW Rte_Write_SWC_Com_HvES_HvES_wAvlThmHiResl_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ---------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Energie_Klima_Vorgabe_HighR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)828, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:828
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe_HighR
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe_HighR ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe_HighR
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ---------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Energie_Klima_Vorgabe_HighR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)828, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvES_HvES_wAvlThmHiResl_VW Rte_Write_SWC_Com_HvES_HvES_wAvlThmHiResl_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Energie_Klima_Vorgabe_HighR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)828, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:828
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvES_HvES_wAvlThmHiResl_VW:5
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe_HighR
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_HighR_To_HvES_wAvlThmHiResl_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW:

-- Test Case: SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe
		if(ComWrapper_INT68 == 2000){  ComWrapper_INT68 = physValReq;  *data =100;  ComWrapper_INT69 = *data;  return 0;}
		else if(ComWrapper_INT68 == 2001){  ComWrapper_INT68 = physValReq;  *data =100;  ComWrapper_INT69 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Energie_Klima_Vorgabe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)827, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvES_HvES_wAvlThm_VW Rte_Write_SWC_Com_HvES_HvES_wAvlThm_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Energie_Klima_Vorgabe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)827, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT68:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT69:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:827
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT68:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT69:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvES_HvES_wAvlThm_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe
		if(ComWrapper_INT68 == 2000){  ComWrapper_INT68 = physValReq;  *data =100;  ComWrapper_INT69 = *data;  return 0;}
		else if(ComWrapper_INT68 == 2001){  ComWrapper_INT68 = physValReq;  *data =100;  ComWrapper_INT69 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Energie_Klima_Vorgabe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)827, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvES_HvES_wAvlThm_VW Rte_Write_SWC_Com_HvES_HvES_wAvlThm_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Energie_Klima_Vorgabe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)827, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT68:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT69:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:827
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT68:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT69:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVEM_Energie_Klima_Vorgabe
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Energie_Klima_Vorgabe_To_HvES_wAvlThm_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW:

-- Test Case: SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVEM_Freigabe_Lastabwurf ComWrapper_CAN_Rx_Signals_Get_HVEM_Freigabe_Lastabwurf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Write_HvES_HvES_bCpntShDownAlw_VW Rte_Write_SWC_Com_HvES_HvES_bCpntShDownAlw_VW
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvES_HvES_bCpntShDownAlw_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVEM_Freigabe_Lastabwurf
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Freigabe_Lastabwurf_To_HvES_bCpntShDownAlw_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW:

-- Test Case: SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVEM_Leistung_Klima_Vorgabe ComWrapper_CAN_Rx_Signals_Get_HVEM_Leistung_Klima_Vorgabe
		if(ComWrapper_INT53 == 2000){  ComWrapper_INT53 = physValReq;  *data =100;  ComWrapper_INT54 = *data;  return 0;}
		else if(ComWrapper_INT53 == 2001){  ComWrapper_INT53 = physValReq;  *data =100;  ComWrapper_INT54 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)   ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Leistung_Klima_Vorgabe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)829, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvES_HvES_pwrAvlThm_VW Rte_Write_SWC_Com_HvES_HvES_pwrAvlThm_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Leistung_Klima_Vorgabe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)829, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT53:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT54:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:829
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT53:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT54:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvES_HvES_pwrAvlThm_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVEM_Leistung_Klima_Vorgabe
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVEM_Leistung_Klima_Vorgabe ComWrapper_CAN_Rx_Signals_Get_HVEM_Leistung_Klima_Vorgabe
		if(ComWrapper_INT53 == 2000){  ComWrapper_INT53 = physValReq;  *data =100;  ComWrapper_INT54 = *data;  return 0;}
		else if(ComWrapper_INT53 == 2001){  ComWrapper_INT53 = physValReq;  *data =100;  ComWrapper_INT54 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Leistung_Klima_Vorgabe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)829, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvES_HvES_pwrAvlThm_VW Rte_Write_SWC_Com_HvES_HvES_pwrAvlThm_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )	 ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVEM_Leistung_Klima_Vorgabe_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)829, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT53:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT54:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:829
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT53:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT54:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVEM_Leistung_Klima_Vorgabe
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVEM_Leistung_Klima_Vorgabe_To_HvES_pwrAvlThm_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVK_EKK_Sollmodus:

-- Test Case: SWC_Com_RxProcessing_HVK_EKK_Sollmodus.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVK_EKK_Sollmodus
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVK_EKK_Sollmodus.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus
		if(ComWrapper_INT55 == 2000){  ComWrapper_INT55 = physValReq;  *data =100;  ComWrapper_INT56 = *data;  return 0;}
		else if(ComWrapper_INT55 == 2001){  ComWrapper_INT55 = physValReq;  *data =1;  ComWrapper_INT56 = *data;  return 0;}
		else if(ComWrapper_INT55 == 2002){  ComWrapper_INT55 = physValReq;  *data =100;  ComWrapper_INT56 = *data;  return 16;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		if(Cx2_Freigabe_ausgesetzt < SWC_Com_CanSig_HVK_EKK_Sollmodus)   --> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT55:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT56:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:830
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT55:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT56:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVK_EKK_Sollmodus
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVK_EKK_Sollmodus
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVK_EKK_Sollmodus.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVK_EKK_Sollmodus
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVK_EKK_Sollmodus.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus
		if(ComWrapper_INT55 == 2000){  ComWrapper_INT55 = physValReq;  *data =100;  ComWrapper_INT56 = *data;  return 0;}
		else if(ComWrapper_INT55 == 2001){  ComWrapper_INT55 = physValReq;  *data =1;  ComWrapper_INT56 = *data;  return 0;}
		else if(ComWrapper_INT55 == 2002){  ComWrapper_INT55 = physValReq;  *data =100;  ComWrapper_INT56 = *data;  return 16;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		if(Cx2_Freigabe_ausgesetzt < SWC_Com_CanSig_HVK_EKK_Sollmodus)

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else	 --> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT55:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT56:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:830
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT55:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT56:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVK_EKK_Sollmodus
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVK_EKK_Sollmodus
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVK_EKK_Sollmodus.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVK_EKK_Sollmodus
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVK_EKK_Sollmodus.003
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus
		if(ComWrapper_INT55 == 2000){  ComWrapper_INT55 = physValReq;  *data =100;  ComWrapper_INT56 = *data;  return 0;}
		else if(ComWrapper_INT55 == 2001){  ComWrapper_INT55 = physValReq;  *data =1;  ComWrapper_INT56 = *data;  return 0;}
		else if(ComWrapper_INT55 == 2002){  ComWrapper_INT55 = physValReq;  *data =100;  ComWrapper_INT56 = *data;  return 16;}

if (RTE_E_OK == comWrapperReturnValue)

		if(Cx2_Freigabe_ausgesetzt < SWC_Com_CanSig_HVK_EKK_Sollmodus)

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue)   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_EKK_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)830, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT55:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT56:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:830
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT55:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT56:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVK_EKK_Sollmodus
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVK_EKK_Sollmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVK_EKK_Sollmodus
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus:

-- Test Case: SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus
		if(ComWrapper_INT57 == 2000){  ComWrapper_INT57 = physValReq;  *data =100;  ComWrapper_INT58 = *data;  return 0;}
		else if(ComWrapper_INT57 == 2001){  ComWrapper_INT57 = physValReq;  *data =1;  ComWrapper_INT58 = *data;  return 0;}
		else if(ComWrapper_INT57 == 2002){  ComWrapper_INT57 = physValReq;  *data =100;  ComWrapper_INT58 = *data;  return 16;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		if(Cx2_Freigabe_ausgesetzt < SWC_Com_CanSig_HVK_HVPTC_Sollmodus)   --> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT57:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT58:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:831
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT57:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT58:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus
		if(ComWrapper_INT57 == 2000){  ComWrapper_INT57 = physValReq;  *data =100;  ComWrapper_INT58 = *data;  return 0;}
		else if(ComWrapper_INT57 == 2001){  ComWrapper_INT57 = physValReq;  *data =1;  ComWrapper_INT58 = *data;  return 0;}
		else if(ComWrapper_INT57 == 2002){  ComWrapper_INT57 = physValReq;  *data =100;  ComWrapper_INT58 = *data;  return 16;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		if(Cx2_Freigabe_ausgesetzt < SWC_Com_CanSig_HVK_HVPTC_Sollmodus)

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else	--> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT57:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT58:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:831
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT57:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT58:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus.003
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus
		if(ComWrapper_INT57 == 2000){  ComWrapper_INT57 = physValReq;  *data =100;  ComWrapper_INT58 = *data;  return 0;}
		else if(ComWrapper_INT57 == 2001){  ComWrapper_INT57 = physValReq;  *data =1;  ComWrapper_INT58 = *data;  return 0;}
		else if(ComWrapper_INT57 == 2002){  ComWrapper_INT57 = physValReq;  *data =100;  ComWrapper_INT58 = *data;  return 16;}

if (RTE_E_OK == comWrapperReturnValue)
		if(Cx2_Freigabe_ausgesetzt < SWC_Com_CanSig_HVK_HVPTC_Sollmodus)

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVK_HVPTC_Sollmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)831, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT57:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT58:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:831
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT57:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT58:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVK_HVPTC_Sollmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVK_HVPTC_Sollmodus
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW:

-- Test Case: SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLB_IstModus ComWrapper_CAN_Rx_Signals_Get_HVLB_IstModus
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_IstModus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)832, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_DcDc_DcDc_noModHvChBoostAct_VW Rte_Write_SWC_Com_DcDc_DcDc_noModHvChBoostAct_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_IstModus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)832, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:832
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLB_IstModus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLB_IstModus ComWrapper_CAN_Rx_Signals_Get_HVLB_IstModus
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_IstModus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)832, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_DcDc_DcDc_noModHvChBoostAct_VW Rte_Write_SWC_Com_DcDc_DcDc_noModHvChBoostAct_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_IstModus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)832, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:832
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_noModHvChBoostAct_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLB_IstModus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_IstModus_To_DcDc_noModHvChBoostAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW:

-- Test Case: SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Verlustleistung ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Verlustleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_PlanAntw_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)833, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_DcDc_DcDc_pwrLosLdPlanResp_VW Rte_Write_SWC_Com_DcDc_DcDc_pwrLosLdPlanResp_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_PlanAntw_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)833, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:833
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Verlustleistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Verlustleistung ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Verlustleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)     ---> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_PlanAntw_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)833, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_DcDc_DcDc_pwrLosLdPlanResp_VW Rte_Write_SWC_Com_DcDc_DcDc_pwrLosLdPlanResp_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_PlanAntw_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)833, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:833
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_pwrLosLdPlanResp_VW:500
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Verlustleistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Verlustleistung_To_DcDc_pwrLosLdPlanResp_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW:

-- Test Case: SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Zaehler ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Zaehler
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_PlanAntw_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)834, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_DcDc_DcDc_ctLdPlanResp_VW Rte_Write_SWC_Com_DcDc_DcDc_ctLdPlanResp_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_PlanAntw_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)834, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:834
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Zaehler
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Zaehler ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Zaehler
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_PlanAntw_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)834, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_DcDc_DcDc_ctLdPlanResp_VW Rte_Write_SWC_Com_DcDc_DcDc_ctLdPlanResp_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_PlanAntw_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)834, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:834
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_ctLdPlanResp_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLB_PlanAntw_Zaehler
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_PlanAntw_Zaehler_To_DcDc_ctLdPlanResp_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW:

-- Test Case: SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLB_Temperatur ComWrapper_CAN_Rx_Signals_Get_HVLB_Temperatur
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_TEMPERATUR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)835, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_DcDc_DcDc_tHvChBoost_VW Rte_Write_SWC_Com_DcDc_DcDc_tHvChBoost_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ---------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_TEMPERATUR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)835, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:835
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLB_Temperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLB_Temperatur ComWrapper_CAN_Rx_Signals_Get_HVLB_Temperatur
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ---------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_TEMPERATUR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)835, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_DcDc_DcDc_tHvChBoost_VW Rte_Write_SWC_Com_DcDc_DcDc_tHvChBoost_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLB_TEMPERATUR_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)835, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:835
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_DcDc_DcDc_tHvChBoost_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLB_Temperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLB_Temperatur_To_DcDc_tHvChBoost_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if( ( RTE_E_OK== comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Write_HvESCh_HvESCh_stDemHeatHvBattRaw_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stDemHeatHvBattRaw_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_stDemHeatHvBattRaw_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBattRaw_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_BATTKOND_ANF_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)836, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvESCh_HvESCh_stDemHeatHvBatt_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stDemHeatHvBatt_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_BATTKOND_ANF_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)836, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:836
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_BATTKOND_ANF_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)836, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvESCh_HvESCh_stDemHeatHvBatt_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stDemHeatHvBatt_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_BATTKOND_ANF_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)836, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:836
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_stDemHeatHvBatt_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_BattKond_Anf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_BattKond_Anf_To_HvESCh_stDemHeatHvBatt_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_Dauer_Klima_02 ComWrapper_CAN_Rx_Signals_Get_HVLM_Dauer_Klima_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ((RTE_E_OK == comWrapperReturnValue) ||
				(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_Dauer_Klima_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)837, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvESCh_HvESCh_tiSelPreCdnCab_VW Rte_Write_SWC_Com_HvESCh_HvESCh_tiSelPreCdnCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue))   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_Dauer_Klima_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)837, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:837
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_Dauer_Klima_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_Dauer_Klima_02 ComWrapper_CAN_Rx_Signals_Get_HVLM_Dauer_Klima_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ((RTE_E_OK == comWrapperReturnValue) ||
				(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_Dauer_Klima_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)837, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvESCh_HvESCh_tiSelPreCdnCab_VW Rte_Write_SWC_Com_HvESCh_HvESCh_tiSelPreCdnCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue))
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_Dauer_Klima_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)837, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:837
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_tiSelPreCdnCab_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_Dauer_Klima_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Dauer_Klima_02_To_HvESCh_tiSelPreCdnCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_FreigabeKlimatisierung ComWrapper_CAN_Rx_Signals_Get_HVLM_FreigabeKlimatisierung
		if(ComWrapper_INT80 == 2000){  ComWrapper_INT80 = physValReq;  *data =100;  ComWrapper_INT81 = *data;  return 0;}
		else if(ComWrapper_INT80 == 2001){  ComWrapper_INT80 = physValReq;  *data =100;  ComWrapper_INT81 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_FreigabeKlimatisierung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)838, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_HvESCh_HvESCh_bRlsPreCdnCab_VW Rte_Write_SWC_Com_HvESCh_HvESCh_bRlsPreCdnCab_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_FreigabeKlimatisierung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)838, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT80:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT81:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:838
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT80:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT81:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_FreigabeKlimatisierung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_FreigabeKlimatisierung ComWrapper_CAN_Rx_Signals_Get_HVLM_FreigabeKlimatisierung
		if(ComWrapper_INT80 == 2000){  ComWrapper_INT80 = physValReq;  *data =100;  ComWrapper_INT81 = *data;  return 0;}
		else if(ComWrapper_INT80 == 2001){  ComWrapper_INT80 = physValReq;  *data =100;  ComWrapper_INT81 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_FreigabeKlimatisierung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)838, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_HvESCh_HvESCh_bRlsPreCdnCab_VW Rte_Write_SWC_Com_HvESCh_HvESCh_bRlsPreCdnCab_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_FreigabeKlimatisierung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)838, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT80:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT81:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:838
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT80:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT81:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_bRlsPreCdnCab_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_FreigabeKlimatisierung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_FreigabeKlimatisierung_To_HvESCh_bRlsPreCdnCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_LadeAnforderung ComWrapper_CAN_Rx_Signals_Get_HVLM_LadeAnforderung
		if(ComWrapper_INT82 == 2000){  ComWrapper_INT82 = physValReq;  *data =100;  ComWrapper_INT83 = *data;  return 0;}
		else if(ComWrapper_INT82 == 2001){  ComWrapper_INT82 = physValReq;  *data =100;  ComWrapper_INT83 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_LadeAnforderung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)839, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvOBCh_HvOBCh_stChMod_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_stChMod_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_LadeAnforderung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)839, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT82:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT83:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:839
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT82:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT83:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_LadeAnforderung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_LadeAnforderung ComWrapper_CAN_Rx_Signals_Get_HVLM_LadeAnforderung
		if(ComWrapper_INT82 == 2000){  ComWrapper_INT82 = physValReq;  *data =100;  ComWrapper_INT83 = *data;  return 0;}
		else if(ComWrapper_INT82 == 2001){  ComWrapper_INT82 = physValReq;  *data =100;  ComWrapper_INT83 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_LadeAnforderung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)839, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvOBCh_HvOBCh_stChMod_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_stChMod_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_LadeAnforderung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)839, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT82:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT83:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:839
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT82:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT83:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvOBCh_HvOBCh_stChMod_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_LadeAnforderung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_LadeAnforderung_To_HvOBCh_stChMod_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_MaxLadeLeistung ComWrapper_CAN_Rx_Signals_Get_HVLM_MaxLadeLeistung
		if(ComWrapper_INT84 == 2000){  ComWrapper_INT84 = physValReq;  *data =100;  return 0;}
		else if(ComWrapper_INT84 == 2001){  ComWrapper_INT84 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_MaxLadeLeistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)840, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvOBCh_HvOBCh_pwrLdMax_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_pwrLdMax_VW

else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_MaxLadeLeistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)840, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT84:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:840
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT84:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_MaxLadeLeistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_MaxLadeLeistung ComWrapper_CAN_Rx_Signals_Get_HVLM_MaxLadeLeistung
		if(ComWrapper_INT84 == 2000){  ComWrapper_INT84 = physValReq;  *data =100;  ComWrapper_INT85 = *data;  return 0;}
		else if(ComWrapper_INT84 == 2001){  ComWrapper_INT84 = physValReq;  *data =100;  ComWrapper_INT85 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_MaxLadeLeistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)840, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvOBCh_HvOBCh_pwrLdMax_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_pwrLdMax_VW

else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)) 

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_MaxLadeLeistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)840, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT84:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:840
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT84:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvOBCh_HvOBCh_pwrLdMax_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_MaxLadeLeistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_MaxLadeLeistung_To_HvOBCh_pwrLdMax_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Dauer ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Dauer
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Dauer_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)841, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvESCh_HvESCh_tiLdPlanReq_VW Rte_Write_SWC_Com_HvESCh_HvESCh_tiLdPlanReq_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  -------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Dauer_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)841, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:841
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Dauer
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Dauer ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Dauer
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) -------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Dauer_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)841, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvESCh_HvESCh_tiLdPlanReq_VW Rte_Write_SWC_Com_HvESCh_HvESCh_tiLdPlanReq_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Dauer_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)841, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:841
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_tiLdPlanReq_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Dauer
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Dauer_To_HvESCh_tiLdPlanReq_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Ladeart ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Ladeart
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Ladeart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)842, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvESCh_HvESCh_stLdPlanReq_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stLdPlanReq_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Ladeart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)842, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:842
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Ladeart
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Ladeart ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Ladeart
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Ladeart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)842, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvESCh_HvESCh_stLdPlanReq_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stLdPlanReq_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Ladeart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)842, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:842
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_stLdPlanReq_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Ladeart
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Ladeart_To_HvESCh_stLdPlanReq_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Leistung ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Leistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Leistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)843, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				if (signalVal > 655350)
				#define Rte_Write_HvESCh_HvESCh_pwrLdPlanReq_VW Rte_Write_SWC_Com_HvESCh_HvESCh_pwrLdPlanReq_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Leistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)843, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:843
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Leistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Leistung ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Leistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Leistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)843, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				if (signalVal > 655350)
				#define Rte_Write_HvESCh_HvESCh_pwrLdPlanReq_VW Rte_Write_SWC_Com_HvESCh_HvESCh_pwrLdPlanReq_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Leistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)843, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:843
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_pwrLdPlanReq_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Leistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Leistung_To_HvESCh_pwrLdPlanReq_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Zaehler ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Zaehler
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)844, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvESCh_HvESCh_ctLdPlanReq_VW Rte_Write_SWC_Com_HvESCh_HvESCh_ctLdPlanReq_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ---> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)844, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:844
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Zaehler
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Zaehler ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Zaehler
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ---> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)844, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvESCh_HvESCh_ctLdPlanReq_VW Rte_Write_SWC_Com_HvESCh_HvESCh_ctLdPlanReq_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_PlanAnfr_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)844, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:844
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_ctLdPlanReq_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_PlanAnfr_Zaehler
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_PlanAnfr_Zaehler_To_HvESCh_ctLdPlanReq_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus
		if(ComWrapper_INT86 == 2000){  ComWrapper_INT86 = physValReq;  *data =3;    return 0;}
		else if(ComWrapper_INT86 == 2001){  ComWrapper_INT86 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT86 == 2002){  ComWrapper_INT86 = physValReq;  *data =100;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

	if(Cx2_Abtauen < SWC_Com_CanSig_HVLM_STH_Betriebsmodus)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvESCh_HvESCh_stOpmParkHeat_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stOpmParkHeat_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT86:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:845
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT86:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus
		if(ComWrapper_INT86 == 2000){  ComWrapper_INT86 = physValReq;  *data =3;    return 0;}
		else if(ComWrapper_INT86 == 2001){  ComWrapper_INT86 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT86 == 2002){  ComWrapper_INT86 = physValReq;  *data =100;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

	if(Cx2_Abtauen < SWC_Com_CanSig_HVLM_STH_Betriebsmodus)  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvESCh_HvESCh_stOpmParkHeat_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stOpmParkHeat_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT86:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:845
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT86:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus
		if(ComWrapper_INT86 == 2000){  ComWrapper_INT86 = physValReq;  *data =3;    return 0;}
		else if(ComWrapper_INT86 == 2001){  ComWrapper_INT86 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT86 == 2002){  ComWrapper_INT86 = physValReq;  *data =100;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

	if(Cx2_Abtauen < SWC_Com_CanSig_HVLM_STH_Betriebsmodus)  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvESCh_HvESCh_stOpmParkHeat_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stOpmParkHeat_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_STH_Betriebsmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT86:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:845
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT86:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_stOpmParkHeat_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_STH_Betriebsmodus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_STH_Betriebsmodus_To_HvESCh_stOpmParkHeat_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_Status_Netz ComWrapper_CAN_Rx_Signals_Get_HVLM_Status_Netz
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_HvESCh_HvESCh_bOnGrid_VW Rte_Write_SWC_Com_HvESCh_HvESCh_bOnGrid_VW
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_bOnGrid_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_Status_Netz
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Status_Netz_To_HvESCh_bOnGrid_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_Stecker_Status ComWrapper_CAN_Rx_Signals_Get_HVLM_Stecker_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_Stecker_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)846, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvESCh_HvESCh_stLdPlugDet_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stLdPlugDet_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   -----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_Stecker_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)846, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:846
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_Stecker_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_Stecker_Status ComWrapper_CAN_Rx_Signals_Get_HVLM_Stecker_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) -----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_Stecker_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)846, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvESCh_HvESCh_stLdPlugDet_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stLdPlugDet_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_Stecker_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)846, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:846
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_Stecker_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_Stecker_Status_To_HvESCh_stLdPlugDet_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_Modus ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_Modus
		if(ComWrapper_INT25 == 2000){  ComWrapper_INT25 = physValReq;  *data =100;  ComWrapper_INT26 = *data;  return 0;}
		else if(ComWrapper_INT25 == 2001){  ComWrapper_INT25 = physValReq;  *data =100;  ComWrapper_INT26 = *data;  return 8;}

if ( RTE_E_OK == comWrapperReturnValue ) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_Modus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvESCh_HvESCh_stOpmPreCdnCab_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stOpmPreCdnCab_VW

else if( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_Modus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT25:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT26:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:847
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT25:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT26:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_stOpmPreCdnCab_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_Modus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_Modus ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_Modus
		if(ComWrapper_INT25 == 2000){  ComWrapper_INT25 = physValReq;  *data =100;  ComWrapper_INT26 = *data;  return 0;}
		else if(ComWrapper_INT25 == 2001){  ComWrapper_INT25 = physValReq;  *data =100;  ComWrapper_INT26 = *data;  return 8;}

if ( RTE_E_OK == comWrapperReturnValue )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_Modus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvESCh_HvESCh_stOpmPreCdnCab_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stOpmPreCdnCab_VW

else if( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue )  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_Modus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT25:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT26:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:847
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT25:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT26:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_Modus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_Modus_To_HvESCh_stOpmPreCdnCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW:

-- Test Case: SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz
		if(ComWrapper_INT85 == 2000){  ComWrapper_INT85 = physValReq;  *data =3;    return 0;}
		else if(ComWrapper_INT85 == 2001){  ComWrapper_INT85 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT85 == 2002){  ComWrapper_INT85 = physValReq;  *data =100;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

	if(Cx2_Verbrennerstandheizung_erzwingen < SWC_Com_CanSig_HVLM_VK_STH_Einsatz)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvESCh_HvESCh_stAlwParkHeat_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stAlwParkHeat_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT85:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:848
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT85:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz
		if(ComWrapper_INT85 == 2000){  ComWrapper_INT85 = physValReq;  *data =3;    return 0;}
		else if(ComWrapper_INT85 == 2001){  ComWrapper_INT85 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT85 == 2002){  ComWrapper_INT85 = physValReq;  *data =100;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)   --> TRUE

	if(Cx2_Verbrennerstandheizung_erzwingen < SWC_Com_CanSig_HVLM_VK_STH_Einsatz)   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvESCh_HvESCh_stAlwParkHeat_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stAlwParkHeat_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT85:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:848
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT85:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz
		if(ComWrapper_INT85 == 2000){  ComWrapper_INT85 = physValReq;  *data =3;    return 0;}
		else if(ComWrapper_INT85 == 2001){  ComWrapper_INT85 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT85 == 2002){  ComWrapper_INT85 = physValReq;  *data =100;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)   --> TRUE

	if(Cx2_Verbrennerstandheizung_erzwingen < SWC_Com_CanSig_HVLM_VK_STH_Einsatz) 

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else     --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvESCh_HvESCh_stAlwParkHeat_VW Rte_Write_SWC_Com_HvESCh_HvESCh_stAlwParkHeat_VW

		
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_HVLM_VK_STH_Einsatz_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)848, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT85:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:848
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT85:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvESCh_HvESCh_stAlwParkHeat_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_HVLM_VK_STH_Einsatz
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_HVLM_VK_STH_Einsatz_To_HvESCh_stAlwParkHeat_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KBI_Kilometerstand:

-- Test Case: SWC_Com_RxProcessing_KBI_Kilometerstand.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KBI_Kilometerstand
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KBI_Kilometerstand.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KBI_Kilometerstand

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KBI_Kilometerstand ComWrapper_CAN_Rx_Signals_Get_KBI_Kilometerstand
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KBI_Kilometerstand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)849, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue)) ---------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KBI_Kilometerstand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)849, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Timeout or never received. Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:849
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Kilometerstand
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KBI_Kilometerstand
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Kilometerstand
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KBI_Kilometerstand.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KBI_Kilometerstand
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KBI_Kilometerstand.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KBI_Kilometerstand

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KBI_Kilometerstand ComWrapper_CAN_Rx_Signals_Get_KBI_Kilometerstand
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ---------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KBI_Kilometerstand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)849, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue))
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KBI_Kilometerstand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)849, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Timeout or never received. Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:849
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Kilometerstand
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KBI_Kilometerstand
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Kilometerstand
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW:

-- Test Case: SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KBI_Standzeit_02 ComWrapper_CAN_Rx_Signals_Get_KBI_Standzeit_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KBI_Standzeit_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)850, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_InstrPan_InstrPan_tiVehIdl_VW Rte_Write_SWC_Com_InstrPan_InstrPan_tiVehIdl_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KBI_Standzeit_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)850, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:850
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KBI_Standzeit_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KBI_Standzeit_02 ComWrapper_CAN_Rx_Signals_Get_KBI_Standzeit_02
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KBI_Standzeit_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)850, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_InstrPan_InstrPan_tiVehIdl_VW Rte_Write_SWC_Com_InstrPan_InstrPan_tiVehIdl_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KBI_Standzeit_02_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)850, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:850
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_InstrPan_InstrPan_tiVehIdl_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KBI_Standzeit_02
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Standzeit_02_To_InstrPan_tiVehIdl_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KBI_Tankwarnung_To_InstrPan_bTankLmpWarn_VW:

-- Test Case: SWC_Com_RxProcessing_KBI_Tankwarnung_To_InstrPan_bTankLmpWarn_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KBI_Tankwarnung_To_InstrPan_bTankLmpWarn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KBI_Tankwarnung_To_InstrPan_bTankLmpWarn_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KBI_Tankwarnung ComWrapper_CAN_Rx_Signals_Get_KBI_Tankwarnung
		if(ComWrapper_INT21 == 2000){  ComWrapper_INT21 = physValReq;  *data =100;  ComWrapper_INT22 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_InstrPan_InstrPan_bTankLmpWarn_VW Rte_Write_SWC_Com_InstrPan_InstrPan_bTankLmpWarn_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT21:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT22:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT21:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT22:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_InstrPan_InstrPan_bTankLmpWarn_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Tankwarnung_To_InstrPan_bTankLmpWarn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KBI_Tankwarnung
  SWC_Com.c.SWC_Com_RxProcessing_KBI_Tankwarnung_To_InstrPan_bTankLmpWarn_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW:

-- Test Case: SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW

				#define Rte_Call_ComWrapper_LIN_Rx_Signals_Get_KJS_PCB_temp ComWrapper_LIN_Rx_Signals_Get_KJS_PCB_temp
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_SWC_Com_RadBli_RadBli_tPcbRadBli1_VW Rte_Write_SWC_Com_RadBli_RadBli_tPcbRadBli1_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_SWC_Com_RadBli_RadBli_tPcbRadBli1_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW
  ComWrapper.c.ComWrapper_LIN_Rx_Signals_Get_KJS_PCB_temp
  SWC_Com.c.SWC_Com_RxProcessing_KJS_PCB_temp_To_RadBli_tPcbRadBli1_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW:

-- Test Case: SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW

				#define Rte_Call_ComWrapper_LIN_Rx_Signals_Get_KJS_rot_Dir ComWrapper_LIN_Rx_Signals_Get_KJS_rot_Dir
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_SWC_Com_RadBli_RadBli_stActRotDir_VW Rte_Write_SWC_Com_RadBli_RadBli_stActRotDir_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_SWC_Com_RadBli_RadBli_stActRotDir_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW
  ComWrapper.c.ComWrapper_LIN_Rx_Signals_Get_KJS_rot_Dir
  SWC_Com.c.SWC_Com_RxProcessing_KJS_rot_Dir_To_RadBli_stActRotDir_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW:

-- Test Case: SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if (signalVal < 3)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stCodConfPred_VW Rte_Write_SWC_Com_AC_AC_stCodConfPred_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:851
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ----------> TRUE
		if (signalVal < 3)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stCodConfPred_VW Rte_Write_SWC_Com_AC_AC_stCodConfPred_VW
				}
		else   ----------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:851
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
				if (RTE_E_OK == comWrapperReturnValue)  ----------> TRUE
				if (signalVal < 3)  ----------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stCodConfPred_VW Rte_Write_SWC_Com_AC_AC_stCodConfPred_VW
				}
				else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
				else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_AC_Schalter_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)851, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				else
				
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:851
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stCodConfPred_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_AC_Schalter_Prognose_To_AC_stCodConfPred_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_FahrPr ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_FahrPr
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   ------> TRUE
				#define Rte_Write_AC_AC_noDrvModActCharUsr_VW Rte_Write_SWC_Com_AC_AC_noDrvModActCharUsr_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_noDrvModActCharUsr_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_FahrPr
  SWC_Com.c.SWC_Com_RxProcessing_KL_Charisma_FahrPr_To_AC_noDrvModActCharUsr_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_Status ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Charisma_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)852, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stSysCharUsr_VW Rte_Write_SWC_Com_AC_AC_stSysCharUsr_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Charisma_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)852, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:852
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_Status ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Charisma_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)852, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stSysCharUsr_VW Rte_Write_SWC_Com_AC_AC_stSysCharUsr_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Charisma_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)852, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:852
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stSysCharUsr_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Charisma_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Charisma_Status_To_AC_stSysCharUsr_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Eps_Innen ComWrapper_CAN_Rx_Signals_Get_KL_Eps_Innen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ( RTE_E_OK == comWrapperReturnValue )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Eps_Innen_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)853, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				/* Manual calculation from raw to physical because ComWrapper will cut off decimal places, see #11979 */
				AC_tCabDifAvrg_VW = (5 * SWC_Com_CanSig_KL_Eps_Innen) - 500;
				#define Rte_Write_AC_AC_tCabDifAvrg_VW Rte_Write_SWC_Com_AC_AC_tCabDifAvrg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ------------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Eps_Innen_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)853, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Do nothing. No behavior defined for this case */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:853
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Eps_Innen
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Eps_Innen ComWrapper_CAN_Rx_Signals_Get_KL_Eps_Innen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ( RTE_E_OK == comWrapperReturnValue ) ------------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Eps_Innen_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)853, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				/* Manual calculation from raw to physical because ComWrapper will cut off decimal places, see #11979 */
				AC_tCabDifAvrg_VW = (5 * SWC_Com_CanSig_KL_Eps_Innen) - 500;
				#define Rte_Write_AC_AC_tCabDifAvrg_VW Rte_Write_SWC_Com_AC_AC_tCabDifAvrg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Eps_Innen_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)853, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Do nothing. No behavior defined for this case */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:853
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tCabDifAvrg_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Eps_Innen
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Eps_Innen_To_AC_tCabDifAvrg_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Frischluftklappe_Status ComWrapper_CAN_Rx_Signals_Get_KL_Frischluftklappe_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Frischluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)854, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_rAirInFlap_VW Rte_Write_SWC_Com_AC_AC_rAirInFlap_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Frischluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)854, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:854
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Frischluftklappe_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Frischluftklappe_Status ComWrapper_CAN_Rx_Signals_Get_KL_Frischluftklappe_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Frischluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)854, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_rAirInFlap_VW Rte_Write_SWC_Com_AC_AC_rAirInFlap_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Frischluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)854, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:854
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_rAirInFlap_VW:200
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Frischluftklappe_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Frischluftklappe_Status_To_AC_rAirInFlap_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0xB;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =0xA;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if ( (signalVal != 0xB) && (signalVal != 0xC) && (signalVal != 0xD) )
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stCabFanRe_VW Rte_Write_SWC_Com_AC_AC_stCabFanRe_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )    ------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:855
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0xB;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =0xA;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ------------> TRUE
		if ( (signalVal != 0xB) && (signalVal != 0xC) && (signalVal != 0xD) ) ------------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stCabFanRe_VW Rte_Write_SWC_Com_AC_AC_stCabFanRe_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:855
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stCabFanRe_VW:0xA
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0xB;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =0xA;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   ------------> TRUE
		if ( (signalVal != 0xB) && (signalVal != 0xC) && (signalVal != 0xD) )
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stCabFanRe_VW Rte_Write_SWC_Com_AC_AC_stCabFanRe_VW
				}
		else  ------------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Fond_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)855, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:855
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Fond_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Fond_Status_To_AC_stCabFanRe_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if(CxA_Geblaesestufe_100 < SWC_Com_CanSig_KL_Geblaese_Status)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_AC_AC_stCabFan_VW Rte_Write_SWC_Com_AC_AC_stCabFan_VW
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:856
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) -------> TRUE
		if(CxA_Geblaesestufe_100 < SWC_Com_CanSig_KL_Geblaese_Status)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else  -------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_AC_AC_stCabFan_VW Rte_Write_SWC_Com_AC_AC_stCabFan_VW
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:856
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				
				
	if (RTE_E_OK == comWrapperReturnValue) -------> TRUE
		if(CxA_Geblaesestufe_100 < SWC_Com_CanSig_KL_Geblaese_Status) -------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_AC_AC_stCabFan_VW Rte_Write_SWC_Com_AC_AC_stCabFan_VW
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Geblaese_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)856, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:856
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stCabFan_VW:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Geblaese_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Geblaese_Status_To_AC_stCabFan_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Heizbedarf ComWrapper_CAN_Rx_Signals_Get_KL_Heizbedarf
		if(ComWrapper_INT49 == 2000){  ComWrapper_INT49 = physValReq;  *data =100;  ComWrapper_INT50 = *data;  return 0;}
		else if(ComWrapper_INT49 == 2001){  ComWrapper_INT49 = physValReq;  *data =100;  ComWrapper_INT50 = *data;  return 8;}

if((RTE_E_OK										  == comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue))	 --> TRUE

		if(RTE_E_OK == comWrapperReturnValue)	   --> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Heizbedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)857, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				#define Rte_Write_SWC_Com_AC_AC_tCoHeatExchSet_VW Rte_Write_SWC_Com_AC_AC_tCoHeatExchSet_VW

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Heizbedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)857, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		if( ( Cx000_Kein_Heizbedarf == canSig_KL_Heizbedarf ) || ( Cx3FE_Init <= canSig_KL_Heizbedarf ) )

				#define Rte_Write_SWC_Com_AC_AC_bHeatDemCab_VW Rte_Write_SWC_Com_AC_AC_bHeatDemCab_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT49:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT50:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:857
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT49:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT50:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tCoHeatExchSet_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Heizbedarf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Heizbedarf ComWrapper_CAN_Rx_Signals_Get_KL_Heizbedarf
		if(ComWrapper_INT49 == 2000){  ComWrapper_INT49 = physValReq;  *data =100;  ComWrapper_INT50 = *data;  return 0;}
		else if(ComWrapper_INT49 == 2001){  ComWrapper_INT49 = physValReq;  *data =100;  ComWrapper_INT50 = *data;  return 8;}

if((RTE_E_OK == comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue))	 --> TRUE

		if(RTE_E_OK == comWrapperReturnValue)

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Heizbedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)857, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				#define Rte_Write_SWC_Com_AC_AC_tCoHeatExchSet_VW Rte_Write_SWC_Com_AC_AC_tCoHeatExchSet_VW

		else		  --> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Heizbedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)857, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

			if( ( Cx000_Kein_Heizbedarf == canSig_KL_Heizbedarf ) || ( Cx3FE_Init <= canSig_KL_Heizbedarf ) )

					#define Rte_Write_SWC_Com_AC_AC_bHeatDemCab_VW Rte_Write_SWC_Com_AC_AC_bHeatDemCab_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT49:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT50:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:857
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT49:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT50:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_bHeatDemCab_VW:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Heizbedarf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Heizbedarf_To_AC_tCoHeatExchSet_VW_AC_bHeatDemCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Innen_Temp ComWrapper_CAN_Rx_Signals_Get_KL_Innen_Temp
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (comWrapperReturnValue == RTE_E_OK)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Innen_Temp_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)858, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_AC_AC_tCab_VW Rte_Write_SWC_Com_AC_AC_tCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Innen_Temp_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)858, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:858
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Innen_Temp
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Innen_Temp ComWrapper_CAN_Rx_Signals_Get_KL_Innen_Temp
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (comWrapperReturnValue == RTE_E_OK) ---------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Innen_Temp_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)858, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_AC_AC_tCab_VW Rte_Write_SWC_Com_AC_AC_tCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Innen_Temp_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)858, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:858
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tCab_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Innen_Temp
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Innen_Temp_To_AC_tCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Kuehlbedarf ComWrapper_CAN_Rx_Signals_Get_KL_Kuehlbedarf
		if(ComWrapper_INT51 == 2000){  ComWrapper_INT51 = physValReq;  *data =100;  ComWrapper_INT52 = *data;  return 0;}
		else if(ComWrapper_INT51 == 2001){  ComWrapper_INT51 = physValReq;  *data =100;  ComWrapper_INT52 = *data;  return 8;}

if((RTE_E_OK										  == comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue))   ---< TURE

		if((RTE_E_OK == comWrapperReturnValue) || (CxFD_Kein_Kuehlbedarf == canSig_KL_Kuehlbedarf))  ---< TURE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Kuehlbedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)859, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				#define Rte_Write_SWC_Com_AC_AC_tAirEvpSet_VW Rte_Write_SWC_Com_AC_AC_tAirEvpSet_VW

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Kuehlbedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)859, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		if( CxFD_Kein_Kuehlbedarf > canSig_KL_Kuehlbedarf )

				#define Rte_Write_SWC_Com_AC_AC_bCoDemCab_VW Rte_Write_SWC_Com_AC_AC_bCoDemCab_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT51:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT52:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_bCoDemCab_VW:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:859
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT51:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT52:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_bCoDemCab_VW:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tAirEvpSet_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Kuehlbedarf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Kuehlbedarf ComWrapper_CAN_Rx_Signals_Get_KL_Kuehlbedarf
		if(ComWrapper_INT51 == 2000){  ComWrapper_INT51 = physValReq;  *data =100;  ComWrapper_INT52 = *data;  return 0;}
		else if(ComWrapper_INT51 == 2001){  ComWrapper_INT51 = physValReq;  *data =100;  ComWrapper_INT52 = *data;  return 8;}

if((RTE_E_OK  == comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
	 (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue))   ---< TURE

		if((RTE_E_OK == comWrapperReturnValue) || (CxFD_Kein_Kuehlbedarf == canSig_KL_Kuehlbedarf))

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Kuehlbedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)859, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

				#define Rte_Write_SWC_Com_AC_AC_tAirEvpSet_VW Rte_Write_SWC_Com_AC_AC_tAirEvpSet_VW

		else	 ---> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Kuehlbedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)859, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		if( CxFD_Kein_Kuehlbedarf > canSig_KL_Kuehlbedarf )

				#define Rte_Write_SWC_Com_AC_AC_bCoDemCab_VW Rte_Write_SWC_Com_AC_AC_bCoDemCab_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT51:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT52:2001
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_bCoDemCab_VW:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:859
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT51:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT52:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_bCoDemCab_VW:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tAirEvpSet_VW:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Kuehlbedarf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Kuehlbedarf_To_AC_bCoDemCab_VW_AC_tAirEvpSet_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Leistungspriorisierung_To_AC_stPwrsPrio_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Leistungspriorisierung_To_AC_stPwrsPrio_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Leistungspriorisierung_To_AC_stPwrsPrio_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Leistungspriorisierung_To_AC_stPwrsPrio_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Leistungspriorisierung ComWrapper_CAN_Rx_Signals_Get_KL_Leistungspriorisierung
		if(ComWrapper_INT76 == 2000){  ComWrapper_INT76 = physValReq;  *data =100;  ComWrapper_INT77 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_AC_AC_stPwrsPrio_VW Rte_Write_SWC_Com_AC_AC_stPwrsPrio_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT76:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT77:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT76:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT77:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stPwrsPrio_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Leistungspriorisierung_To_AC_stPwrsPrio_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Leistungspriorisierung
  SWC_Com.c.SWC_Com_RxProcessing_KL_Leistungspriorisierung_To_AC_stPwrsPrio_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW:

-- Test Case: SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_NV_Energie_Anf ComWrapper_CAN_Rx_Signals_Get_KL_NV_Energie_Anf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_NV_Energie_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)860, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_wPreCdnCabLv_VW Rte_Write_SWC_Com_AC_AC_wPreCdnCabLv_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_NV_Energie_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)860, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:860
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_NV_Energie_Anf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_NV_Energie_Anf ComWrapper_CAN_Rx_Signals_Get_KL_NV_Energie_Anf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  --------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_NV_Energie_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)860, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_wPreCdnCabLv_VW Rte_Write_SWC_Com_AC_AC_wPreCdnCabLv_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_NV_Energie_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)860, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:860
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_wPreCdnCabLv_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_NV_Energie_Anf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_NV_Energie_Anf_To_AC_wPreCdnCabLv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW:

-- Test Case: SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_QBit_Sonnenintensitaet ComWrapper_CAN_Rx_Signals_Get_KL_QBit_Sonnenintensitaet
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				
	if (comWrapperReturnValue == RTE_E_OK)
				#define Rte_Write_AC_AC_bPlausSunSens_VW Rte_Write_SWC_Com_AC_AC_bPlausSunSens_VW
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_bPlausSunSens_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_QBit_Sonnenintensitaet
  SWC_Com.c.SWC_Com_RxProcessing_KL_QBit_Sonnenintensitaet_To_AC_bPlausSunSens_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if (signalVal <= 4)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg1_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg1_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:861
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ---------> TRUE
		if (signalVal <= 4)  ---------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg1_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg1_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:861
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stConfDrvProg1_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ---------> TRUE
		if (signalVal <= 4)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg1_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg1_VW
				}
		else   ---------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)861, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:861
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_1
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_1_To_AC_stConfDrvProg1_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if (signalVal <= 4)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg2_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg2_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ---------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:862
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ---------------> TRUE
		if (signalVal <= 4) ---------------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg2_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg2_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:862
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stConfDrvProg2_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ---------------> TRUE
		if (signalVal <= 4)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg2_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg2_VW
				}
		else ---------------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)862, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:862
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_2_To_AC_stConfDrvProg2_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if (signalVal <= 4)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg3_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg3_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:863
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ------> TRUE
		if (signalVal <= 4)  ------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg3_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg3_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:863
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stConfDrvProg3_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3 ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ------> TRUE
		if (signalVal <= 4)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_stConfDrvProg3_VW Rte_Write_SWC_Com_AC_AC_stConfDrvProg3_VW
				}
		else  ------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sollklimamodus_FPR_3_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)863, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:863
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sollklimamodus_FPR_3
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sollklimamodus_FPR_3_To_AC_stConfDrvProg3_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sonnenintensitaet ComWrapper_CAN_Rx_Signals_Get_KL_Sonnenintensitaet
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 16;}
				
	if (comWrapperReturnValue == RTE_E_OK)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sonnenintensitaet_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)864, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_intenSun_VW Rte_Write_SWC_Com_AC_AC_intenSun_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sonnenintensitaet_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)864, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:864
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sonnenintensitaet
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Sonnenintensitaet ComWrapper_CAN_Rx_Signals_Get_KL_Sonnenintensitaet
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 16;}
				
	if (comWrapperReturnValue == RTE_E_OK)   ------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sonnenintensitaet_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)864, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_intenSun_VW Rte_Write_SWC_Com_AC_AC_intenSun_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Sonnenintensitaet_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)864, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else


TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:864
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_intenSun_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Sonnenintensitaet
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Sonnenintensitaet_To_AC_intenSun_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_StartStopp_Info_To_AC_stCmbEngStrtStopInfo_VW:

-- Test Case: SWC_Com_RxProcessing_KL_StartStopp_Info_To_AC_stCmbEngStrtStopInfo_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_StartStopp_Info_To_AC_stCmbEngStrtStopInfo_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_StartStopp_Info_To_AC_stCmbEngStrtStopInfo_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_StartStopp_Info ComWrapper_CAN_Rx_Signals_Get_KL_StartStopp_Info
		if(ComWrapper_INT74 == 2000){  ComWrapper_INT74 = physValReq;  *data =100;  ComWrapper_INT75 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_AC_AC_stCmbEngStrtStopInfo_VW Rte_Write_SWC_Com_AC_AC_stCmbEngStrtStopInfo_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT74:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT75:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT74:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT75:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stCmbEngStrtStopInfo_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_StartStopp_Info_To_AC_stCmbEngStrtStopInfo_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_StartStopp_Info
  SWC_Com.c.SWC_Com_RxProcessing_KL_StartStopp_Info_To_AC_stCmbEngStrtStopInfo_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hl_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)866, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tPredCabSetReLeDrvProg_VW Rte_Write_SWC_Com_AC_AC_tPredCabSetReLeDrvProg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hl_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)866, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:866
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hl_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)866, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tPredCabSetReLeDrvProg_VW Rte_Write_SWC_Com_AC_AC_tPredCabSetReLeDrvProg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hl_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)866, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:866
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tPredCabSetReLeDrvProg_VW:165
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_Prognose_To_AC_tPredCabSetReLeDrvProg_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl
		if(ComWrapper_INT45 == 2000){  ComWrapper_INT45 = physValReq;  *data =100;  ComWrapper_INT46 = *data;  return 0;}
		else if(ComWrapper_INT45 == 2001){  ComWrapper_INT45 = physValReq;  *data =100;  ComWrapper_INT46 = *data;  return 8;}

	if ( (RTE_E_OK == comWrapperReturnValue) ||
		( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hl_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)865, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_AC_AC_tCabSetReLe_VW Rte_Write_SWC_Com_AC_AC_tCabSetReLe_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ) ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hl_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)865, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT45:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT46:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:865
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT45:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT46:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl
		if(ComWrapper_INT45 == 2000){  ComWrapper_INT45 = physValReq;  *data =100;  ComWrapper_INT46 = *data;  return 0;}
		else if(ComWrapper_INT45 == 2001){  ComWrapper_INT45 = physValReq;  *data =100;  ComWrapper_INT46 = *data;  return 8;}

	if ( (RTE_E_OK == comWrapperReturnValue) ||
		( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hl_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)865, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_AC_AC_tCabSetReLe_VW Rte_Write_SWC_Com_AC_AC_tCabSetReLe_VW

	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
			   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hl_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)865, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT45:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:865
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT45:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tCabSetReLe_VW:655
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hl_To_AC_tCabSetReLe_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hr_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)868, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tPredCabSetReRiDrvProg_VW Rte_Write_SWC_Com_AC_AC_tPredCabSetReRiDrvProg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )     -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hr_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)868, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:868
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hr_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)868, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tPredCabSetReRiDrvProg_VW Rte_Write_SWC_Com_AC_AC_tPredCabSetReRiDrvProg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hr_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)868, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:868
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tPredCabSetReRiDrvProg_VW:655
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_Prognose_To_AC_tPredCabSetReRiDrvProg_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr
				if(ComWrapper_INT47 == 2000){  ComWrapper_INT47 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT47 == 2001){  ComWrapper_INT47 = physValReq;  *data =100; return 8;}
				
	if ( (RTE_E_OK == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hr_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)867, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_SWC_Com_AC_AC_tCabSetReRi_VW Rte_Write_SWC_Com_AC_AC_tCabSetReRi_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hr_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)867, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT47:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:867
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT47:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr
				if(ComWrapper_INT47 == 2000){  ComWrapper_INT47 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT47 == 2001){  ComWrapper_INT47 = physValReq;  *data =100; return 8;}
				
	if ( (RTE_E_OK == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hr_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)867, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_SWC_Com_AC_AC_tCabSetReRi_VW Rte_Write_SWC_Com_AC_AC_tCabSetReRi_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_hr_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)867, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT47:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:867
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT47:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tCabSetReRi_VW:655
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_hr_To_AC_tCabSetReRi_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vl_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)870, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tPredCabSetFrntLeDrvProg_VW Rte_Write_SWC_Com_AC_AC_tPredCabSetFrntLeDrvProg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vl_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)870, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:870
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vl_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)870, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tPredCabSetFrntLeDrvProg_VW Rte_Write_SWC_Com_AC_AC_tPredCabSetFrntLeDrvProg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vl_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)870, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:870
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tPredCabSetFrntLeDrvProg_VW:655
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_Prognose_To_AC_tPredCabSetFrntLeDrvProg_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl
				if(ComWrapper_INT126 == 2000){  ComWrapper_INT126 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT126 == 2001){  ComWrapper_INT126 = physValReq;  *data =100; return 8;}
				
	if ( (RTE_E_OK == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vl_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)869, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_SWC_Com_AC_AC_tCabSetFrntLe_VW Rte_Write_SWC_Com_AC_AC_tCabSetFrntLe_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )  ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vl_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)869, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT126:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:869
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT126:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl
				if(ComWrapper_INT126 == 2000){  ComWrapper_INT126 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT126 == 2001){  ComWrapper_INT126 = physValReq;  *data =100; return 8;}
				
	if ( (RTE_E_OK == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vl_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)869, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_SWC_Com_AC_AC_tCabSetFrntLe_VW Rte_Write_SWC_Com_AC_AC_tCabSetFrntLe_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vl_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)869, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT126:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:869
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT126:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tCabSetFrntLe_VW:655
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vl
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vl_To_AC_tCabSetFrntLe_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vr_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)872, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tPredCabSetFrntRiDrvProg_VW Rte_Write_SWC_Com_AC_AC_tPredCabSetFrntRiDrvProg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vr_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)872, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:872
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr_Prognose ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr_Prognose
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vr_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)872, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_tPredCabSetFrntRiDrvProg_VW Rte_Write_SWC_Com_AC_AC_tPredCabSetFrntRiDrvProg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vr_Prognose_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)872, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:872
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tPredCabSetFrntRiDrvProg_VW:655
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr_Prognose
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_Prognose_To_AC_tPredCabSetFrntRiDrvProg_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW.001
TEST.NOTES:
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr
				if(ComWrapper_INT125 == 2000){  ComWrapper_INT125 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT125 == 2001){  ComWrapper_INT125 = physValReq;  *data =100; return 8;}
				
	if ( (RTE_E_OK == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vr_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)871, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_SWC_Com_AC_AC_tCabSetFrntRi_VW Rte_Write_SWC_Com_AC_AC_tCabSetFrntRi_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ) ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vr_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)871, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT125:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:871
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT125:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW.002
TEST.NOTES:
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr
				if(ComWrapper_INT125 == 2000){  ComWrapper_INT125 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT125 == 2001){  ComWrapper_INT125 = physValReq;  *data =100; return 8;}
				
	if ( (RTE_E_OK == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vr_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)871, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_SWC_Com_AC_AC_tCabSetFrntRi_VW Rte_Write_SWC_Com_AC_AC_tCabSetFrntRi_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_Soll_vr_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)871, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT125:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:871
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT125:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tCabSetFrntRi_VW:655
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_vr
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_Soll_vr_To_AC_tCabSetFrntRi_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_vor_Verdampfer ComWrapper_CAN_Rx_Signals_Get_KL_Temp_vor_Verdampfer
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ( RTE_E_OK == comWrapperReturnValue )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_vor_Verdampfer_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)873, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_tAirEvpIn_VW Rte_Write_SWC_Com_AC_AC_tAirEvpIn_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )    ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_vor_Verdampfer_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)873, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:873
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_vor_Verdampfer
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_vor_Verdampfer ComWrapper_CAN_Rx_Signals_Get_KL_Temp_vor_Verdampfer
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ( RTE_E_OK == comWrapperReturnValue )   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_vor_Verdampfer_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)873, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_tAirEvpIn_VW Rte_Write_SWC_Com_AC_AC_tAirEvpIn_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Temp_vor_Verdampfer_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)873, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:873
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tAirEvpIn_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_vor_Verdampfer
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Temp_vor_Verdampfer_To_AC_tAirEvpIn_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_Fond ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_Fond
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_Fond_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)874, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_rThmFlapRe_VW Rte_Write_SWC_Com_AC_AC_rThmFlapRe_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_Fond_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)874, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:874
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_Fond
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_Fond ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_Fond
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ---------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_Fond_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)874, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_rThmFlapRe_VW Rte_Write_SWC_Com_AC_AC_rThmFlapRe_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_Fond_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)874, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:874
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_rThmFlapRe_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_Fond
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_Fond_To_AC_rThmFlapRe_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_li ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_li
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_li_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)875, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_rThmFlapLe_VW Rte_Write_SWC_Com_AC_AC_rThmFlapLe_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_li_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)875, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:875
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_li
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_li ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_li
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   ------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_li_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)875, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_rThmFlapLe_VW Rte_Write_SWC_Com_AC_AC_rThmFlapLe_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_li_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)875, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:875
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_rThmFlapLe_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_li
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_li_To_AC_rThmFlapLe_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_re ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_re
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_re_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)876, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_rThmFlapRi_VW Rte_Write_SWC_Com_AC_AC_rThmFlapRi_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_re_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)876, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:876
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_re
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_re ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_re
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_re_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)876, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_AC_AC_rThmFlapRi_VW Rte_Write_SWC_Com_AC_AC_rThmFlapRi_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Tempklappe_re_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)876, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:876
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_rThmFlapRi_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Tempklappe_re
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Tempklappe_re_To_AC_rThmFlapRi_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf
					if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
					else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
					else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
					
	if (RTE_E_OK == comWrapperReturnValue)
		if((5u) != SWC_Com_CanSig_KL_Thermischer_Bedarf)
					{
					#define Rte_Write_AC_AC_stThmCab_VW Rte_Write_SWC_Com_AC_AC_stThmCab_VW
					#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
					if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
					}
		else
					{
					#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
					if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
					}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
					( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue))  ------> TRUE
					#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
					if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
					
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:877
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ------> TRUE
		if((5u) != SWC_Com_CanSig_KL_Thermischer_Bedarf)
				{
				#define Rte_Write_AC_AC_stThmCab_VW Rte_Write_SWC_Com_AC_AC_stThmCab_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else  ------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue))
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:877
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ------> TRUE
		if((5u) != SWC_Com_CanSig_KL_Thermischer_Bedarf)  ------> TRUE
				{
				#define Rte_Write_AC_AC_stThmCab_VW Rte_Write_SWC_Com_AC_AC_stThmCab_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue))
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Thermischer_Bedarf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)877, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:877
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stThmCab_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Thermischer_Bedarf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Thermischer_Bedarf_To_AC_stThmCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if (signalVal <= 0x0Au)
				{
				#define Rte_Write_AC_AC_stAirCirctFlap_VW Rte_Write_SWC_Com_AC_AC_stAirCirctFlap_VW
				}
		else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stAirCirctFlap_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stAirCirctFlap_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status
		if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
		else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

	if(CxA_Umluft >= SWC_Com_CanSig_KL_Umluftklappe_Status)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_AC_AC_stRclAirFlap_VW Rte_Write_SWC_Com_AC_AC_stRclAirFlap_VW

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
      (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue))  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:878
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status
		if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
		else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

	if(CxA_Umluft >= SWC_Com_CanSig_KL_Umluftklappe_Status)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_AC_AC_stRclAirFlap_VW Rte_Write_SWC_Com_AC_AC_stRclAirFlap_VW

	else    --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
      (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue)) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:878
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status
		if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
		else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

	if(CxA_Umluft >= SWC_Com_CanSig_KL_Umluftklappe_Status)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_AC_AC_stRclAirFlap_VW Rte_Write_SWC_Com_AC_AC_stRclAirFlap_VW

	else    --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if((RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) ||
      (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue)) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Umluftklappe_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)878, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:878
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stRclAirFlap_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Umluftklappe_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Umluftklappe_Status_To_AC_stRclAirFlap_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW:

-- Test Case: SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_VK_Anf ComWrapper_CAN_Rx_Signals_Get_KL_VK_Anf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_VK_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)879, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_stTrigOnOffPreCdnCab_VW Rte_Write_SWC_Com_AC_AC_stTrigOnOffPreCdnCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue)) ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_VK_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)879, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:879
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_VK_Anf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_VK_Anf ComWrapper_CAN_Rx_Signals_Get_KL_VK_Anf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_VK_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)879, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_stTrigOnOffPreCdnCab_VW Rte_Write_SWC_Com_AC_AC_stTrigOnOffPreCdnCab_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue))
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_VK_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)879, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:879
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stTrigOnOffPreCdnCab_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_VK_Anf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_VK_Anf_To_AC_stTrigOnOffPreCdnCab_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung_Faktor ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung_Faktor
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 16;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Write_AC_AC_stPwrmEvp_VW Rte_Write_SWC_Com_AC_AC_stPwrmEvp_VW
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stPwrmEvp_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung_Faktor
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampferleistung_Faktor_To_AC_stPwrmEvp_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampferleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)880, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_pwrEvp_VW Rte_Write_SWC_Com_AC_AC_pwrEvp_VW
				}
	else if (( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue )) ----------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampferleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)880, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
				{
				/* Do nothing */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:880
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ----------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampferleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)880, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_pwrEvp_VW Rte_Write_SWC_Com_AC_AC_pwrEvp_VW
				}
	else if (( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ))
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampferleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)880, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
				{
				/* Do nothing */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:880
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_pwrEvp_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Verdampferleistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampferleistung_To_AC_pwrEvp_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur
		if(ComWrapper_INT59 == 2000){  ComWrapper_INT59 = physValReq;  *data =100;  ComWrapper_INT60 = *data;  return 0;}
		else if(ComWrapper_INT59 == 2001){  ComWrapper_INT59 = physValReq;  *data =1;  ComWrapper_INT60 = *data;  return 8;}
		else if(ComWrapper_INT59 == 2002){  ComWrapper_INT59 = physValReq;  *data =1022;  ComWrapper_INT60 = *data;  return 32;}
		else if(ComWrapper_INT59 == 2002){  ComWrapper_INT59 = physValReq;  *data =100;  ComWrapper_INT60 = *data;  return 32;}

if ( comWrapperReturnValue == RTE_E_OK )  ---> TRUE

		#define Rte_Call_DatasetVector_ComFilterData_Get_tiFil_tAir_C_VW DatasetVector_ComFilterData_Get_tiFil_tAir_C_VW
		if(DATASET_RTEIF_INT3 == 2000){DATASET_RTEIF_INT3 = *Value;}

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		if( SWC_Com_FilterStateIdle == SWC_Com_AppSig_AC_tAirEvpOut_VW_FilterState )   ---> TRUE

				#define Rte_Call_LowPassFilter_Filter_U16 LowPassFilter_Filter_U16
				if(SoftwareFilter_INT1 == 2000){  SoftwareFilter_INT1 = *SignalMemory;  SoftwareFilter_INT2 =InputSignal;  SoftwareFilter_INT3 = ParamT; *Result = 1000; SoftwareFilter_INT4 =*Result; return 0;}

				#define Rte_Write_SWC_Com_AC_AC_tAirEvpOut_VW Rte_Write_SWC_Com_AC_AC_tAirEvpOut_VW

else if( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ))

		if( 1022 <= SWC_Com_CanSig_KL_Verdampfertemperatur_Unfiltered )

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeSensor_tiFil_tAir_C_VW:123
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_AC_tAirEvpOut_VW_FilterState:SWC_Com_FilterStateIdle
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:881
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.DATASET_RTEIF_INT3:123
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT1:6553600
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT2:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT3:246
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.SoftwareFilter_INT4:1000
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_AC_tAirEvpOut_VW_FilterState:SWC_Com_FilterStateRunning
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_AppSig_AC_tAirEvpOut_VW_InternalMemory:6553600
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_tAirEvpOut_VW:800
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur
  DatasetVector_RteIf.c.DatasetVector_ComFilterData_Get_tiFil_tAir_C_VW
  Xlock.c.Xlock_SetEventStatus
  SoftwareFilter.c.SoftwareFilter_LowPassFilter_Filter_U16
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur
		if(ComWrapper_INT59 == 2000){  ComWrapper_INT59 = physValReq;  *data =100;  ComWrapper_INT60 = *data;  return 0;}
		else if(ComWrapper_INT59 == 2001){  ComWrapper_INT59 = physValReq;  *data =1;  ComWrapper_INT60 = *data;  return 8;}
		else if(ComWrapper_INT59 == 2002){  ComWrapper_INT59 = physValReq;  *data =1022;  ComWrapper_INT60 = *data;  return 32;}
		else if(ComWrapper_INT59 == 2002){  ComWrapper_INT59 = physValReq;  *data =100;  ComWrapper_INT60 = *data;  return 32;}

if ( comWrapperReturnValue == RTE_E_OK )


else if( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) )   ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ))

		if( 1022 <= SWC_Com_CanSig_KL_Verdampfertemperatur_Unfiltered )

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:2001
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:881
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW.003
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur
		if(ComWrapper_INT59 == 2000){  ComWrapper_INT59 = physValReq;  *data =100;  ComWrapper_INT60 = *data;  return 0;}
		else if(ComWrapper_INT59 == 2001){  ComWrapper_INT59 = physValReq;  *data =1;  ComWrapper_INT60 = *data;  return 8;}
		else if(ComWrapper_INT59 == 2002){  ComWrapper_INT59 = physValReq;  *data =1022;  ComWrapper_INT60 = *data;  return 32;}
		else if(ComWrapper_INT59 == 2002){  ComWrapper_INT59 = physValReq;  *data =100;  ComWrapper_INT60 = *data;  return 32;}

if ( comWrapperReturnValue == RTE_E_OK )


else if( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ))	---> TRUE

		if( 1022 <= SWC_Com_CanSig_KL_Verdampfertemperatur_Unfiltered )   ---> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:2002
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:881
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:1022
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW.004
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW.004
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur
		if(ComWrapper_INT59 == 2000){  ComWrapper_INT59 = physValReq;  *data =100;  ComWrapper_INT60 = *data;  return 0;}
		else if(ComWrapper_INT59 == 2001){  ComWrapper_INT59 = physValReq;  *data =1;  ComWrapper_INT60 = *data;  return 8;}
		else if(ComWrapper_INT59 == 2002){  ComWrapper_INT59 = physValReq;  *data =1022;  ComWrapper_INT60 = *data;  return 32;}
		else if(ComWrapper_INT59 == 2002){  ComWrapper_INT59 = physValReq;  *data =100;  ComWrapper_INT60 = *data;  return 32;}

if ( comWrapperReturnValue == RTE_E_OK )


else if( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue ) ||
		   (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE  == comWrapperReturnValue ) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ))	---> TRUE

		if( 1022 <= SWC_Com_CanSig_KL_Verdampfertemperatur_Unfiltered ) 

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else   ---> TRUE

				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Verdampfertemperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)881, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:2003
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:2003
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:881
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Verdampfertemperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Verdampfertemperatur_To_AC_tAirEvpOut_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW:

-- Test Case: SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Vorkond_Strategie ComWrapper_CAN_Rx_Signals_Get_KL_Vorkond_Strategie
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Vorkond_Strategie_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)882, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_stStgyPreCabCdn_VW Rte_Write_SWC_Com_AC_AC_stStgyPreCabCdn_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Vorkond_Strategie_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)882, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:882
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Vorkond_Strategie
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Vorkond_Strategie ComWrapper_CAN_Rx_Signals_Get_KL_Vorkond_Strategie
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Vorkond_Strategie_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)882, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_AC_AC_stStgyPreCabCdn_VW Rte_Write_SWC_Com_AC_AC_stStgyPreCabCdn_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_KL_Vorkond_Strategie_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)882, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:882
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stStgyPreCabCdn_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Vorkond_Strategie
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_KL_Vorkond_Strategie_To_AC_stStgyPreCabCdn_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW:

-- Test Case: SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW
			#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_ErwVK_Anf ComWrapper_CAN_Rx_Signals_Get_KL_ErwVK_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
			else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
			else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
			
	 if (RTE_E_OK == comWrapperReturnValue)
			#define Rte_Write_AC_AC_bPreCdnCabLvAcv_VW Rte_Write_SWC_Com_AC_AC_bPreCdnCabLvAcv_VW
			
	 else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_bPreCdnCabLvAcv_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_ErwVK_Anf
  SWC_Com.c.SWC_Com_RxProcessing_KL_erwVk_Anf_To_AC_bPreCdnCabLvAcv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW:

-- Test Case: SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW

			#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_Abregelung_Temperatur ComWrapper_CAN_Rx_Signals_Get_LAD_Abregelung_Temperatur
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
			else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
			
	if (RTE_E_OK == comWrapperReturnValue)
			
			#define Rte_Write_HvOBCh_HvOBCh_bPrfRed_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_bPrfRed_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvOBCh_HvOBCh_bPrfRed_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_Abregelung_Temperatur
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Abregelung_Temperatur_To_HvOBCh_bPrfRed_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW:

-- Test Case: SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0x06;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ( RTE_E_OK == comWrapperReturnValue )
				
		if (SWC_Com_CanSig_LAD_Istmodus == 0x06u) /* undefined value according to DBC */
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
		else
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvOBCh_HvOBCh_stModAct_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_stModAct_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:883
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0x06;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ( RTE_E_OK == comWrapperReturnValue )
				
				if (SWC_Com_CanSig_LAD_Istmodus == 0x06u) /* undefined value according to DBC */
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
		else
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvOBCh_HvOBCh_stModAct_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_stModAct_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:883
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0x06;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if ( RTE_E_OK == comWrapperReturnValue )
				
		if (SWC_Com_CanSig_LAD_Istmodus == 0x06u) /* undefined value according to DBC */
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
		else
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvOBCh_HvOBCh_stModAct_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_stModAct_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Istmodus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)883, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:883
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvOBCh_HvOBCh_stModAct_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_IstModus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_IstModus_To_HvOBCh_stModAct_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW:

-- Test Case: SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Verlustleistung ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Verlustleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_PlanAntw_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)884, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvOBCh_HvOBCh_pwrLosLdPlanResp_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_pwrLosLdPlanResp_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_PlanAntw_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)884, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:884
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Verlustleistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Verlustleistung ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Verlustleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_PlanAntw_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)884, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvOBCh_HvOBCh_pwrLosLdPlanResp_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_pwrLosLdPlanResp_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_PlanAntw_Verlustleistung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)884, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:884
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvOBCh_HvOBCh_pwrLosLdPlanResp_VW:500
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Verlustleistung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Verlustleistung_To_HvOBCh_pwrLosLdPlanResp_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW:

-- Test Case: SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Zaehler ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Zaehler
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_PlanAntw_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)885, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvOBCh_HvOBCh_ctLdPlanResp_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_ctLdPlanResp_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_PlanAntw_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)885, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:885
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Zaehler
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Zaehler ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Zaehler
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_PlanAntw_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)885, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_HvOBCh_HvOBCh_ctLdPlanResp_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_ctLdPlanResp_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_PlanAntw_Zaehler_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)885, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:885
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvOBCh_HvOBCh_ctLdPlanResp_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_PlanAntw_Zaehler
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_PlanAntw_Zaehler_To_HvOBCh_ctLdPlanResp_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW:

-- Test Case: SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_Temperatur ComWrapper_CAN_Rx_Signals_Get_LAD_Temperatur
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)886, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvOBCh_HvOBCh_t_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_t_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )   ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)886, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:886
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_Temperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_LAD_Temperatur ComWrapper_CAN_Rx_Signals_Get_LAD_Temperatur
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)     ---> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)886, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvOBCh_HvOBCh_t_VW Rte_Write_SWC_Com_HvOBCh_HvOBCh_t_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_LAD_Temperatur_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)886, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:886
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvOBCh_HvOBCh_t_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_LAD_Temperatur
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_LAD_Temperatur_To_HvOBCh_t_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_LAD_Verlustleistung_To_HvOBCh_pwrLosAct_VW:

-- Test Case: SWC_Com_RxProcessing_LAD_Verlustleistung_To_HvOBCh_pwrLosAct_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_LAD_Verlustleistung_To_HvOBCh_pwrLosAct_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_LAD_Verlustleistung_To_HvOBCh_pwrLosAct_VW.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit_Status ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Write_SWC_Com_Eng_Eng_stSig_tiIdl_VW Rte_Write_SWC_Com_Eng_Eng_stSig_tiIdl_VW
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_stSig_tiIdl_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit_Status
  SWC_Com.c.SWC_Com_RxProcessing_MO_Abstellzeit_Status_To_Eng_Eng_stSig_tiIdl_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Abstellzeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)888, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Eng_Eng_tiIdl_VW Rte_Write_SWC_Com_Eng_Eng_tiIdl_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) -------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Abstellzeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)888, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:888
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =5;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ------------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Abstellzeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)888, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_SWC_Com_Eng_Eng_tiIdl_VW Rte_Write_SWC_Com_Eng_Eng_tiIdl_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Abstellzeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)888, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:888
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_tiIdl_VW:800
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Abstellzeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Abstellzeit_To_Eng_Eng_tiIdl_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Anf_KJS_1 ComWrapper_CAN_Rx_Signals_Get_MO_Anf_KJS_1
		if(ComWrapper_INT108 == 2000){  ComWrapper_INT108 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT108 == 2001){  ComWrapper_INT108 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Anf_KJS_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)889, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_RadBli_RadBli_rActrCan_VW Rte_Write_SWC_Com_RadBli_RadBli_rActrCan_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Anf_KJS_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)889, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT108:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:889
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT108:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Anf_KJS_1
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Anf_KJS_1 ComWrapper_CAN_Rx_Signals_Get_MO_Anf_KJS_1
		if(ComWrapper_INT108 == 2000){  ComWrapper_INT108 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT108 == 2001){  ComWrapper_INT108 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Anf_KJS_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)889, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_RadBli_RadBli_rActrCan_VW Rte_Write_SWC_Com_RadBli_RadBli_rActrCan_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Anf_KJS_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)889, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT108:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:889
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT108:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_SWC_Com_RadBli_RadBli_rActrCan_VW:200
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Anf_KJS_1
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Anf_KJS_1_To_RadBli_rActrCan_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Charisma_FahrPr ComWrapper_CAN_Rx_Signals_Get_MO_Charisma_FahrPr
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Write_Eng_Eng_noDrvModActCharUsr_VW Rte_Write_SWC_Com_Eng_Eng_noDrvModActCharUsr_VW
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_noDrvModActCharUsr_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Charisma_FahrPr
  SWC_Com.c.SWC_Com_RxProcessing_MO_Charisma_FahrPr_To_Eng_noDrvModActCharUsr_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Code ComWrapper_CAN_Rx_Signals_Get_MO_Code
		if(ComWrapper_INT113 == 2000){  ComWrapper_INT113 = physValReq;  *data =100;   return 0;}

	if ( RTE_E_OK == comWrapperReturnValue )

		#define Rte_Write_SWC_Com_Eng_Eng_noCodCmbEng_VW Rte_Write_SWC_Com_Eng_Eng_noCodCmbEng_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT113:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT113:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_noCodCmbEng_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Code
  SWC_Com.c.SWC_Com_RxProcessing_MO_Code_To_Eng_noCodCmbEng_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM
		if(ComWrapper_INT5 == 2000){  ComWrapper_INT5 = physValReq;  *data =100;  ComWrapper_INT6 = *data;  return 0;}
		else if(ComWrapper_INT5 == 2001){  ComWrapper_INT5 = physValReq;  *data =1500;  ComWrapper_INT6 = *data;  return 0;}
		else if(ComWrapper_INT5 == 2002){  ComWrapper_INT5 = physValReq;  *data =1500;  ComWrapper_INT6 = *data;  return 32;}

if(RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Drehzahl_VM_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)890, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Eng_Eng_n_VW Rte_Write_SWC_Com_Eng_Eng_n_VW

		
else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Drehzahl_VM_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)890, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT5:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT6:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:890
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT5:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT6:1500
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM
		if(ComWrapper_INT5 == 2000){  ComWrapper_INT5 = physValReq;  *data =100;  ComWrapper_INT6 = *data;  return 0;}
		else if(ComWrapper_INT5 == 2001){  ComWrapper_INT5 = physValReq;  *data =1500;  ComWrapper_INT6 = *data;  return 0;}
		else if(ComWrapper_INT5 == 2002){  ComWrapper_INT5 = physValReq;  *data =1500;  ComWrapper_INT6 = *data;  return 32;}

if(RTE_E_OK == comWrapperReturnValue)   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Drehzahl_VM_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)890, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Eng_Eng_n_VW Rte_Write_SWC_Com_Eng_Eng_n_VW

		
else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Drehzahl_VM_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)890, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT5:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT6:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:890
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT5:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT6:1500
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_n_VW:9
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Drehzahl_VM
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Drehzahl_VM_To_Eng_n_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Ext_E_Fahrt_aktiv_To_CoVOM_bElModAcv_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Ext_E_Fahrt_aktiv_To_CoVOM_bElModAcv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Ext_E_Fahrt_aktiv_To_CoVOM_bElModAcv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Ext_E_Fahrt_aktiv_To_CoVOM_bElModAcv_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Ext_E_Fahrt_aktiv ComWrapper_CAN_Rx_Signals_Get_MO_Ext_E_Fahrt_aktiv
		if(ComWrapper_INT66 == 2000){  ComWrapper_INT66 = physValReq;  *data =100;  ComWrapper_INT67 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_SWC_Com_CoVOM_CoVOM_bElModAcv_VW Rte_Write_SWC_Com_CoVOM_CoVOM_bElModAcv_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT66:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT67:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT66:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT67:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_CoVOM_CoVOM_bElModAcv_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Ext_E_Fahrt_aktiv_To_CoVOM_bElModAcv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Ext_E_Fahrt_aktiv
  SWC_Com.c.SWC_Com_RxProcessing_MO_Ext_E_Fahrt_aktiv_To_CoVOM_bElModAcv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code
		if(ComWrapper_INT110 == 2000){  ComWrapper_INT110 = physValReq;  *data =14;   return 0;}
		else if(ComWrapper_INT110 == 2001){  ComWrapper_INT110 = physValReq;  *data =10; return 0;}
		else if(ComWrapper_INT110 == 2002){  ComWrapper_INT110 = physValReq;  *data =100; return 8;}
		else if(ComWrapper_INT110 == 2003){  ComWrapper_INT110 = physValReq;  *data =100; return 16;}

if(RTE_E_OK == comWrapperReturnValue)

	if( (   14u == SWC_Com_CanSig_MO_Getriebe_Code ) ||
    ( ( 26u < SWC_Com_CanSig_MO_Getriebe_Code  ) && (31u > SWC_Com_CanSig_MO_Getriebe_Code ) ) ||
    (   33u < SWC_Com_CanSig_MO_Getriebe_Code  ) ||
    (    2u > SWC_Com_CanSig_MO_Getriebe_Code) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Write_Eng_Eng_noCodGearBx_VW Rte_Write_SWC_Com_Eng_Eng_noCodGearBx_VW

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ) ) --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT110:2003
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:891
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT110:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code
		if(ComWrapper_INT110 == 2000){  ComWrapper_INT110 = physValReq;  *data =14;   return 0;}
		else if(ComWrapper_INT110 == 2001){  ComWrapper_INT110 = physValReq;  *data =10; return 0;}
		else if(ComWrapper_INT110 == 2002){  ComWrapper_INT110 = physValReq;  *data =100; return 8;}

if(RTE_E_OK == comWrapperReturnValue)  --> TRUE

	if( (   14u == SWC_Com_CanSig_MO_Getriebe_Code ) ||
    ( ( 26u < SWC_Com_CanSig_MO_Getriebe_Code  ) && (31u > SWC_Com_CanSig_MO_Getriebe_Code ) ) ||
    (   33u < SWC_Com_CanSig_MO_Getriebe_Code  ) ||
    (    2u > SWC_Com_CanSig_MO_Getriebe_Code) )   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Write_Eng_Eng_noCodGearBx_VW Rte_Write_SWC_Com_Eng_Eng_noCodGearBx_VW

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT110:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:891
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT110:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code
		if(ComWrapper_INT110 == 2000){  ComWrapper_INT110 = physValReq;  *data =14;   return 0;}
		else if(ComWrapper_INT110 == 2001){  ComWrapper_INT110 = physValReq;  *data =10; return 0;}
		else if(ComWrapper_INT110 == 2002){  ComWrapper_INT110 = physValReq;  *data =100; return 8;}

if(RTE_E_OK == comWrapperReturnValue)  --> TRUE

	if( (   14u == SWC_Com_CanSig_MO_Getriebe_Code ) ||
    ( ( 26u < SWC_Com_CanSig_MO_Getriebe_Code  ) && (31u > SWC_Com_CanSig_MO_Getriebe_Code ) ) ||
    (   33u < SWC_Com_CanSig_MO_Getriebe_Code  ) ||
    (    2u > SWC_Com_CanSig_MO_Getriebe_Code) )  

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else  --> TRUE

		#define Rte_Write_Eng_Eng_noCodGearBx_VW Rte_Write_SWC_Com_Eng_Eng_noCodGearBx_VW

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Getriebe_Code_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)891, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT110:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:891
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT110:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_noCodGearBx_VW:10
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Getriebe_Code
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Getriebe_Code_To_Eng_noCodGearBx_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW:

-- Test Case: SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand
		if(ComWrapper_INT87 == 2000){  ComWrapper_INT87 = physValReq;  *data =100;    return 0;}
		else if(ComWrapper_INT87 == 2001){  ComWrapper_INT87 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT87 == 2002){  ComWrapper_INT87 = physValReq;  *data =100;  return 16;}

if (RTE_E_OK == comWrapperReturnValue)

	if( 3u < SWC_Com_CanSig_MO_HVK_AntriebZustand )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvCord_HvCord_stEngMod_VW Rte_Write_SWC_Com_HvCord_HvCord_stEngMod_VW

		
else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
       (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue))  ---> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT87:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:892
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT87:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand
		if(ComWrapper_INT87 == 2000){  ComWrapper_INT87 = physValReq;  *data =100;    return 0;}
		else if(ComWrapper_INT87 == 2001){  ComWrapper_INT87 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT87 == 2002){  ComWrapper_INT87 = physValReq;  *data =100;  return 16;}

if (RTE_E_OK == comWrapperReturnValue)  ---> TRUE

	if( 3u < SWC_Com_CanSig_MO_HVK_AntriebZustand )  ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvCord_HvCord_stEngMod_VW Rte_Write_SWC_Com_HvCord_HvCord_stEngMod_VW

		
else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
       (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT87:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:892
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT87:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand
		if(ComWrapper_INT87 == 2000){  ComWrapper_INT87 = physValReq;  *data =100;    return 0;}
		else if(ComWrapper_INT87 == 2001){  ComWrapper_INT87 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT87 == 2002){  ComWrapper_INT87 = physValReq;  *data =100;  return 16;}

if (RTE_E_OK == comWrapperReturnValue)  ---> TRUE

	if( 3u < SWC_Com_CanSig_MO_HVK_AntriebZustand ) 

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else   ---> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_HvCord_HvCord_stEngMod_VW Rte_Write_SWC_Com_HvCord_HvCord_stEngMod_VW

		
else if ((RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) ||
       (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)) 
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HVK_AntriebZustand_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)892, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT87:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:892
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT87:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvCord_HvCord_stEngMod_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HVK_AntriebZustand
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_HVK_AntriebZustand_To_HvCord_stEngMod_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW:

-- Test Case: SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW
			#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit_Status ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
			else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =0;   return 0;}
			else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
			
	if (RTE_E_OK == comWrapperReturnValue)
			
			#define Rte_Write_HvCord_HvCord_stSig_tiIdlHv_VW Rte_Write_SWC_Com_HvCord_HvCord_stSig_tiIdlHv_VW
			
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvCord_HvCord_stSig_tiIdlHv_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit_Status
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_Status_To_HvCord_stSig_tiIdlHv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW:

-- Test Case: SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 16;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvCord_HvCord_tiIdlHv_VW Rte_Write_SWC_Com_HvCord_HvCord_tiIdlHv_VW
				}
	else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == (comWrapperReturnValue & RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE ) )
				{
				/* This case handles signal value == 0x1FE (raw) */
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				/* Init value must also be mapped */
				#define Rte_Write_HvCord_HvCord_tiIdlHv_VW Rte_Write_SWC_Com_HvCord_HvCord_tiIdlHv_VW
				}
	else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == (comWrapperReturnValue & RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE ) )  ----> TRUE
				{
				/* This case handles signal value == 0x1FF (raw) */
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
				{
				/* Do nothing */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:893
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 16;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvCord_HvCord_tiIdlHv_VW Rte_Write_SWC_Com_HvCord_HvCord_tiIdlHv_VW
				}
	else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == (comWrapperReturnValue & RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE ) )   ----> TRUE
				{
				/* This case handles signal value == 0x1FE (raw) */
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				/* Init value must also be mapped */
				#define Rte_Write_HvCord_HvCord_tiIdlHv_VW Rte_Write_SWC_Com_HvCord_HvCord_tiIdlHv_VW
				}
	else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == (comWrapperReturnValue & RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE ) )
				{
				/* This case handles signal value == 0x1FF (raw) */
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
				{
				/* Do nothing */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:893
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvCord_HvCord_tiIdlHv_VW:400
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 16;}
				
	if (RTE_E_OK == comWrapperReturnValue)  ----> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_HvCord_HvCord_tiIdlHv_VW Rte_Write_SWC_Com_HvCord_HvCord_tiIdlHv_VW
				}
	else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == (comWrapperReturnValue & RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE ) )
				{
				/* This case handles signal value == 0x1FE (raw) */
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				/* Init value must also be mapped */
				#define Rte_Write_HvCord_HvCord_tiIdlHv_VW Rte_Write_SWC_Com_HvCord_HvCord_tiIdlHv_VW
				}
	else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == (comWrapperReturnValue & RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE ) )
				{
				/* This case handles signal value == 0x1FF (raw) */
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_HV_Auszeit_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)893, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
				{
				/* Do nothing */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:893
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_HvCord_HvCord_tiIdlHv_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HV_Auszeit
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_HV_Auszeit_To_HvCord_tiIdlHv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_HYB_Fahrbereitschaft_To_CoVOM_bDrvCycAcv_VW:

-- Test Case: SWC_Com_RxProcessing_MO_HYB_Fahrbereitschaft_To_CoVOM_bDrvCycAcv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_HYB_Fahrbereitschaft_To_CoVOM_bDrvCycAcv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_HYB_Fahrbereitschaft_To_CoVOM_bDrvCycAcv_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft
		if(ComWrapper_INT7 == 2000){  ComWrapper_INT7 = physValReq;  *data =0;  ComWrapper_INT8 = *data;  return 0;}
		else if(ComWrapper_INT7 == 2001){  ComWrapper_INT7 = physValReq;  *data =1;  ComWrapper_INT8 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_SWC_Com_CoVOM_CoVOM_bDrvCycAcv_VW Rte_Write_SWC_Com_CoVOM_CoVOM_bDrvCycAcv_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT8:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_CoVOM_CoVOM_bDrvCycAcv_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT7:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT8:0
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_CoVOM_CoVOM_bDrvCycAcv_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_HYB_Fahrbereitschaft_To_CoVOM_bDrvCycAcv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_HYB_Fahrbereitschaft
  SWC_Com.c.SWC_Com_RxProcessing_MO_HYB_Fahrbereitschaft_To_CoVOM_bDrvCycAcv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Heissleuchte_To_Eng_bHotLmp_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Heissleuchte_To_Eng_bHotLmp_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Heissleuchte_To_Eng_bHotLmp_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Heissleuchte_To_Eng_bHotLmp_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Heissleuchte ComWrapper_CAN_Rx_Signals_Get_MO_Heissleuchte
		if(ComWrapper_INT23 == 2000){  ComWrapper_INT23 = physValReq;  *data =100;  ComWrapper_INT24 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Write_Eng_Eng_bHotLmp_VW Rte_Write_SWC_Com_Eng_Eng_bHotLmp_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT23:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT24:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT23:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT24:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_bHotLmp_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Heissleuchte_To_Eng_bHotLmp_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Heissleuchte
  SWC_Com.c.SWC_Com_RxProcessing_MO_Heissleuchte_To_Eng_bHotLmp_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Heizungspumpenansteuerung ComWrapper_CAN_Rx_Signals_Get_MO_Heizungspumpenansteuerung
		if(ComWrapper_INT104 == 2000){  ComWrapper_INT104 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT104 == 2001){  ComWrapper_INT104 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Heizungspumpenansteuerung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)894, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_SWaPmp_SWaPmp_rPmp5_VW Rte_Write_SWC_Com_SWaPmp_SWaPmp_rPmp5_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Heizungspumpenansteuerung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)894, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT104:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:894
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT104:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Heizungspumpenansteuerung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Heizungspumpenansteuerung ComWrapper_CAN_Rx_Signals_Get_MO_Heizungspumpenansteuerung
		if(ComWrapper_INT104 == 2000){  ComWrapper_INT104 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT104 == 2001){  ComWrapper_INT104 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Heizungspumpenansteuerung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)894, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_SWaPmp_SWaPmp_rPmp5_VW Rte_Write_SWC_Com_SWaPmp_SWaPmp_rPmp5_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Heizungspumpenansteuerung_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)894, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT104:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:894
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT104:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_SWaPmp_SWaPmp_rPmp5_VW:255
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Heizungspumpenansteuerung
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Heizungspumpenansteuerung_To_SWaPmp_rPmp5_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Hoeheninfo ComWrapper_CAN_Rx_Signals_Get_MO_Hoeheninfo
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Hoeheninfo_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)895, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				/* RTE = 0,99968 * CAN */
				#define Rte_Write_Air_Air_facAltdCor_VW Rte_Write_SWC_Com_Air_Air_facAltdCor_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ---------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Hoeheninfo_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)895, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:895
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Hoeheninfo
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Hoeheninfo ComWrapper_CAN_Rx_Signals_Get_MO_Hoeheninfo
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) ---------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Hoeheninfo_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)895, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				/* RTE = 0,99968 * CAN */
				#define Rte_Write_Air_Air_facAltdCor_VW Rte_Write_SWC_Com_Air_Air_facAltdCor_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Hoeheninfo_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)895, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:895
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_facAltdCor_VW:99
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Hoeheninfo
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Hoeheninfo_To_Air_facAltdCor_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Hybridfahrzeug ComWrapper_CAN_Rx_Signals_Get_MO_Hybridfahrzeug
		if(ComWrapper_INT112 == 2000){  ComWrapper_INT112 = physValReq;  *data =100;   return 0;}

	if ( RTE_E_OK == comWrapperReturnValue )

		#define Rte_Write_SWC_Com_Eng_Eng_noTypHybVeh_VW Rte_Write_SWC_Com_Eng_Eng_noTypHybVeh_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT112:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT112:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_noTypHybVeh_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Hybridfahrzeug
  SWC_Com.c.SWC_Com_RxProcessing_MO_Hybridfahrzeug_To_Eng_noTypHybVeh_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Klima_Eingr_To_Eng_stHvPrfRedReq_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Klima_Eingr_To_Eng_stHvPrfRedReq_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Klima_Eingr_To_Eng_stHvPrfRedReq_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Klima_Eingr_To_Eng_stHvPrfRedReq_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Klima_Eingr ComWrapper_CAN_Rx_Signals_Get_MO_Klima_Eingr
		if(ComWrapper_INT78 == 2000){  ComWrapper_INT78 = physValReq;  *data =100;  ComWrapper_INT79 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_Eng_Eng_stHvPrfRedReq_VW Rte_Write_SWC_Com_Eng_Eng_stHvPrfRedReq_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT78:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT79:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT78:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT79:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_stHvPrfRedReq_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Klima_Eingr_To_Eng_stHvPrfRedReq_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Klima_Eingr
  SWC_Com.c.SWC_Com_RxProcessing_MO_Klima_Eingr_To_Eng_stHvPrfRedReq_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart
		if(ComWrapper_INT111 == 2000){  ComWrapper_INT111 = physValReq;  *data =14;   return 0;}
		else if(ComWrapper_INT111 == 2001){  ComWrapper_INT111 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT111 == 2002){  ComWrapper_INT111 = physValReq;  *data =100; return 32;}

	if ( RTE_E_OK == comWrapperReturnValue )

		if(( 5u < SWC_Com_CanSig_MO_Kraftstoffart) && (15u > SWC_Com_CanSig_MO_Kraftstoffart ) )

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

			#define Rte_Write_SWC_Com_Eng_Eng_noTypFu_VW Rte_Write_SWC_Com_Eng_Eng_noTypFu_VW

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else if ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue ) ----> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT111:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:896
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT111:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart
		if(ComWrapper_INT111 == 2000){  ComWrapper_INT111 = physValReq;  *data =14;   return 0;}
		else if(ComWrapper_INT111 == 2001){  ComWrapper_INT111 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT111 == 2002){  ComWrapper_INT111 = physValReq;  *data =100; return 32;}

	if ( RTE_E_OK == comWrapperReturnValue )  ----> TRUE

		if(( 5u < SWC_Com_CanSig_MO_Kraftstoffart) && (15u > SWC_Com_CanSig_MO_Kraftstoffart ) )  ----> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

			#define Rte_Write_SWC_Com_Eng_Eng_noTypFu_VW Rte_Write_SWC_Com_Eng_Eng_noTypFu_VW

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else if ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT111:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:896
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT111:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart
		if(ComWrapper_INT111 == 2000){  ComWrapper_INT111 = physValReq;  *data =14;   return 0;}
		else if(ComWrapper_INT111 == 2001){  ComWrapper_INT111 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT111 == 2002){  ComWrapper_INT111 = physValReq;  *data =100; return 32;}

	if ( RTE_E_OK == comWrapperReturnValue )  ----> TRUE

		if(( 5u < SWC_Com_CanSig_MO_Kraftstoffart) && (15u > SWC_Com_CanSig_MO_Kraftstoffart ) )

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else     ----> TRUE

			#define Rte_Write_SWC_Com_Eng_Eng_noTypFu_VW Rte_Write_SWC_Com_Eng_Eng_noTypFu_VW

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else if ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kraftstoffart_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)896, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT111:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:896
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT111:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_noTypFu_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kraftstoffart
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kraftstoffart_To_Eng_noTypFu_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_1 ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_1
		if(ComWrapper_INT11 == 2000){  ComWrapper_INT11 = physValReq;  *data =1;  ComWrapper_INT12 = *data;  return 0;}
		else if(ComWrapper_INT11 == 2001){  ComWrapper_INT11 = physValReq;  *data =1;  ComWrapper_INT12 = *data;  return 8;}

if( RTE_E_OK == RetVal ) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlerluefter_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Fans_Fans_rFan1Calc_VW Rte_Write_SWC_Com_Fans_Fans_rFan1Calc_VW
		// No corresponding probe code found for this macro in the provided snippet.


else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == RetVal ) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== RetVal ) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == RetVal ) )   --> FALSE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlerluefter_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT11:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:897
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT11:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_1
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_1 ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_1
		if(ComWrapper_INT11 == 2000){  ComWrapper_INT11 = physValReq;  *data =1;  ComWrapper_INT12 = *data;  return 0;}
		else if(ComWrapper_INT11 == 2001){  ComWrapper_INT11 = physValReq;  *data =1;  ComWrapper_INT12 = *data;  return 8;}

if( RTE_E_OK == RetVal ) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlerluefter_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Fans_Fans_rFan1Calc_VW Rte_Write_SWC_Com_Fans_Fans_rFan1Calc_VW
		// No corresponding probe code found for this macro in the provided snippet.


else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == RetVal ) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== RetVal ) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == RetVal ) )   --> FALSE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlerluefter_1_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT11:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:897
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT11:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_1
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_1_To_Fans_rFan1Calc_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_2 ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_2
		if(ComWrapper_INT12 == 2000){  ComWrapper_INT12 = physValReq;  *data =1;  ComWrapper_INT13 = *data;  return 0;}
		else if(ComWrapper_INT12 == 2001){  ComWrapper_INT12 = physValReq;  *data =1;  ComWrapper_INT13 = *data;  return 8;}

if( RetVal == RTE_E_OK )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlerluefter_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Fans_Fans_rFan2Calc_VW Rte_Write_SWC_Com_Fans_Fans_rFan2Calc_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == RetVal) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== RetVal) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == RetVal)) ------> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlerluefter_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:898
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_2 ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_2
		if(ComWrapper_INT12 == 2000){  ComWrapper_INT12 = physValReq;  *data =1;  ComWrapper_INT13 = *data;  return 0;}
		else if(ComWrapper_INT12 == 2001){  ComWrapper_INT12 = physValReq;  *data =1;  ComWrapper_INT13 = *data;  return 8;}

if( RetVal == RTE_E_OK )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlerluefter_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_Fans_Fans_rFan2Calc_VW Rte_Write_SWC_Com_Fans_Fans_rFan2Calc_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == RetVal) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== RetVal) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == RetVal)) ------> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlerluefter_2_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)897, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:898
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Fans_Fans_rFan2Calc_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlerluefter_2
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlerluefter_2_To_Fans_rFan2Calc_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp_Rohwert ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp_Rohwert
		if(ComWrapper_INT107 == 2000){  ComWrapper_INT107 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT107 == 2001){  ComWrapper_INT107 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlmittel_Temp_Rohwert_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)900, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_CoCir_CoCir_tCoCmbEngOutRaw_VW Rte_Write_SWC_Com_CoCir_CoCir_tCoCmbEngOutRaw_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlmittel_Temp_Rohwert_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)900, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT107:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:900
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT107:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp_Rohwert
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp_Rohwert ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp_Rohwert
		if(ComWrapper_INT107 == 2000){  ComWrapper_INT107 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT107 == 2001){  ComWrapper_INT107 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlmittel_Temp_Rohwert_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)900, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_CoCir_CoCir_tCoCmbEngOutRaw_VW Rte_Write_SWC_Com_CoCir_CoCir_tCoCmbEngOutRaw_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlmittel_Temp_Rohwert_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)900, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT107:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:900
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT107:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_CoCir_CoCir_tCoCmbEngOutRaw_VW:1000
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp_Rohwert
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_Rohwert_To_CoCir_tCoCmbEngOutRaw_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp
		if(ComWrapper_INT103 == 2000){  ComWrapper_INT103 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT103 == 2001){  ComWrapper_INT103 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlmittel_Temp_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)899, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_CoCir_CoCir_tCoCmbEngOut_VW Rte_Write_SWC_Com_CoCir_CoCir_tCoCmbEngOut_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlmittel_Temp_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)899, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT103:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:899
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT103:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp
		if(ComWrapper_INT103 == 2000){  ComWrapper_INT103 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT103 == 2001){  ComWrapper_INT103 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlmittel_Temp_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)899, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_CoCir_CoCir_tCoCmbEngOut_VW Rte_Write_SWC_Com_CoCir_CoCir_tCoCmbEngOut_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_Kuehlmittel_Temp_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)899, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT103:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:899
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT103:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_CoCir_CoCir_tCoCmbEngOut_VW:270
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Kuehlmittel_Temp
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_Kuehlmittel_Temp_To_CoCir_tCoCmbEngOut_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Nachlaufzeit_Heizungspumpe ComWrapper_CAN_Rx_Signals_Get_MO_Nachlaufzeit_Heizungspumpe
		if(ComWrapper_INT105 == 2000){  ComWrapper_INT105 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT105 == 2001){  ComWrapper_INT105 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_SWC_Com_SWaPmp_SWaPmp_tiAftRunMax_VW Rte_Write_SWC_Com_SWaPmp_SWaPmp_tiAftRunMax_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT105:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT105:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_SWaPmp_SWaPmp_tiAftRunMax_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Nachlaufzeit_Heizungspumpe
  SWC_Com.c.SWC_Com_RxProcessing_MO_Nachlaufzeit_Heizungspumpe_To_SWaPmp_tiAftRunMax_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW:

-- Test Case: SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_Nachlaufzeit_Kuehlerluefter ComWrapper_CAN_Rx_Signals_Get_MO_Nachlaufzeit_Kuehlerluefter
		if(ComWrapper_INT94 == 2000){  ComWrapper_INT94 = physValReq;  *data =1;   return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_Fans_Fans_tiArn_VW Rte_Write_SWC_Com_Fans_Fans_tiArn_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT94:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT94:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Fans_Fans_tiArn_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_Nachlaufzeit_Kuehlerluefter
  SWC_Com.c.SWC_Com_RxProcessing_MO_Nachlaufzeit_Kuehlerluefter_To_Fans_tiArn_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW:

-- Test Case: SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ
		if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
		else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =2;   return 10;}
		else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}

	if ( RTE_E_OK == comWrapperReturnValue ) ---> TRUE

		if(0x03u == SWC_Com_CanSig_MO_OBD_Typ)  ---> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_OBD_Typ_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)901, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

			#define Rte_Write_SWC_Com_Eng_Eng_noTypObd_VW Rte_Write_SWC_Com_Eng_Eng_noTypObd_VW

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_OBD_Typ_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)901, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:901
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ
		if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
		else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =2;   return 10;}
		else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}

	if ( RTE_E_OK == comWrapperReturnValue ) ---> TRUE

		if(0x03u == SWC_Com_CanSig_MO_OBD_Typ)

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_OBD_Typ_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)901, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else    ---> TRUE

			#define Rte_Write_SWC_Com_Eng_Eng_noTypObd_VW Rte_Write_SWC_Com_Eng_Eng_noTypObd_VW

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_OBD_Typ_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)901, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:901
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Eng_Eng_noTypObd_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_OBD_Typ_To_Eng_noTypObd_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW:

-- Test Case: SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_QBit_Aussen_Temp ComWrapper_CAN_Rx_Signals_Get_MO_QBit_Aussen_Temp
		if(ComWrapper_INT114 == 2000){  ComWrapper_INT114 = physValReq;  *data =0;   return 0;}
		else if(ComWrapper_INT114 == 2001){  ComWrapper_INT114 = physValReq;  *data =1; return 0;}

	if (comWrapperReturnValue == RTE_E_OK)   ----> TRUE

		#define Rte_Write_Air_Air_bPlausTsAirAmb_VW Rte_Write_SWC_Com_Air_Air_bPlausTsAirAmb_VW

		if (canSignal == TRUE)     ----> TRUE

			#define Rte_Call_Event_SWC_Com_MO_QBit_Aussen_Temp_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)955, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

			#define Rte_Call_Event_SWC_Com_MO_QBit_Aussen_Temp_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)955, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT114:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:955
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT114:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_bPlausTsAirAmb_VW:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_QBit_Aussen_Temp
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_QBit_Aussen_Temp ComWrapper_CAN_Rx_Signals_Get_MO_QBit_Aussen_Temp
		if(ComWrapper_INT114 == 2000){  ComWrapper_INT114 = physValReq;  *data =0;   return 0;}
		else if(ComWrapper_INT114 == 2001){  ComWrapper_INT114 = physValReq;  *data =1; return 0;}

	if (comWrapperReturnValue == RTE_E_OK)   ----> TRUE

		#define Rte_Write_Air_Air_bPlausTsAirAmb_VW Rte_Write_SWC_Com_Air_Air_bPlausTsAirAmb_VW

		if (canSignal == TRUE)

			#define Rte_Call_Event_SWC_Com_MO_QBit_Aussen_Temp_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)955, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else      ----> TRUE

			#define Rte_Call_Event_SWC_Com_MO_QBit_Aussen_Temp_OutOfRange_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)955, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT114:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:955
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT114:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Air_Air_bPlausTsAirAmb_VW:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_QBit_Aussen_Temp
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_QBit_Aussen_Temp_To_Air_bPlausTsAirAmb_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch:

-- Test Case: SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Fahrerwunsch ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Fahrerwunsch
		if(ComWrapper_INT61 == 2000){  ComWrapper_INT61 = physValReq;  *data =100;  ComWrapper_INT62 = *data;  return 0;}
	else if(ComWrapper_INT61 == 2001){  ComWrapper_INT61 = physValReq;  *data =100;  ComWrapper_INT62 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_StartStopp_Fahrerwunsch_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)902, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_StartStopp_Fahrerwunsch_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)902, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT61:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT62:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:902
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT61:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT62:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Fahrerwunsch
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch.002
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Fahrerwunsch ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Fahrerwunsch
		if(ComWrapper_INT61 == 2000){  ComWrapper_INT61 = physValReq;  *data =100;  ComWrapper_INT62 = *data;  return 0;}
	else if(ComWrapper_INT61 == 2001){  ComWrapper_INT61 = physValReq;  *data =100;  ComWrapper_INT62 = *data;  return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_StartStopp_Fahrerwunsch_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)902, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE	== comWrapperReturnValue) ||
		   ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_StartStopp_Fahrerwunsch_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)902, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT61:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT62:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:902
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT61:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT62:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Fahrerwunsch
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Fahrerwunsch
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_StartStopp_Motorstopp_To_StrtStopOut_bStopAcv_VW:

-- Test Case: SWC_Com_RxProcessing_MO_StartStopp_Motorstopp_To_StrtStopOut_bStopAcv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_StartStopp_Motorstopp_To_StrtStopOut_bStopAcv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_StartStopp_Motorstopp_To_StrtStopOut_bStopAcv_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Motorstopp ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Motorstopp
		if(ComWrapper_INT62 == 2000){  ComWrapper_INT62 = physValReq;  *data =100;  ComWrapper_INT63 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_SWC_Com_StrtStopOut_StrtStopOut_bStopAcv_VW Rte_Write_SWC_Com_StrtStopOut_StrtStopOut_bStopAcv_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT62:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT63:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT62:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT63:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_StrtStopOut_StrtStopOut_bStopAcv_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Motorstopp_To_StrtStopOut_bStopAcv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Motorstopp
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Motorstopp_To_StrtStopOut_bStopAcv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_StartStopp_Wiederstart_To_StrtStopOut_bRstrtAcv_VW:

-- Test Case: SWC_Com_RxProcessing_MO_StartStopp_Wiederstart_To_StrtStopOut_bRstrtAcv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_StartStopp_Wiederstart_To_StrtStopOut_bRstrtAcv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_StartStopp_Wiederstart_To_StrtStopOut_bRstrtAcv_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Wiederstart ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Wiederstart
		if(ComWrapper_INT64 == 2000){  ComWrapper_INT64 = physValReq;  *data =100;  ComWrapper_INT65 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Write_SWC_Com_StrtStopOut_StrtStopOut_bRstrtAcv_VW Rte_Write_SWC_Com_StrtStopOut_StrtStopOut_bRstrtAcv_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT64:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT65:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT64:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT65:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_CoVOM_CoVOM_bElModAcv_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Wiederstart_To_StrtStopOut_bRstrtAcv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_StartStopp_Wiederstart
  SWC_Com.c.SWC_Com_RxProcessing_MO_StartStopp_Wiederstart_To_StrtStopOut_bRstrtAcv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW:

-- Test Case: SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_TME_KL_Anf ComWrapper_CAN_Rx_Signals_Get_MO_TME_KL_Anf
		if(ComWrapper_INT109 == 2000){  ComWrapper_INT109 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT109 == 2001){  ComWrapper_INT109 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_TME_KL_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)903, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_RadBli_RadBli_rFanDem_VW Rte_Write_SWC_Com_RadBli_RadBli_rFanDem_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_TME_KL_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)903, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT109:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:903
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT109:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_TME_KL_Anf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_TME_KL_Anf ComWrapper_CAN_Rx_Signals_Get_MO_TME_KL_Anf
		if(ComWrapper_INT109 == 2000){  ComWrapper_INT109 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT109 == 2001){  ComWrapper_INT109 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_TME_KL_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)903, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_SWC_Com_RadBli_RadBli_rFanDem_VW Rte_Write_SWC_Com_RadBli_RadBli_rFanDem_VW

else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
       ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_TME_KL_Anf_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)903, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT109:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:903
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT109:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_SWC_Com_RadBli_RadBli_rFanDem_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_TME_KL_Anf
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_MO_TME_KL_Anf_To_RadBli_rFanDem_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_Motor_67:

-- Test Case: SWC_Com_RxProcessing_Motor_67.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_Motor_67
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_Motor_67.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_Motor_67
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_OBDProtocol_req ComWrapper_CAN_Rx_Signals_Get_OBDProtocol_req
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_OBDProtocol_req_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)1332, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_OBDProtocol_req_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)1332, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:1332
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_Motor_67
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_OBDProtocol_req
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_Motor_67
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_Motor_67.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_Motor_67
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_Motor_67.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_Motor_67
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_OBDProtocol_req ComWrapper_CAN_Rx_Signals_Get_OBDProtocol_req
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_OBDProtocol_req_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)1332, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_MO_OBDProtocol_req_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)1332, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:1332
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_Motor_67
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_OBDProtocol_req
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_Motor_67
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW:

-- Test Case: SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
		if (signalVal < 3)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_LvCom_LvCom_stFanRedDem_VW Rte_Write_SWC_Com_LvCom_LvCom_stFanRedDem_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  --------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:906
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  --------> TRUE
		if (signalVal < 3)  --------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_LvCom_LvCom_stFanRedDem_VW Rte_Write_SWC_Com_LvCom_LvCom_stFanRedDem_VW
				}
		else
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:906
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_LvCom_LvCom_stFanRedDem_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  --------> TRUE
		if (signalVal < 3)
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_LvCom_LvCom_stFanRedDem_VW Rte_Write_SWC_Com_LvCom_LvCom_stFanRedDem_VW
				}
		else   --------> TRUE
				{
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_NVEM_Red_KL_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)906, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:906
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_NVEM_Red_KL
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_NVEM_Red_KL_To_LvCom_stFanRedDem_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW:

-- Test Case: SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ORU_Status ComWrapper_CAN_Rx_Signals_Get_ORU_Status
		if(ComWrapper_INT113 == 2000){  ComWrapper_INT113 = physValReq;  *data =0x07;   return 0;}
		else if(ComWrapper_INT113 == 2001){  ComWrapper_INT113 = physValReq;  *data =100; return 0;}

	if ( RTE_E_OK == comWrapperReturnValue )   ---> TRUE

		if(0x07u == SWC_Com_CanSig_ORU_Status)  ---> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ORU_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)907, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else  

			#define Rte_Write_SWC_Com_TmeEcu_TmeEcu_stOnlnRmtUpd_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_stOnlnRmtUpd_VW

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ORU_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)907, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT113:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:907
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT113:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ORU_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_ORU_Status ComWrapper_CAN_Rx_Signals_Get_ORU_Status
		if(ComWrapper_INT113 == 2000){  ComWrapper_INT113 = physValReq;  *data =0x07;   return 0;}
		else if(ComWrapper_INT113 == 2001){  ComWrapper_INT113 = physValReq;  *data =100; return 0;}

	if ( RTE_E_OK == comWrapperReturnValue )   ---> TRUE

		if(0x07u == SWC_Com_CanSig_ORU_Status)

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ORU_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)907, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else     ---> TRUE

			#define Rte_Write_SWC_Com_TmeEcu_TmeEcu_stOnlnRmtUpd_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_stOnlnRmtUpd_VW

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_ORU_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)907, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT113:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:907
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT113:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_ORU_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_ORU_Status_To_TmeEcu_stOnlnRmtUpd_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW:

-- Test Case: SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_Identifier_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)908, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_PDLib_PDLib_stId_VW Rte_Write_SWC_Com_PDLib_PDLib_stId_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_Identifier_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)908, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2006
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:908
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   ----> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_Identifier_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)908, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_PDLib_PDLib_stId_VW Rte_Write_SWC_Com_PDLib_PDLib_stId_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_Identifier_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)908, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:908
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stId_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_PIF_Identifier_To_PDLib_stId_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW:

-- Test Case: SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)  ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:  ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stLgBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stLgBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stLgBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stLgBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stLgBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinRoadClas_VW
				break;
				default:
			break;
				}
	else
				{
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				}
else
				{
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stLgBinSpd_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)  ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stLgBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:  ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stLgBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stLgBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stLgBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stLgBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinRoadClas_VW
				break;
			default:
				break;
				}
				else
				{
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				}
else
				{
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stLgBinLongi_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)  ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
		if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stLgBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stLgBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLongi_VW
				break;
			case Cx3_PIF_Leistung:  ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stLgBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stLgBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stLgBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinRoadClas_VW
				break;
			default:
				break;
				}
		else
				{
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				}
else
				{
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stLgBinPwrs_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.004
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.004
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
					if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
					else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
					else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
					else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
					else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
					else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
					else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
					
if (RTE_E_OK == comWrapperReturnValueIdentifier)  ----------> TRUE
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
					if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
					
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
					if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
					
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
					if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
					
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
					if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
					
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
					if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
					
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
					if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
					
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
					if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
					
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
					if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
					
					#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
					if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
					
		if(RTE_E_OK == comWrapperReturnValue)
					switch(identifierVal)
					{
			case Cx1_PIF_Geschwindigkeit:
					#define Rte_Write_PDLib_PDLib_stLgBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinSpd_VW
					break;
			case Cx2_PIF_Laengsbeschleunigung:
					#define Rte_Write_PDLib_PDLib_stLgBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLongi_VW
					break;
			case Cx3_PIF_Leistung:
					#define Rte_Write_PDLib_PDLib_stLgBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinPwrs_VW
					break;
			case Cx4_PIF_Querbeschleunigung:  ----------> TRUE
					#define Rte_Write_PDLib_PDLib_stLgBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLat_VW
					break;
			case Cx5_PIF_Strassenklasse:
					#define Rte_Write_PDLib_PDLib_stLgBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinRoadClas_VW
					break;
			default:
					break;
					}
		else
					{
					}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
					( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
					( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
					{
					}
else
					{
					}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2003
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stLgBinLat_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.005
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW.005
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)  ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stLgBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stLgBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stLgBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stLgBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:   ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stLgBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stLgBinRoadClas_VW
				break;
			default:
				break;
				}
	else
				{
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				}
else
				{
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2004
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stLgBinRoadClas_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_LT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Bin_x_To_PDLib_stLgBinX_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW:

-- Test Case: SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Status ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_LT_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)909, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_PDLib_PDLib_stLg_VW Rte_Write_SWC_Com_PDLib_PDLib_stLg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )  ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_LT_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)909, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:909
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Status ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)   ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_LT_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)909, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_PDLib_PDLib_stLg_VW Rte_Write_SWC_Com_PDLib_PDLib_stLg_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_LT_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)909, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:909
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stLg_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_LT_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_PIF_LT_Status_To_PDLib_stLg_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW:

-- Test Case: SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)   ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:    ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stMidBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stMidBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stMidBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stMidBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stMidBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinRoadClas_VW
				break;
			default:
				break;
				}
	else
				{
				/* no or invalid data received - nothing to do */
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stMidBinSpd_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)   ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stMidBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:     ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stMidBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stMidBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stMidBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stMidBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinRoadClas_VW
				break;
			default:
				break;
				}
	else
				{
				/* no or invalid data received - nothing to do */
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stMidBinLongi_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)   ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stMidBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stMidBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLongi_VW
				break;
			case Cx3_PIF_Leistung:    ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stMidBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stMidBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLat_VW
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stMidBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinRoadClas_VW
				break;
			default:
				break;
				}
	else
				{
				/* no or invalid data received - nothing to do */
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stMidBinPwrs_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.004
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.004
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)   ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stMidBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stMidBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stMidBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:      ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stMidBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stMidBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinRoadClas_VW
				break;
			default:
				break;
				}
			else
				{
				/* no or invalid data received - nothing to do */
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2003
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stMidBinLat_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.005
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW.005
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)   ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
		case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stMidBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinSpd_VW
				break;
		case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stMidBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLongi_VW
				break;
		case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stMidBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinPwrs_VW
				break;
		case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stMidBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinLat_VW
				break;
		case Cx5_PIF_Strassenklasse:     ----------> TRUE
				#define Rte_Write_PDLib_PDLib_stMidBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stMidBinRoadClas_VW
				break;
		default:
				break;
				}
	else
				{
				/* no or invalid data received - nothing to do */
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2004
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stMidBinRoadClas_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_MT_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Bin_x_To_PDLib_stMidBinX_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW:

-- Test Case: SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW.001
TEST.NOTES:
				Seq & Probepoints for SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Status ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_MT_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)910, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_PDLib_PDLib_stMid_VW Rte_Write_SWC_Com_PDLib_PDLib_stMid_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )   ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_MT_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)910, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:910
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Status ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ----------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_MT_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)910, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				#define Rte_Write_PDLib_PDLib_stMid_VW Rte_Write_SWC_Com_PDLib_PDLib_stMid_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_MT_Status_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)910, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:910
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stMid_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_MT_Status
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_PIF_MT_Status_To_PDLib_stMid_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW:

-- Test Case: SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValueIdentifier)  -----> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
		if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:   -----> TRUE
				#define Rte_Write_PDLib_PDLib_stShoBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stShoBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stShoBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stShoBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stShoBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinRoadClas_VW
				break;
			default:
				break;
				}
		else
				{
				/* no or invalid data received - nothing to do */
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stShoBinSpd_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValueIdentifier)  -----> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
		if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stShoBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:    -----> TRUE
				#define Rte_Write_PDLib_PDLib_stShoBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stShoBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stShoBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stShoBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinRoadClas_VW
				break;
			default:
				break;
				}
		else
				{
				/* no or invalid data received - nothing to do */
				}
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stShoBinLongi_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)  -----> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stShoBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stShoBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLongi_VW
				break;
			case Cx3_PIF_Leistung:    -----> TRUE
				#define Rte_Write_PDLib_PDLib_stShoBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stShoBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stShoBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinRoadClas_VW
				break;
			default:
				break;
				}
	else
				{
				/* no or invalid data received - nothing to do */
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
else
				{
				/* Nothing to do */
				}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stShoBinPwrs_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.004
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.004
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)  -----> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stShoBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stShoBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stShoBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:  -----> TRUE
				#define Rte_Write_PDLib_PDLib_stShoBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:
				#define Rte_Write_PDLib_PDLib_stShoBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinRoadClas_VW
				break;
			default:
				break;
				}
			else
				{
				/* no or invalid data received - nothing to do */
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
else
				{
				/* Nothing to do */
				}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2003
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stShoBinLat_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.005
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW.005
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =3;   return 0;}
				else if(ComWrapper_INT133 == 2003){  ComWrapper_INT133 = physValReq;  *data =4; return 0;}
				else if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =5; return 0;}
				else if(ComWrapper_INT133 == 2005){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2006){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValueIdentifier)  -----> TRUE
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
				if(ComWrapper_INT134 == 2000){  ComWrapper_INT134 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
				if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
				if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
				if(ComWrapper_INT137 == 2000){  ComWrapper_INT137 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
				if(ComWrapper_INT138 == 2000){  ComWrapper_INT138 = physValReq;  *data =100;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8 ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
				if(ComWrapper_INT139 == 2000){  ComWrapper_INT139 = physValReq;  *data =100;   return 0;}
				
	if(RTE_E_OK == comWrapperReturnValue)
				switch(identifierVal)
				{
			case Cx1_PIF_Geschwindigkeit:
				#define Rte_Write_PDLib_PDLib_stShoBinSpd_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinSpd_VW
				break;
			case Cx2_PIF_Laengsbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stShoBinLongi_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLongi_VW
				break;
			case Cx3_PIF_Leistung:
				#define Rte_Write_PDLib_PDLib_stShoBinPwrs_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinPwrs_VW
				break;
			case Cx4_PIF_Querbeschleunigung:
				#define Rte_Write_PDLib_PDLib_stShoBinLat_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinLat_VW
				break;
			case Cx5_PIF_Strassenklasse:  -----> TRUE
				#define Rte_Write_PDLib_PDLib_stShoBinRoadClas_VW Rte_Write_SWC_Com_PDLib_PDLib_stShoBinRoadClas_VW
				break;
			default:
				break;
				}
	else
				{
				/* no or invalid data received - nothing to do */
				}
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValueIdentifier) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValueIdentifier) )
				{
				/* Identifier could not be read successfully */
				}
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2004
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT138:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT139:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stShoBinRoadClas_VW:131060
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_Identifier
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_0
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_1
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_2
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_3
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_4
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_5
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_6
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_6
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_7
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_7
  ComWrapper.c.ComWrapper_MapRxReturnType
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Bin_8
  uut_prototype_stubs.Rte_Read_ComWrapper_PIF_01_PIF_ST_Bin_8
  ComWrapper.c.ComWrapper_MapRxReturnType
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Bin_x_To_PDLib_stShoBinX_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW:

-- Test Case: SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Status ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Status
		if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
		else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
		else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}

		if (RTE_E_OK == comWrapperReturnValue)
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_ST_Status_SetEventStatus(arg1) (RTE_E_UNCONNECTED)
		#define Rte_Write_PDLib_PDLib_stSho_VW Rte_Write_SWC_Com_PDLib_PDLib_stSho_VW

		else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
		( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
		( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) -------------> TRUE
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_ST_Status_SetEventStatus(arg1) (RTE_E_UNCONNECTED)


		else

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Status
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Status ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)  -------> TRUE
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_ST_Status_SetEventStatus(arg1) (RTE_E_UNCONNECTED)
				#define Rte_Write_PDLib_PDLib_stSho_VW Rte_Write_SWC_Com_PDLib_PDLib_stSho_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_PIF_ST_Status_SetEventStatus(arg1) (RTE_E_UNCONNECTED)
				
				
	else
				
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_PDLib_PDLib_stSho_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_PIF_ST_Status
  SWC_Com.c.SWC_Com_RxProcessing_PIF_ST_Status_To_PDLib_stSho_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW:

-- Test Case: SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW
#define Rte_Call_BSW_Com_BSW_Com_GetPifToggleActive BSW_Com_BSW_Com_GetPifToggleActive

#define Rte_Write_PDLib_PDLib_stAlvCnt_VW Rte_Write_SWC_Com_PDLib_PDLib_stAlvCnt_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW
  BSW_Com.c.BSW_Com_GetPifToggleActive
  SWC_Com.c.SWC_Com_RxProcessing_PIF_Toggle_To_PDLib_stAlvCnt_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW:

-- Test Case: SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_RW_Reservewarnung_2_aktiv ComWrapper_CAN_Rx_Signals_Get_RW_Reservewarnung_2_aktiv
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_RW_RESERVEWARNUNG_2_aktiv_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)912, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_Gw_Gw_stRngResvWarn_VW Rte_Write_SWC_Com_Gw_Gw_stRngResvWarn_VW
				
	else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ----------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_RW_RESERVEWARNUNG_2_aktiv_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)912, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:912
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_RW_Reservewarnung_2_aktiv
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_RW_Reservewarnung_2_aktiv ComWrapper_CAN_Rx_Signals_Get_RW_Reservewarnung_2_aktiv
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValue) ----------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_RW_RESERVEWARNUNG_2_aktiv_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)912, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
				#define Rte_Write_Gw_Gw_stRngResvWarn_VW Rte_Write_SWC_Com_Gw_Gw_stRngResvWarn_VW
				
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_RW_RESERVEWARNUNG_2_aktiv_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)912, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:912
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Gw_Gw_stRngResvWarn_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_RW_Reservewarnung_2_aktiv
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_RW_Reservewarnung_2_aktiv_To_Gw_stRngResvWarn_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW:

-- Test Case: SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_SI_BUS_03 ComWrapper_CAN_Rx_Signals_Get_SI_BUS_03
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_ComM_ComM_bBus03Acv_VW Rte_Write_SWC_Com_ComM_ComM_bBus03Acv_VW
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ComM_ComM_bBus03Acv_VW:101
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_03
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_03_To_ComM_bBus03Acv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW:

-- Test Case: SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_SI_BUS_04 ComWrapper_CAN_Rx_Signals_Get_SI_BUS_04
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_ComM_ComM_bBus04Acv_VW Rte_Write_SWC_Com_ComM_ComM_bBus04Acv_VW
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ComM_ComM_bBus04Acv_VW:101
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_04
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_04_To_ComM_bBus04Acv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW:

-- Test Case: SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW

			#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_SI_BUS_06 ComWrapper_CAN_Rx_Signals_Get_SI_BUS_06
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
			else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
			
	if (RTE_E_OK == comWrapperReturnValue)
			
			#define Rte_Write_ComM_ComM_bBus06Acv_VW Rte_Write_SWC_Com_ComM_ComM_bBus06Acv_VW
	else
			{
			/* Nothing to do */
			}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ComM_ComM_bBus06Acv_VW:101
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_06
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_06_To_ComM_bBus06Acv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW:

-- Test Case: SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_SI_BUS_10 ComWrapper_CAN_Rx_Signals_Get_SI_BUS_10
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_ComM_ComM_bBus10Acv_VW Rte_Write_SWC_Com_ComM_ComM_bBus10Acv_VW
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ComM_ComM_bBus10Acv_VW:101
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_10
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_10_To_ComM_bBus10Acv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW:

-- Test Case: SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_SI_BUS_12 ComWrapper_CAN_Rx_Signals_Get_SI_BUS_12
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_ComM_ComM_bBus12Acv_VW Rte_Write_SWC_Com_ComM_ComM_bBus12Acv_VW
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ComM_ComM_bBus12Acv_VW:101
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_12
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_12_To_ComM_bBus12Acv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW:

-- Test Case: SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_SI_BUS_13 ComWrapper_CAN_Rx_Signals_Get_SI_BUS_13
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_ComM_ComM_bBus13Acv_VW Rte_Write_SWC_Com_ComM_ComM_bBus13Acv_VW
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ComM_ComM_bBus13Acv_VW:101
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_BUS_13
  SWC_Com.c.SWC_Com_RxProcessing_SI_BUS_13_To_ComM_bBus13Acv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW:

-- Test Case: SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_SI_T_Mode ComWrapper_CAN_Rx_Signals_Get_SI_T_Mode
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) --------> TRUE
				{
				SWC_Com_AppSig_TmeDCM_bTrptMod_VW = (BOOLEAN_STRING_BOOLEAN)SWC_Com_CanSig_SI_T_Mode;
				}
	else
				{
				SWC_Com_AppSig_TmeDCM_bTrptMod_VW = FALSE;
				}
				
	if(TRUE == SWC_Com_AppSig_TmeDCM_bTrptMod_VW) --------> TRUE
				{
				#define Rte_Call_Event_SWC_DIAG_T_MODE_ACTIVE_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)1041, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else
				{
				#define Rte_Call_Event_SWC_DIAG_T_MODE_ACTIVE_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)1041, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
				
				#define Rte_Write_TmeDCM_TmeDCM_bTrptMod_VW Rte_Write_SWC_Com_TmeDCM_TmeDCM_bTrptMod_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:1041
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeDCM_TmeDCM_bTrptMod_VW:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_T_Mode
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_SI_T_Mode ComWrapper_CAN_Rx_Signals_Get_SI_T_Mode
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =0;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =1;   return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) --------> TRUE
				{
				SWC_Com_AppSig_TmeDCM_bTrptMod_VW = (BOOLEAN_STRING_BOOLEAN)SWC_Com_CanSig_SI_T_Mode;
				}
	else
				{
				SWC_Com_AppSig_TmeDCM_bTrptMod_VW = FALSE;
				}
				
	if(TRUE == SWC_Com_AppSig_TmeDCM_bTrptMod_VW)
				{
				#define Rte_Call_Event_SWC_DIAG_T_MODE_ACTIVE_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)1041, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
	else  --------> TRUE
				{
				#define Rte_Call_Event_SWC_DIAG_T_MODE_ACTIVE_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)1041, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				}
				
				#define Rte_Write_TmeDCM_TmeDCM_bTrptMod_VW Rte_Write_SWC_Com_TmeDCM_TmeDCM_bTrptMod_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:1041
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeDCM_TmeDCM_bTrptMod_VW:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_SI_T_Mode
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_SI_T_Mode_To_TmeDCM_bTrptMod_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW:

-- Test Case: SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus
		if(ComWrapper_INT90 == 2000){  ComWrapper_INT90 = physValReq;  *data =4;   return 0;}
		else if(ComWrapper_INT90 == 2001){  ComWrapper_INT90 = physValReq;  *data =7; return 0;}
		else if(ComWrapper_INT90 == 2002){  ComWrapper_INT90 = physValReq;  *data =32; return 0;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Read_StandheizungVerbaut_Value Rte_Read_SWC_Com_StandheizungVerbaut_Value

	if(TRUE == sthEnabled)

		if(DT_STH_Fehlerstatus_UpperLimit == SWC_Com_CanSig_STH_Fehlerstatus)

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else if(Cx4_Heizgeraet_verriegelt == SWC_Com_CanSig_STH_Fehlerstatus)   --> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

			#define Rte_Write_ParkHt_ParkHt_stParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_stParkHeat_VW

		else

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	if(DT_STH_Fehlerstatus_UpperLimit == SWC_Com_CanSig_STH_Fehlerstatus) --> FALSE
	else
		#define Rte_Write_ParkHt_ParkHt_stParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_stParkHeat_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT90:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Diag_Identification_StandheizungVerbaut_Value:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:914
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT90:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ParkHt_ParkHt_stParkHeat_VW:4
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus
		if(ComWrapper_INT90 == 2000){  ComWrapper_INT90 = physValReq;  *data =4;   return 0;}
		else if(ComWrapper_INT90 == 2001){  ComWrapper_INT90 = physValReq;  *data =7; return 0;}
		else if(ComWrapper_INT90 == 2002){  ComWrapper_INT90 = physValReq;  *data =32; return 0;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Read_StandheizungVerbaut_Value Rte_Read_SWC_Com_StandheizungVerbaut_Value

	if(TRUE == sthEnabled)

		if(DT_STH_Fehlerstatus_UpperLimit == SWC_Com_CanSig_STH_Fehlerstatus)  --> TRUE 

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else if(Cx4_Heizgeraet_verriegelt == SWC_Com_CanSig_STH_Fehlerstatus)

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

			#define Rte_Write_ParkHt_ParkHt_stParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_stParkHeat_VW

		else

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	if(DT_STH_Fehlerstatus_UpperLimit == SWC_Com_CanSig_STH_Fehlerstatus) --> FALSE
	else
		#define Rte_Write_ParkHt_ParkHt_stParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_stParkHeat_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT90:2001
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Diag_Identification_StandheizungVerbaut_Value:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:914
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT90:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus
		if(ComWrapper_INT90 == 2000){  ComWrapper_INT90 = physValReq;  *data =4;   return 0;}
		else if(ComWrapper_INT90 == 2001){  ComWrapper_INT90 = physValReq;  *data =7; return 0;}
		else if(ComWrapper_INT90 == 2002){  ComWrapper_INT90 = physValReq;  *data =32; return 0;}

if (RTE_E_OK == comWrapperReturnValue) --> TRUE

		#define Rte_Read_StandheizungVerbaut_Value Rte_Read_SWC_Com_StandheizungVerbaut_Value

	if(TRUE == sthEnabled)

		if(DT_STH_Fehlerstatus_UpperLimit == SWC_Com_CanSig_STH_Fehlerstatus)

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else if(Cx4_Heizgeraet_verriegelt == SWC_Com_CanSig_STH_Fehlerstatus) 

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

			#define Rte_Write_ParkHt_ParkHt_stParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_stParkHeat_VW

		else   --> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehlerstatus_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)914, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	if(DT_STH_Fehlerstatus_UpperLimit == SWC_Com_CanSig_STH_Fehlerstatus) --> FALSE
	else
		#define Rte_Write_ParkHt_ParkHt_stParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_stParkHeat_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT90:2002
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Diag_Identification_StandheizungVerbaut_Value:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:914
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT90:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ParkHt_ParkHt_stParkHeat_VW:32
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Fehlerstatus
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_STH_Fehlerstatus_To_ParkHt_stParkHeat_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW:

-- Test Case: SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW.001
TEST.NOTES:
		
Seq & Probepoints for SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Geblaese ComWrapper_CAN_Rx_Signals_Get_STH_Geblaese
		if(ComWrapper_INT93 == 2000){  ComWrapper_INT93 = physValReq;  *data =1;   return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_ParkHt_ParkHt_bRlsPreCabCdn_VW Rte_Write_SWC_Com_ParkHt_ParkHt_bRlsPreCabCdn_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT93:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT93:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ParkHt_ParkHt_bRlsPreCabCdn_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Geblaese
  SWC_Com.c.SWC_Com_RxProcessing_STH_Geblaese_To_ParkHt_bRlsPreCabCdn_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW:

-- Test Case: SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_LED ComWrapper_CAN_Rx_Signals_Get_STH_LED
		if(ComWrapper_INT92 == 2000){  ComWrapper_INT92 = physValReq;  *data =1;   return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_ParkHt_ParkHt_bParkHeatAcv_VW Rte_Write_SWC_Com_ParkHt_ParkHt_bParkHeatAcv_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT92:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT92:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ParkHt_ParkHt_bParkHeatAcv_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_LED
  SWC_Com.c.SWC_Com_RxProcessing_STH_LED_To_ParkHt_bParkHeatAcv_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_STH_Texte:

-- Test Case: SWC_Com_RxProcessing_STH_Texte.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Texte
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Texte.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_Texte
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Fehler_ElWaPu ComWrapper_CAN_Rx_Signals_Get_STH_Fehler_ElWaPu
		if(ComWrapper_INT91 == 2000){  ComWrapper_INT91 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT91 == 2001){  ComWrapper_INT91 = physValReq;  *data =0; return 8;}

if( (RTE_E_OK == comWrapperReturnValue) || (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) )  --> TRUE

		#define Rte_Read_StandheizungVerbaut_Value Rte_Read_SWC_Com_StandheizungVerbaut_Value

	if(TRUE == sthEnabled)   --> TRUE

		if(TRUE == SWC_Com_CanSig_STH_Fehler_ElWaPu)   --> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehler_ElWaPu_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)913, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehler_ElWaPu_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)913, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Diag_Identification_StandheizungVerbaut_Value:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:913
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Fehler_ElWaPu
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_STH_Texte.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Texte
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Texte.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_Texte
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Fehler_ElWaPu ComWrapper_CAN_Rx_Signals_Get_STH_Fehler_ElWaPu
		if(ComWrapper_INT91 == 2000){  ComWrapper_INT91 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT91 == 2001){  ComWrapper_INT91 = physValReq;  *data =0; return 8;}

if( (RTE_E_OK == comWrapperReturnValue) || (RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE == comWrapperReturnValue) )  --> TRUE

		#define Rte_Read_StandheizungVerbaut_Value Rte_Read_SWC_Com_StandheizungVerbaut_Value

	if(TRUE == sthEnabled)   --> TRUE

		if(TRUE == SWC_Com_CanSig_STH_Fehler_ElWaPu)

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehler_ElWaPu_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)913, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		else     --> TRUE

			#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Fehler_ElWaPu_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)913, arg1))
			if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:2002
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Diag_Identification_StandheizungVerbaut_Value:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:913
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Fehler_ElWaPu
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW:

-- Test Case: SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Texte ComWrapper_CAN_Rx_Signals_Get_STH_Texte
		if(ComWrapper_INT91 == 2000){  ComWrapper_INT91 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT91 == 2001){  ComWrapper_INT91 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT91 == 2002){  ComWrapper_INT91 = physValReq;  *data =100;   return 32;}

if (RTE_E_OK == comWrapperReturnValue)

	if( 4u < SWC_Com_CanSig_STH_Texte )

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_ParkHt_ParkHt_noFailParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_noFailParkHeat_VW

		
else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) --> TRUE
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:2002
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:915
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Texte
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Texte ComWrapper_CAN_Rx_Signals_Get_STH_Texte
		if(ComWrapper_INT91 == 2000){  ComWrapper_INT91 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT91 == 2001){  ComWrapper_INT91 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT91 == 2002){  ComWrapper_INT91 = physValReq;  *data =100;   return 32;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

	if( 4u < SWC_Com_CanSig_STH_Texte )  --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_ParkHt_ParkHt_noFailParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_noFailParkHeat_VW

		
else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:915
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Texte
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW.003
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_STH_Texte ComWrapper_CAN_Rx_Signals_Get_STH_Texte
		if(ComWrapper_INT91 == 2000){  ComWrapper_INT91 = physValReq;  *data =1;   return 0;}
		else if(ComWrapper_INT91 == 2001){  ComWrapper_INT91 = physValReq;  *data =100; return 0;}
		else if(ComWrapper_INT91 == 2002){  ComWrapper_INT91 = physValReq;  *data =100;   return 32;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

	if( 4u < SWC_Com_CanSig_STH_Texte ) 

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

	else   --> TRUE

		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}

		#define Rte_Write_ParkHt_ParkHt_noFailParkHeat_VW Rte_Write_SWC_Com_ParkHt_ParkHt_noFailParkHeat_VW

		
else if(RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)
		   
		#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_STH_Texte_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)915, arg1))
		if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:915
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT91:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ParkHt_ParkHt_noFailParkHeat_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_STH_Texte
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_STH_Texte_To_ParkHt_noFailParkHeat_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_To_AC_stCodConf_VW:

-- Test Case: SWC_Com_RxProcessing_To_AC_stCodConf_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_To_AC_stCodConf_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_To_AC_stCodConf_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Zustand ComWrapper_CAN_Rx_Signals_Get_KL_Zustand
		if(ComWrapper_INT28 == 2000){  ComWrapper_INT28 = physValReq;  *data =100;  ComWrapper_INT29 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter
		if(ComWrapper_INT30 == 2000){  ComWrapper_INT30 = physValReq;  *data =100;  ComWrapper_INT31 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Defrost_Aktiv ComWrapper_CAN_Rx_Signals_Get_KL_Defrost_Aktiv
		if(ComWrapper_INT32 == 2000){  ComWrapper_INT32 = physValReq;  *data =100;  ComWrapper_INT33 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_ACmax_Aktiv ComWrapper_CAN_Rx_Signals_Get_KL_ACmax_Aktiv
		if(ComWrapper_INT34 == 2000){  ComWrapper_INT34 = physValReq;  *data =100;  ComWrapper_INT35 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_ECO_Aktiv ComWrapper_CAN_Rx_Signals_Get_KL_ECO_Aktiv
		if(ComWrapper_INT36 == 2000){  ComWrapper_INT36 = physValReq;  *data =100; return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Status_Klimastil ComWrapper_CAN_Rx_Signals_Get_KL_Status_Klimastil
		if(ComWrapper_INT37 == 2000){  ComWrapper_INT37 = physValReq;  *data =100;  ComWrapper_INT38 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Kundeneingriff_Geblaese ComWrapper_CAN_Rx_Signals_Get_KL_Kundeneingriff_Geblaese
		if(ComWrapper_INT39 == 2000){  ComWrapper_INT39 = physValReq;  *data =100;  ComWrapper_INT40 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Umluft_Taste ComWrapper_CAN_Rx_Signals_Get_KL_Umluft_Taste
		if(ComWrapper_INT41 == 2000){  ComWrapper_INT41 = physValReq;  *data =100;  ComWrapper_INT42 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_ECO_PRO_Aktiv ComWrapper_CAN_Rx_Signals_Get_KL_ECO_PRO_Aktiv
		if(ComWrapper_INT43 == 2000){  ComWrapper_INT43 = physValReq;  *data =100;  ComWrapper_INT44 = *data;  return 0;}

if (RTE_E_OK == comWrapperReturnValue)  --> TRUE

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl
		if(ComWrapper_INT45 == 2000){  ComWrapper_INT45 = physValReq;  *data =100;  ComWrapper_INT46 = *data;  return 0;}

		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr
		if(ComWrapper_INT47 == 2000){  ComWrapper_INT47 = physValReq;  *data =100;  ComWrapper_INT48 = *data;  return 0;}

if ((RTE_E_OK == comWrapperReturnValue) || (RTE_E_OK == comWrapperReturnValue2))

		#define Rte_Write_AC_AC_stCodConf_VW Rte_Write_SWC_Com_AC_AC_stCodConf_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT28:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT29:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT30:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT31:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT32:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT33:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT34:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT35:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT36:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT37:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT38:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT39:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT40:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT41:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT42:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT43:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT44:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT45:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT46:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT47:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT48:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT28:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT29:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT30:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT31:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT32:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT33:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT34:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT35:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT36:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT37:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT38:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT39:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT40:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT41:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT42:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT43:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT44:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT45:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT46:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT47:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT48:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_AC_AC_stCodConf_VW:64512
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_To_AC_stCodConf_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Zustand
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_AC_Schalter
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Defrost_Aktiv
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_ACmax_Aktiv
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_ECO_Aktiv
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Status_Klimastil
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Kundeneingriff_Geblaese
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Umluft_Taste
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_ECO_PRO_Aktiv
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hl
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_KL_Temp_Soll_hr
  SWC_Com.c.SWC_Com_RxProcessing_To_AC_stCodConf_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_To_Veh_bT15_VW:

-- Test Case: SWC_Com_RxProcessing_To_Veh_bT15_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_To_Veh_bT15_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_To_Veh_bT15_VW.001
TEST.NOTES:
Seq & Probepoints

		#define Rte_Call_BSW_Com_BSW_Com_Get_Ignition_State BSW_Com_BSW_Com_Get_Ignition_State

		#define Rte_Write_Veh_Veh_bT15_VW Rte_Write_SWC_Com_Veh_Veh_bT15_VW
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:BSW_Com.<<GLOBAL>>.BSW_Com_IgnitionState:BSW_Com_IgnitionOff
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Veh_Veh_bT15_VW:100
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Veh_Veh_bT15_VW:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_To_Veh_bT15_VW
  BSW_Com.c.BSW_Com_Get_Ignition_State
  SWC_Com.c.SWC_Com_RxProcessing_To_Veh_bT15_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW:

-- Test Case: SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW
#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Jahr ComWrapper_CAN_Rx_Signals_Get_UH_Jahr
if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}

if (RTE_E_OK == comWrapperReturnValue)

#define Rte_Write_TmeEcu_TmeEcu_tiYear_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiYear_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_tiYear_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Jahr
  SWC_Com.c.SWC_Com_RxProcessing_UH_Jahr_To_TmeEcu_tiYear_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW:

-- Test Case: SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Minute ComWrapper_CAN_Rx_Signals_Get_UH_Minute
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_TmeEcu_TmeEcu_tiMinute_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiMinute_VW
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Minute_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)916, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Minute_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)916, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:916
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Minute
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Minute ComWrapper_CAN_Rx_Signals_Get_UH_Minute
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_TmeEcu_TmeEcu_tiMinute_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiMinute_VW
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Minute_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)916, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Minute_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)916, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:916
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_tiMinute_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Minute
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Minute_To_TmeEcu_tiMinute_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW:

-- Test Case: SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Monat ComWrapper_CAN_Rx_Signals_Get_UH_Monat
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_TmeEcu_TmeEcu_tiMonth_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiMonth_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Monat_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)917, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) ) ----------------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Monat_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)917, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:917
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Monat
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Monat ComWrapper_CAN_Rx_Signals_Get_UH_Monat
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
if (RTE_E_OK == comWrapperReturnValue)  ----------------> TRUE
				
				#define Rte_Write_TmeEcu_TmeEcu_tiMonth_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiMonth_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Monat_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)917, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
else if( ( RTE_E_ComWrapper_CAN_Rx_Signals_COM_ERROR_VALUE   == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE    == comWrapperReturnValue) ||
				( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue) )
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Monat_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)917, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:917
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_tiMonth_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Monat
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Monat_To_TmeEcu_tiMonth_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW:

-- Test Case: SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Sekunde ComWrapper_CAN_Rx_Signals_Get_UH_Sekunde
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_TmeEcu_TmeEcu_tiSec_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiSec_VW
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Sekunde_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)918, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)  ----> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Sekunde_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)918, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:918
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Sekunde
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Sekunde ComWrapper_CAN_Rx_Signals_Get_UH_Sekunde
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				
	if (RTE_E_OK == comWrapperReturnValue)    ----> TRUE
				
				#define Rte_Write_TmeEcu_TmeEcu_tiSec_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiSec_VW
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Sekunde_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)918, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Sekunde_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)918, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:918
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_tiSec_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Sekunde
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Sekunde_To_TmeEcu_tiSec_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW:

-- Test Case: SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Stunde ComWrapper_CAN_Rx_Signals_Get_UH_Stunde
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_TmeEcu_TmeEcu_tiHour_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiHour_VW
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Stunde_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)919, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Stunde_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)919, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:919
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Stunde
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Stunde ComWrapper_CAN_Rx_Signals_Get_UH_Stunde
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 32;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_TmeEcu_TmeEcu_tiHour_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiHour_VW
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Stunde_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)919, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if (RTE_E_ComWrapper_CAN_Rx_Signals_COM_INVALID_VALUE == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Stunde_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)919, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:919
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_tiHour_VW:100
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Stunde
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Stunde_To_TmeEcu_tiHour_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW:

-- Test Case: SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Tag ComWrapper_CAN_Rx_Signals_Get_UH_Tag
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				
				#define Rte_Write_TmeEcu_TmeEcu_tiDay_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiDay_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Tag_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)920, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue) -----------> TRUE
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Tag_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)920, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:920
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREFAILED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Tag
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW

				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_UH_Tag ComWrapper_CAN_Rx_Signals_Get_UH_Tag
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue) -----------> TRUE
				
				#define Rte_Write_TmeEcu_TmeEcu_tiDay_VW Rte_Write_SWC_Com_TmeEcu_TmeEcu_tiDay_VW
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Tag_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)920, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else if( RTE_E_ComWrapper_CAN_Rx_Signals_COM_INIT_VALUE == comWrapperReturnValue)
				
				#define Rte_Call_Event_SWC_Com_INVALID_VALUE_SIG_UH_Tag_SetEventStatus(arg1) (Xlock_SetEventStatus((Xlock_EventIdType)920, arg1))
				if(XCLOCK_INT3 == 2000){  XCLOCK_INT3 = EventId;  XCLOCK_INT4 = EventStatus;  return 0;}
				
	else
				{
				/* Nothing to do */
				}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT3:920
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.XCLOCK_INT4:MACRO=DEM_EVENT_STATUS_PREPASSED
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_TmeEcu_TmeEcu_tiMonth_VW:0
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_UH_Tag
  Xlock.c.Xlock_SetEventStatus
  SWC_Com.c.SWC_Com_RxProcessing_UH_Tag_To_TmeEcu_tiDay_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW:

-- Test Case: SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_VIN_7 ComWrapper_CAN_Rx_Signals_Get_VIN_7
		if(ComWrapper_INT95 == 2000){  ComWrapper_INT95 = physValReq;  *data =1;   return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_Veh_Veh_noCodId7_VW Rte_Write_SWC_Com_Veh_Veh_noCodId7_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT95:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT95:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Veh_Veh_noCodId7_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_VIN_7
  SWC_Com.c.SWC_Com_RxProcessing_VIN_7_To_Veh_noCodId7_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW:

-- Test Case: SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW
		#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_VIN_8 ComWrapper_CAN_Rx_Signals_Get_VIN_8
		if(ComWrapper_INT96 == 2000){  ComWrapper_INT96 = physValReq;  *data =1;   return 0;}

if (RTE_E_OK == comWrapperReturnValue)

		#define Rte_Write_Veh_Veh_noCodId8_VW Rte_Write_SWC_Com_Veh_Veh_noCodId8_VW

else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT96:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT96:MACRO=TRUE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_Veh_Veh_noCodId8_VW:1
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_VIN_8
  SWC_Com.c.SWC_Com_RxProcessing_VIN_8_To_Veh_noCodId8_VW
TEST.END_FLOW
TEST.END


SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW:

-- Test Case: SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW
TEST.NEW
TEST.NAME:SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_VS_VD_zu_ver ComWrapper_CAN_Rx_Signals_Get_VS_VD_zu_ver
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =100; return 0;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if (RTE_E_OK == comWrapperReturnValue)
				#define Rte_Write_ConvTop_ConvTop_bLockCls_VW Rte_Write_SWC_Com_ConvTop_ConvTop_bLockCls_VW
				
	else
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_ConvTop_ConvTop_bLockCls_VW:2
TEST.FLOW
  SWC_Com.c.SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_VS_VD_zu_ver
  SWC_Com.c.SWC_Com_RxProcessing_VS_VD_zu_ver_To_ConvTop_bLockCls_VW
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing:

-- Test Case: SWC_Com_TxProcessing.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing.001
TEST.NOTES:
Seq for SWC_Com_TxProcessing
			
			#define Rte_Read_SWC_Com_TmeFim_TmeFim_stCodSigVldOut1_VW(data) (*(data) = Rte_Xlock_FunctionLocking_Xlock_TmeFim_TmeFim_stCodSigVldOut1_VW, ((Std_ReturnType)RTE_E_OK))
			#define Rte_Read_SWC_Com_TmeFim_TmeFim_stCodSigVldOut2_VW(data) (*(data) = Rte_Xlock_FunctionLocking_Xlock_TmeFim_TmeFim_stCodSigVldOut2_VW, ((Std_ReturnType)RTE_E_OK))
			#define Rte_Read_SWC_Com_TmeFim_TmeFim_stCodCpntAvlCoCir_VW(data) (*(data) = Rte_Xlock_FunctionLocking_Xlock_TmeFim_TmeFim_stCodCpntAvlCoCir_VW, ((Std_ReturnType)RTE_E_OK))
			#define Rte_Read_SWC_Com_TmeObdIf_TmeObdIf_stHeatCirMonOkEl_VW(data) (*(data) = Rte_Xlock_ErrorReporting_Xlock_TmeObdIf_TmeObdIf_stHeatCirMonOkEl_VW, ((Std_ReturnType)RTE_E_OK))
			#define Rte_Read_SWC_Com_TmeObdIf_TmeObdIf_stHeatCirMonOkPlaus_VW(data) (*(data) = Rte_Xlock_ErrorReporting_Xlock_TmeObdIf_TmeObdIf_stHeatCirMonOkPlaus_VW, ((Std_ReturnType)RTE_E_OK))
			
			
			SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT1 == 2000){ VECTORCAST_INT1 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT2 == 2000){ VECTORCAST_INT2 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler();
			if(VECTORCAST_INT3 == 2000){ VECTORCAST_INT3 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort();
			if(VECTORCAST_INT4 == 2000){ VECTORCAST_INT4 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo();
			if(VECTORCAST_INT5 == 2000){ VECTORCAST_INT5 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT6 == 2000){ VECTORCAST_INT6 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen();
			if(VECTORCAST_INT7 == 2000){ VECTORCAST_INT7 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort(TmeFim_stCodSigVldOut2_VW);
			if(VECTORCAST_INT8 == 2000){ VECTORCAST_INT8 = TmeFim_stCodSigVldOut2_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT9 == 2000){ VECTORCAST_INT9 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT10 == 2000){ VECTORCAST_INT10 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT11 == 2000){ VECTORCAST_INT11 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT12 == 2000){ VECTORCAST_INT12 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT13 == 2000){ VECTORCAST_INT13 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT14 == 2000){ VECTORCAST_INT14 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT15 == 2000){ VECTORCAST_INT15 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen(TmeFim.stCodSigVldOut1_VW);
			if(VECTORCAST_INT16 == 2000){ VECTORCAST_INT16 = TmeFim.stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf(TmeFim.stCodSigVldOut1_VW);
			if(VECTORCAST_INT17 == 2000){ VECTORCAST_INT17 = TmeFim.stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info(TmeFim.stCodSigVldOut1_VW);
			if(VECTORCAST_INT18 == 2000){ VECTORCAST_INT18 = TmeFim.stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf(TmeFim.stCodSigVldOut1_VW);
			if(VECTORCAST_INT19 == 2000){ VECTORCAST_INT19 = TmeFim.stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio();
			if(VECTORCAST_INT20 == 2000){ VECTORCAST_INT20 = 1; return 0;}
			
			
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1();
			if(VECTORCAST_INT37 == 2000){ VECTORCAST_INT37 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT21 == 2000){ VECTORCAST_INT21 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TME_Waermebilanz_Status(TmeFim_stCodSigVldOut1_VW, TmeObdIf_stHeatCirMonOkEl_VW, TmeObdIf_stHeatCirMonOkPlaus_VW);
			if(VECTORCAST_INT22 == 2000){ VECTORCAST_INT22 = TmeFim_stCodSigVldOut1_VW; VECTORCAST_INT23 = TmeObdIf_stHeatCirMonOkEl_VW; VECTORCAST_INT24 = TmeObdIf_stHeatCirMonOkPlaus_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf();
			if(VECTORCAST_INT25 == 2000){ VECTORCAST_INT25 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf();
			if(VECTORCAST_INT26 == 2000){ VECTORCAST_INT26 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf();
			if(VECTORCAST_INT27 == 2000){ VECTORCAST_INT27 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW();
			if(VECTORCAST_INT28 == 2000){ VECTORCAST_INT28 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf();
			if(VECTORCAST_INT29 == 2000){ VECTORCAST_INT29 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl();
			if(VECTORCAST_INT30 == 2000){ VECTORCAST_INT30 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl();
			if(VECTORCAST_INT31 == 2000){ VECTORCAST_INT31 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT32 == 2000){ VECTORCAST_INT32 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Berechnung();
			if(VECTORCAST_INT33 == 2000){ VECTORCAST_INT33 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition();
			if(VECTORCAST_INT34 == 2000){ VECTORCAST_INT34 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT35 == 2000){ VECTORCAST_INT35 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TME_NT_Kreis_Status(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT36 == 2000){ VECTORCAST_INT36 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TME_Status_KL(TmeFim_stCodSigVldOut1_VW);
			if(VECTORCAST_INT40 == 2000){ VECTORCAST_INT40 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TME_Fehler_ElWaPu1(TmeFim_stCodCpntAvlCoCir_VW);
			if(VECTORCAST_INT41 == 2000){ VECTORCAST_INT41 = TmeFim_stCodCpntAvlCoCir_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status();
			if(VECTORCAST_INT42 == 2000){ VECTORCAST_INT42 = 1; return 0;}
			
			SWC_Com_TxProcessing_TME_Klimaleistung();
			if(VECTORCAST_INT43 == 2000){ VECTORCAST_INT43 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom(TmeFim_stCodSigVldOut2_VW);
			if(VECTORCAST_INT44 == 2000){ VECTORCAST_INT44 = TmeFim_stCodSigVldOut2_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom(TmeFim_stCodSigVldOut2_VW);
			if(VECTORCAST_INT45 == 2000){ VECTORCAST_INT45 = TmeFim_stCodSigVldOut2_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom(TmeFim_stCodSigVldOut2_VW);
			if(VECTORCAST_INT46 == 2000){ VECTORCAST_INT46 = TmeFim_stCodSigVldOut2_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1();
			if(VECTORCAST_INT47 == 2000){ VECTORCAST_INT47 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2();
			if(VECTORCAST_INT48 == 2000){ VECTORCAST_INT48 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3();
			if(VECTORCAST_INT49 == 2000){ VECTORCAST_INT49 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1();
			if(VECTORCAST_INT50 == 2000){ VECTORCAST_INT50 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2();
			if(VECTORCAST_INT51 == 2000){ VECTORCAST_INT51 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3();
			if(VECTORCAST_INT52 == 2000){ VECTORCAST_INT52 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1();
			if(VECTORCAST_INT53 == 2000){ VECTORCAST_INT53 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2();
			if(VECTORCAST_INT54 == 2000){ VECTORCAST_INT54 = 1; return 0;}
			
			
			SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3();
			if(VECTORCAST_INT60 == 2000){ VECTORCAST_INT60 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1();
			if(VECTORCAST_INT61 == 2000){ VECTORCAST_INT61 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2();
			if(VECTORCAST_INT62 == 2000){ VECTORCAST_INT62 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3();
			if(VECTORCAST_INT63 == 2000){ VECTORCAST_INT63 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1();
			if(VECTORCAST_INT64 == 2000){ VECTORCAST_INT64 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2();
			if(VECTORCAST_INT65 == 2000){ VECTORCAST_INT65 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3();
			if(VECTORCAST_INT66 == 2000){ VECTORCAST_INT66 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1();
			if(VECTORCAST_INT67 == 2000){ VECTORCAST_INT67 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2();
			if(VECTORCAST_INT68 == 2000){ VECTORCAST_INT68 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3();
			if(VECTORCAST_INT69 == 2000){ VECTORCAST_INT69 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1();
			if(VECTORCAST_INT70 == 2000){ VECTORCAST_INT70 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2();
			if(VECTORCAST_INT71 == 2000){ VECTORCAST_INT71 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3();
			if(VECTORCAST_INT72 == 2000){ VECTORCAST_INT72 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1();
			if(VECTORCAST_INT73 == 2000){ VECTORCAST_INT73 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2();
			if(VECTORCAST_INT74 == 2000){ VECTORCAST_INT74 = 1; return 0;}
			
			
			
			
			SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3();
			if(ComWrapper_INT10 == 2000){ ComWrapper_INT10 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp();
			if(ComWrapper_INT11 == 2000){ ComWrapper_INT11 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz();
			if(ComWrapper_INT12 == 2000){ ComWrapper_INT12 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status(TmeFim_stCodSigVldOut1_VW);
			if(ComWrapper_INT13 == 2000){ ComWrapper_INT13 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2(TmeFim_stCodSigVldOut2_VW);
			if(ComWrapper_INT14 == 2000){ ComWrapper_INT14 = TmeFim_stCodSigVldOut2_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen(TmeFim_stCodSigVldOut1_VW);
			if(ComWrapper_INT15 == 2000){ ComWrapper_INT15 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement(TmeFim_stCodSigVldOut1_VW);
			if(ComWrapper_INT16 == 2000){ ComWrapper_INT16 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie(TmeFim_stCodSigVldOut1_VW);
			if(ComWrapper_INT17 == 2000){ ComWrapper_INT17 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond(TmeFim_stCodSigVldOut1_VW);
			if(ComWrapper_INT18 == 2000){ ComWrapper_INT18 = TmeFim_stCodSigVldOut1_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb();
			if(ComWrapper_INT19 == 2000){ ComWrapper_INT19 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status();
			if(ComWrapper_INT20 == 2000){ ComWrapper_INT20 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst();
			if(ComWrapper_INT21 == 2000){ ComWrapper_INT21 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC();
			if(ComWrapper_INT22 == 2000){ ComWrapper_INT22 = 1; return 0;}
			
			SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT(TmeFim_stCodCpntAvlCoCir_VW);
			if(ComWrapper_INT23 == 2000){ ComWrapper_INT23 = TmeFim_stCodCpntAvlCoCir_VW; return 0;}
			
			SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp();
			if(ComWrapper_INT24 == 2000){ ComWrapper_INT24 = 1; return 0;}
			
			
			SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum();
			if(ComWrapper_INT30 == 2000){ ComWrapper_INT30 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv();
			if(ComWrapper_INT31 == 2000){ ComWrapper_INT31 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung();
			if(ComWrapper_INT32 == 2000){ ComWrapper_INT32 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit();
			if(ComWrapper_INT33 == 2000){ ComWrapper_INT33 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED();
			if(ComWrapper_INT34 == 2000){ ComWrapper_INT34 = 1; return 0;}
			
			SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv();
			if(ComWrapper_INT35 == 2000){ ComWrapper_INT35 = 1; return 0;}
			
			SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung();
			if(ComWrapper_INT36 == 2000){ ComWrapper_INT36 = 1; return 0;}
			
			SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer();
			if(ComWrapper_INT37 == 2000){ ComWrapper_INT37 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status();
			if(ComWrapper_INT38 == 2000){ ComWrapper_INT38 = 1; return 0;}
			
			SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM(TmeFim_stCodSigVldOut1_VW, TmeFim_stCodCpntAvlCoCir_VW);
			if(ComWrapper_INT39 == 2000){ ComWrapper_INT39 = TmeFim_stCodSigVldOut1_VW; ComWrapper_INT40 = TmeFim_stCodCpntAvlCoCir_VW; return 0;}
			
			SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk();
			if(ComWrapper_INT41 == 2000){ ComWrapper_INT41 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv();
			if(ComWrapper_INT42 == 2000){ ComWrapper_INT42 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung();
			if(ComWrapper_INT43 == 2000){ ComWrapper_INT43 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT();
			if(ComWrapper_INT44 == 2000){ ComWrapper_INT44 = 1; return 0;}
			
			SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM(TmeFim_stCodSigVldOut2_VW);
			if(ComWrapper_INT45 == 2000){ ComWrapper_INT45 = TmeFim_stCodSigVldOut2_VW; return 0;}
			
			
			SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count();
			if(ComWrapper_INT50 == 2000){ ComWrapper_INT50 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count();
			if(ComWrapper_INT51 == 2000){ ComWrapper_INT51 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count();
			if(ComWrapper_INT52 == 2000){ ComWrapper_INT52 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count();
			if(ComWrapper_INT53 == 2000){ ComWrapper_INT53 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut();
			if(ComWrapper_INT54 == 2000){ ComWrapper_INT54 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut();
			if(ComWrapper_INT55 == 2000){ ComWrapper_INT55 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus();
			if(ComWrapper_INT56 == 2000){ ComWrapper_INT56 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus();
			if(ComWrapper_INT57 == 2000){ ComWrapper_INT57 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus();
			if(ComWrapper_INT58 == 2000){ ComWrapper_INT58 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus();
			if(ComWrapper_INT59 == 2000){ ComWrapper_INT59 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode();
			if(ComWrapper_INT60 == 2000){ ComWrapper_INT60 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe();
			if(ComWrapper_INT61 == 2000){ ComWrapper_INT61 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit();
			if(ComWrapper_INT62 == 2000){ ComWrapper_INT62 = 1; return 0;}
			
			SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE(TmeFim_stCodSigVldOut1_VW);
			if(ComWrapper_INT63 == 2000){ ComWrapper_INT63 = TmeFim_stCodSigVldOut1_VW; return 0;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT20:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT21:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT22:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT23:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT24:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT25:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT26:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT27:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT28:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT29:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT30:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT31:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT32:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT33:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT34:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT35:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT36:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT37:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT40:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT41:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT42:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT43:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT44:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT45:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT46:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT47:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT48:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT49:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT50:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT51:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT52:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT53:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT54:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT60:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT61:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT62:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT63:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT64:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT65:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT66:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT67:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT68:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT69:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT70:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT71:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT72:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT73:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT74:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT10:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT11:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT13:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT14:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT15:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT16:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT17:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT18:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT19:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT20:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT21:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT22:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT23:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT24:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT30:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT31:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT32:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT33:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT34:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT35:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT36:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT37:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT38:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT39:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT40:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT41:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT42:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT43:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT44:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT45:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT50:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT51:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT52:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT53:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT54:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT55:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT56:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT57:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT58:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT61:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT62:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT63:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime40MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime80MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime100MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime200MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_LoadSharingMsgCycletime500MS:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_FunctionLocking_Xlock_TmeFim_TmeFim_stCodCpntAvlCoCir_VW:12
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_FunctionLocking_Xlock_TmeFim_TmeFim_stCodSigVldOut1_VW:10
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_FunctionLocking_Xlock_TmeFim_TmeFim_stCodSigVldOut2_VW:11
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_ErrorReporting_Xlock_TmeObdIf_TmeObdIf_stHeatCirMonOkEl_VW:13
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_ErrorReporting_Xlock_TmeObdIf_TmeObdIf_stHeatCirMonOkPlaus_VW:14
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT1:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT4:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT5:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT6:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT7:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT8:11
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT9:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT10:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT11:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT12:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT13:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT14:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT15:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT16:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT17:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT18:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT19:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT20:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT21:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT22:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT23:13
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT24:14
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT25:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT26:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT27:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT28:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT29:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT30:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT31:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT32:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT33:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT34:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT35:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT36:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT37:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT40:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT41:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT42:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT43:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT44:11
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT45:11
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT46:11
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT47:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT48:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT49:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT50:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT51:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT52:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT53:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT54:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT60:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT61:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT62:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT63:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT64:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT65:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT66:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT67:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT68:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT69:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT70:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT71:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT72:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT73:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT74:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT10:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT11:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT12:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT13:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT14:11
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT15:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT16:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT17:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT18:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT19:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT20:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT21:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT22:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT23:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT24:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT30:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT31:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT32:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT33:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT34:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT35:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT36:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT37:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT38:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT39:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT40:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT41:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT42:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT43:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT44:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT45:11
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT50:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT51:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT52:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT53:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT54:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT55:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT56:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT57:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT58:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT59:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT60:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT61:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT62:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT63:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl
  SWC_Com.c.SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Berechnung
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll
  SWC_Com.c.SWC_Com_TxProcessing_TME_NT_Kreis_Status
  SWC_Com.c.SWC_Com_TxProcessing_TME_Status_KL
  SWC_Com.c.SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
  SWC_Com.c.SWC_Com_TxProcessing_TME_Klimaleistung
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv
  SWC_Com.c.SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer
  SWC_Com.c.SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
  SWC_Com.c.SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut
  SWC_Com.c.SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus
  SWC_Com.c.SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus
  SWC_Com.c.SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus
  SWC_Com.c.SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus
  SWC_Com.c.SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit
  SWC_Com.c.SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
  SWC_Com.c.SWC_Com_TxProcessing
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT:

-- Test Case: SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT
			
			#define Rte_Read_TmeSensor_CoCir_CoCir_tCoChilBattOut_VW Rte_Read_SWC_Com_TmeSensor_CoCir_CoCir_tCoChilBattOut_VW
			
	if( RTE_E_OK == Rte_Read_TmeSensor_CoCir_CoCir_tCoChilBattOut_VW( &SWC_Com_AppSig_CoCir_tCoChilBattOut_VW ))
			
		if( SWC_COM_FIM_COCIR_TCOCHILBATTOUT_VW_BIT_MASK == (TmeFim_stCodCpntAvlCoCir_VW & SWC_COM_FIM_COCIR_TCOCHILBATTOUT_VW_BIT_MASK ) )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Kuehlmittel_Temp_Pumpe1_tNT ComWrapper_CAN_Tx_Signals_Set_TME_Kuehlmittel_Temp_Pumpe1_tNT
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SensorActuatorAppIf_CoCir_CoCir_tCoChilBattOut_VW:2000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT.TmeFim_stCodCpntAvlCoCir_VW:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=CxFF_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Kuehlmittel_Temp_Pumpe1_tNT
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoChilBattOut_VW_To_TME_Kuehlmittel_Temp_Pumpe1_tNT
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM:

-- Test Case: SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
				
				#define Rte_Read_TmeSensor_CoCir_CoCir_tCoCmbEngIn_VW Rte_Read_SWC_Com_TmeSensor_CoCir_CoCir_tCoCmbEngIn_VW
				
	if (SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 1) == TRUE)  ---> TRUE
				if( RTE_E_OK == Rte_Read_TmeSensor_CoCir_CoCir_tCoCmbEngIn_VW( &SWC_Com_AppSig_CoCir_tCoCmbEngIn_VW ))  ---> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SensorActuatorAppIf_CoCir_CoCir_tCoCmbEngIn_VW:200
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM.TmeFim_stCodSigVldOut1_VW:2
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM.TmeFim_stCodCpntAvlCoCir_VW:2
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:255
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
			
			#define Rte_Read_TmeSensor_CoCir_CoCir_tCoCmbEngIn_VW Rte_Read_SWC_Com_TmeSensor_CoCir_CoCir_tCoCmbEngIn_VW
			
	if (SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 1) == TRUE)
		if( RTE_E_OK == Rte_Read_TmeSensor_CoCir_CoCir_tCoCmbEngIn_VW( &SWC_Com_AppSig_CoCir_tCoCmbEngIn_VW ))
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else    ---> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SensorActuatorAppIf_CoCir_CoCir_tCoCmbEngIn_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=CxFF_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Temperatur_Ruecklauf_VKM
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoCmbEngIn_VW_To_TME_Temperatur_Ruecklauf_VKM
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM:

-- Test Case: SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM
			
			#define Rte_Read_TmeSensor_CoCir_CoCir_tCoRadIn_VW Rte_Read_SWC_Com_TmeSensor_CoCir_CoCir_tCoRadIn_VW
			
	if( RTE_E_OK == Rte_Read_TmeSensor_CoCir_CoCir_tCoRadIn_VW( &SWC_Com_AppSig_CoCir_tCoRadIn_VW ))
			
			#define Rte_Call_DatasetVector_TemperaturSensor_Data_GetSensorType DatasetVector_TemperaturSensor_Data_GetSensorType
			
		if(sensorType != 0)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_nach_EM ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_nach_EM
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeEcu_stCodPar2_C_VW:0
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SensorActuatorAppIf_CoCir_CoCir_tCoRadIn_VW:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=CxFD_Nicht_verbaut
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM
  DatasetVector_RteIf.c.DatasetVector_TemperaturSensor3_Data_GetSensorType
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_nach_EM
  SWC_Com.c.SWC_Com_TxProcessing_CoCir_tCoRadIn_VW_To_TME_Temp_KM_nach_EM
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv:

-- Test Case: SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv
			
			#define Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_stHeatAcv_VW Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_stHeatAcv_VW
			
	if( Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_stHeatAcv_VW( &SWC_Com_AppSig_ParkHtCtl_stHeatAcv_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_STH_aktiv ComWrapper_CAN_Tx_Signals_Set_TME_STH_aktiv
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_PhAppl_PP_ParkHtCtl_ParkHtCtl_stHeatAcv_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx3_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_STH_aktiv
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_stHeatAcv_VW_To_TME_STH_aktiv
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung:

-- Test Case: SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung
			
			#define Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_stRlsParkHeat_VW Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_stRlsParkHeat_VW
			
	if( Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_stRlsParkHeat_VW( &SWC_Com_AppSig_ParkHtCtl_stRlsParkHeat_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_STH_Ansteuerung ComWrapper_CAN_Tx_Signals_Set_TME_STH_Ansteuerung
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_PhAppl_PP_ParkHtCtl_ParkHtCtl_stRlsParkHeat_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx3_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_STH_Ansteuerung
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_stRlsParkHeat_VW_To_TME_STH_Ansteuerung
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer:

-- Test Case: SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer
			
			#define Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_tiSelPreCdnCab_VW Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_tiSelPreCdnCab_VW
			
	if( Rte_Read_SWC_Com_ParkHtCtl_ParkHtCtl_tiSelPreCdnCab_VW( &SWC_Com_AppSig_ParkHtCtl_tiSelPreCdnCab_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Betriebsdauer ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Betriebsdauer
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_PhAppl_PP_ParkHtCtl_ParkHtCtl_tiSelPreCdnCab_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:60
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Betriebsdauer
  SWC_Com.c.SWC_Com_TxProcessing_ParkHtCtl_tiSelPreCdnCab_VW_To_TME_Kond_Innen_Betriebsdauer
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TME_Fehler_ElWaPu1:

-- Test Case: SWC_Com_TxProcessing_TME_Fehler_ElWaPu1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Fehler_ElWaPu1.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodCpntAvlCoCir_VW, 2))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1 ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else  ----------------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1 ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Fehler_ElWaPu1.TmeFim_stCodCpntAvlCoCir_VW:2
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1
  SWC_Com.c.SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TME_Fehler_ElWaPu1.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Fehler_ElWaPu1.002
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodCpntAvlCoCir_VW, 2)) ----------------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1 ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1 ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_rPmpHeatCir_VW:0
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Fehler_ElWaPu1.TmeFim_stCodCpntAvlCoCir_VW:4
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Fehler_ElWaPu1
  SWC_Com.c.SWC_Com_TxProcessing_TME_Fehler_ElWaPu1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TME_Klimaleistung:

-- Test Case: SWC_Com_TxProcessing_TME_Klimaleistung.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Klimaleistung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Klimaleistung.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Klimaleistung
				
				#define Rte_Call_DatasetVector_Data_Get_Lin_HasHvEkk4 DatasetVector_Data_Get_Lin_HasHvEkk4
				
	if(isEkk4Enabled == TRUE) -----------> TRUE
				
				#define Rte_Call_ComWrapper_LIN_Rx_Signals_Get_EKK4_INPUT_CURRENT ComWrapper_LIN_Rx_Signals_Get_EKK4_INPUT_CURRENT
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 10;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
				#define Rte_Call_ComWrapper_LIN_Rx_Signals_Get_EKK4_HIGH_VOLTAGE ComWrapper_LIN_Rx_Signals_Get_EKK4_HIGH_VOLTAGE
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 10;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				else if(ComWrapper_INT135 == 2003){  ComWrapper_INT135 = physValReq;  *data =100; return 10;}
				
	if((retVal == RTE_E_OK) && (retVal2 == RTE_E_OK))  ---------> FALSE
				
	else if((retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INIT_VALUE) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_ERROR_VALUE) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INVALID_VALUE) ||
				(retVal2 == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INIT_VALUE) ||
				(retVal2 == RTE_E_ComWrapper_LIN_Rx_Signals_COM_ERROR_VALUE) ||
				(retVal2 == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INVALID_VALUE))  ---------> FALSE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				else if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValSet; ComWrapper_INT137 = data;   return 0;}
				
	else
				
				#define Rte_Call_ComWrapper_LIN_Rx_Signals_Get_EKK2_PWR_CONS ComWrapper_LIN_Rx_Signals_Get_EKK2_PWR_CONS
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 10;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if((retVal == RTE_E_OK) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_ERROR_VALUE) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INIT_VALUE) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INVALID_VALUE))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2003
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeEcu_stCodPar6_C_VW:4
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:0x7E
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Klimaleistung
  DatasetVector_RteIf.c.DatasetVector_Data_Get_Lin_HasHvEkk4
  ComWrapper.c.ComWrapper_LIN_Rx_Signals_Get_EKK4_INPUT_CURRENT
  ComWrapper.c.ComWrapper_LIN_Rx_Signals_Get_EKK4_HIGH_VOLTAGE
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung
  SWC_Com.c.SWC_Com_TxProcessing_TME_Klimaleistung
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TME_Klimaleistung.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Klimaleistung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Klimaleistung.002
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Klimaleistung
				
				#define Rte_Call_DatasetVector_Data_Get_Lin_HasHvEkk4 DatasetVector_Data_Get_Lin_HasHvEkk4
				
	if(isEkk4Enabled == TRUE)
				
				#define Rte_Call_ComWrapper_LIN_Rx_Signals_Get_EKK4_INPUT_CURRENT ComWrapper_LIN_Rx_Signals_Get_EKK4_INPUT_CURRENT
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 10;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
				#define Rte_Call_ComWrapper_LIN_Rx_Signals_Get_EKK4_HIGH_VOLTAGE ComWrapper_LIN_Rx_Signals_Get_EKK4_HIGH_VOLTAGE
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 10;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				else if(ComWrapper_INT135 == 2003){  ComWrapper_INT135 = physValReq;  *data =100; return 10;}
				
	if((retVal == RTE_E_OK) && (retVal2 == RTE_E_OK))
				
	else if((retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INIT_VALUE) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_ERROR_VALUE) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INVALID_VALUE) ||
				(retVal2 == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INIT_VALUE) ||
				(retVal2 == RTE_E_ComWrapper_LIN_Rx_Signals_COM_ERROR_VALUE) ||
				(retVal2 == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INVALID_VALUE))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				else if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValSet; ComWrapper_INT137 = data;   return 0;}
				
	else  -----------> TRUE
				
				#define Rte_Call_ComWrapper_LIN_Rx_Signals_Get_EKK2_PWR_CONS ComWrapper_LIN_Rx_Signals_Get_EKK2_PWR_CONS
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValReq;  *data =100;   return 0;}
				else if(ComWrapper_INT133 == 2001){  ComWrapper_INT133 = physValReq;  *data =2;   return 10;}
				else if(ComWrapper_INT133 == 2002){  ComWrapper_INT133 = physValReq;  *data =100; return 8;}
				
	if((retVal == RTE_E_OK) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_ERROR_VALUE) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INIT_VALUE) ||
				(retVal == RTE_E_ComWrapper_LIN_Rx_Signals_COM_INVALID_VALUE))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				else if(ComWrapper_INT136 == 2000){  ComWrapper_INT136 = physValSet; ComWrapper_INT137 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeEcu_stCodPar6_C_VW:3
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT137:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Klimaleistung
  DatasetVector_RteIf.c.DatasetVector_Data_Get_Lin_HasHvEkk4
  ComWrapper.c.ComWrapper_LIN_Rx_Signals_Get_EKK2_PWR_CONS
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Klimaleistung
  SWC_Com.c.SWC_Com_TxProcessing_TME_Klimaleistung
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TME_NT_Kreis_Status:

-- Test Case: SWC_Com_TxProcessing_TME_NT_Kreis_Status.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_NT_Kreis_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_NT_Kreis_Status.001
TEST.NOTES:
				Seq & Probepoints for
				SWC_Com_TxProcessing_TME_NT_Kreis_Status
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 27))  -----> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_NT_Kreis_Status ComWrapper_CAN_Tx_Signals_Set_TME_NT_Kreis_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_NT_Kreis_Status.TmeFim_stCodSigVldOut1_VW:134217728
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx0_kein_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_NT_Kreis_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_NT_Kreis_Status
  SWC_Com.c.SWC_Com_TxProcessing_TME_NT_Kreis_Status
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TME_Status_KL:

-- Test Case: SWC_Com_TxProcessing_TME_Status_KL.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Status_KL
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Status_KL.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TME_Status_KL
			
	if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 28)) &&
			(TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 31)))  ----------> TRUE
			
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Status_KL ComWrapper_CAN_Tx_Signals_Set_TME_Status_KL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Status_KL.TmeFim_stCodSigVldOut1_VW:2415919104
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx0_kein_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Status_KL
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Status_KL
  SWC_Com.c.SWC_Com_TxProcessing_TME_Status_KL
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk:

-- Test Case: SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk
				
				#define Rte_Call_ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ
				if(ComWrapper_INT133 == 2004){  ComWrapper_INT133 = physValReq;  *data =2;   return 0;}
				
				
	if(RTE_E_OK == comWrapperReturnValue) ---> TRUE
		if((Cx2_US_OBD == SWC_Com_CanSig_MO_OBD_Typ) || (Cx1_EOBD == SWC_Com_CanSig_MO_OBD_Typ)) ---> TRUE
			if(RTE_E_OK == Rte_Call_TME_E_TmeDiag_stTsCoCmbEngOut_VW_GetEventStatus(&CurEventStatus))  ---> TRUE
				
				#define Rte_Call_TME_E_TmeDiag_stTsCoCmbEngOut_VW_GetEventStatus(arg1) (Xlock_GetEventStatus((Xlock_EventIdType)1238, arg1))
				if(VECTORCAST_INT2 == 2000){  VECTORCAST_INT2 = EventId;  *UDSStatusByte = 64; VECTORCAST_INT3 = *UDSStatusByte;  return 0;}
				else if(VECTORCAST_INT2 == 2001){  VECTORCAST_INT2 = EventId; *UDSStatusByte = 1;  VECTORCAST_INT3 = *UDSStatusByte;  return 0;}
				
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Status_Kuehlmittel_Tmp_CrChk ComWrapper_CAN_Tx_Signals_Set_TME_Status_Kuehlmittel_Tmp_CrChk
				else if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValSet; ComWrapper_INT136 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2004
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT2:1238
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.VECTORCAST_INT3:64
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=Cx0_Pruefung_nicht_erfolgt
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk
  ComWrapper.c.ComWrapper_CAN_Rx_Signals_Get_MO_OBD_Typ
  Xlock.c.Xlock_GetEventStatus
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Status_Kuehlmittel_Tmp_CrChk
  SWC_Com.c.SWC_Com_TxProcessing_TME_Status_Kuehlmittel_Tmp_CrChk
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TME_Waermebilanz_Status:

-- Test Case: SWC_Com_TxProcessing_TME_Waermebilanz_Status.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Waermebilanz_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Waermebilanz_Status.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Waermebilanz_Status
				
	if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkEl_VW, 8)) &&
				(FALSE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkPlaus_VW, 17)))   --------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkEl_VW, 8)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkPlaus_VW, 17)))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else if (FALSE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeFim_stCodSigVldOut1_VW:4194304
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeObdIf_stHeatCirMonOkEl_VW:256
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeObdIf_stHeatCirMonOkPlaus_VW:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx1_TP_TC_OBDI
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TME_Waermebilanz_Status.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Waermebilanz_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Waermebilanz_Status.002
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Waermebilanz_Status
				
	if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkEl_VW, 8)) &&
				(FALSE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkPlaus_VW, 17)))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkEl_VW, 8)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkPlaus_VW, 17)))     --------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else if (FALSE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeFim_stCodSigVldOut1_VW:4194304
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeObdIf_stHeatCirMonOkEl_VW:256
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeObdIf_stHeatCirMonOkPlaus_VW:131072
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx2_TP_TC_OBDII
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TME_Waermebilanz_Status.003
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Waermebilanz_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Waermebilanz_Status.003
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Waermebilanz_Status
				
	if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkEl_VW, 8)) &&
				(FALSE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkPlaus_VW, 17)))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkEl_VW, 8)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkPlaus_VW, 17)))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else if (FALSE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22))      --------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeFim_stCodSigVldOut1_VW:0
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeObdIf_stHeatCirMonOkEl_VW:256
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeObdIf_stHeatCirMonOkPlaus_VW:131072
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx3_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TME_Waermebilanz_Status.004
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TME_Waermebilanz_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TME_Waermebilanz_Status.004
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TME_Waermebilanz_Status
				
	if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkEl_VW, 8)) &&
				(FALSE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkPlaus_VW, 17)))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else if ((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkEl_VW, 8)) &&
				(TRUE == SWC_COM_GET_BIT(TmeObdIf_stHeatCirMonOkPlaus_VW, 17)))
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else if (FALSE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 22))      --------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeFim_stCodSigVldOut1_VW:4194304
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeObdIf_stHeatCirMonOkEl_VW:0
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TME_Waermebilanz_Status.TmeObdIf_stHeatCirMonOkPlaus_VW:131072
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx0_i_O_
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz_Status
  SWC_Com.c.SWC_Com_TxProcessing_TME_Waermebilanz_Status
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
			
			#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_bHeatCirSml_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_bHeatCirSml_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 9))  ----------> TRUE
			
		if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_bHeatCirSml_VW( &SWC_Com_AppSig_TmeCoc_bHeatCirSml_VW ) == RTE_E_OK )----------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_bHeatCirSml_VW:MACRO=TRUE
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen.TmeFim_stCodSigVldOut1_VW:512
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx3_Ventil_schliessen_oder_geschlossen
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen.002
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
				
				#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_bHeatCirSml_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_bHeatCirSml_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 9))
				
		if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_bHeatCirSml_VW( &SWC_Com_AppSig_TmeCoc_bHeatCirSml_VW ) == RTE_E_OK )
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else----------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_bHeatCirSml_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen.TmeFim_stCodSigVldOut1_VW:500
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx0_nicht_verfuegbar
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Absperrventil1_oeffnen
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_bHeatCirSml_VW_To_TME_Absperrventil1_oeffnen
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
				#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpBatt_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpBatt_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 10)) ----------> TRUE
		if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpBatt_VW( &SWC_Com_AppSig_TmeCoc_rPmpBatt_VW ) == RTE_E_OK )----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_rPmpBatt_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll.TmeFim_stCodSigVldOut1_VW:1024
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:55
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
				#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpBatt_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpBatt_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 10))
		if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpBatt_VW( &SWC_Com_AppSig_TmeCoc_rPmpBatt_VW ) == RTE_E_OK )
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_rPmpBatt_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll.TmeFim_stCodSigVldOut1_VW:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx7F_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe1_tNT_Soll
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpBatt_VW_To_TME_PWM_Pumpe1_tNT_Soll
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst
				
				#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW
				
	if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW( &SWC_Com_AppSig_TmeCoc_rPmpHeatCir_VW ) == RTE_E_OK )
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Heizungspumpen_Anst ComWrapper_CAN_Tx_Signals_Set_TME_Heizungspumpen_Anst
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_rPmpHeatCir_VW:20
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:1
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.Rte_SWC_Com_MeasurementValuesRouting_Did490c_Value:1
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Heizungspumpen_Anst
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Heizungspumpen_Anst
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
				
				#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW
				
	if (Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW(&SWC_Com_AppSig_TmeCoc_rPmpHeatCir_VW) == RTE_E_OK) ------------> TRUE
				
		if (SWC_Com_AppSig_TmeCoc_rPmpHeatCir_VW > 0u)------------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_rPmpHeatCir_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
			
			#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW
			
	if (Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpHeatCir_VW(&SWC_Com_AppSig_TmeCoc_rPmpHeatCir_VW) == RTE_E_OK)
			
		if (SWC_Com_AppSig_TmeCoc_rPmpHeatCir_VW > 0u)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else  ------------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_rPmpHeatCir_VW:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pumpe1_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_rPmpHeatCir_VW_To_TME_Pumpe1_Status
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz
			
			#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmAbsnCmbEng_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmAbsnCmbEng_VW
			
	if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmAbsnCmbEng_VW( &SWC_Com_AppSig_TmeCoc_stThmAbsnCmbEng_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_stThmAbsnCmbEng_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Waermebilanz
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_stThmAbsnCmbEng_VW_To_TME_Waermebilanz
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
				
				#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmMngInfo_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmMngInfo_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 13))
				
		if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmMngInfo_VW( &SWC_Com_AppSig_TmeCoc_stThmMngInfo_VW ) == RTE_E_OK )
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_stThmMngInfo_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement.TmeFim_stCodSigVldOut1_VW:8192
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:3
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
			
			#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmMngInfo_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmMngInfo_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 13))
			
		if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_stThmMngInfo_VW( &SWC_Com_AppSig_TmeCoc_stThmMngInfo_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_stThmMngInfo_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement.TmeFim_stCodSigVldOut1_VW:8100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx0_keine_Freigabe_TMM_max_Heizbedarf
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Thermomanagement
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_stThmMngInfo_VW_To_TME_Thermomanagement
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp
			
			#define Rte_Read_SWC_Com_TmeCoc_TmeCoc_tiAftRunPmpHeatCir_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_tiAftRunPmpHeatCir_VW
			
	if( Rte_Read_SWC_Com_TmeCoc_TmeCoc_tiAftRunPmpHeatCir_VW( &SWC_Com_AppSig_TmeCoc_tiAftRunPmpHeatCir_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Nachlaufzeit_Heizp ComWrapper_CAN_Tx_Signals_Set_TME_Nachlaufzeit_Heizp
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_tiAftRunPmpHeatCir_VW:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:63
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Nachlaufzeit_Heizp
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_tiAftRunPmpHeatCir_VW_To_TME_Nachlaufzeit_Heizp
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
			
			#define Rte_Read_TmeCoc_TmeCoc_volfActElm1_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_volfActElm1_VW
			
	if ((boolean)(SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 5)) == TRUE) -----------> TRUE
			
		if (Rte_Read_TmeCoc_TmeCoc_volfActElm1_VW(&volfActElm1_VW) == RTE_E_OK)  -----------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_volfActElm1_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom.TmeFim_stCodSigVldOut2_VW:32
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:20
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
			
			#define Rte_Read_TmeCoc_TmeCoc_volfActElm1_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_volfActElm1_VW
			
if ((boolean)(SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 5)) == TRUE)
			
	if (Rte_Read_TmeCoc_TmeCoc_volfActElm1_VW(&volfActElm1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else -----------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx1F_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_EM1_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm1_VW_To_TME_EM1_IstVolumenstrom
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
			
			#define Rte_Read_TmeCoc_TmeCoc_volfActElm2_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_volfActElm2_VW
			
if ((boolean)(SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 6)) == TRUE) --------> TRUE
			
	if (Rte_Read_TmeCoc_TmeCoc_volfActElm2_VW(&volfActElm2_VW) == RTE_E_OK) --------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_volfActElm2_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom.TmeFim_stCodSigVldOut2_VW:64
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:20
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
			
			#define Rte_Read_TmeCoc_TmeCoc_volfActElm2_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_volfActElm2_VW
			
if ((boolean)(SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 6)) == TRUE)
			
	if (Rte_Read_TmeCoc_TmeCoc_volfActElm2_VW(&volfActElm2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else --------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx1F_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_EM2_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm2_VW_To_TME_EM2_IstVolumenstrom
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom:

-- Test Case: SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
				
				#define Rte_Read_TmeCoc_TmeCoc_volfActElm3_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_volfActElm3_VW
				
	if ((boolean)(SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 7)) == TRUE)  -----------> TRUE
				
		if (Rte_Read_TmeCoc_TmeCoc_volfActElm3_VW(&volfActElm3_VW) == RTE_E_OK)  -----------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_volfActElm3_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom.TmeFim_stCodSigVldOut2_VW:128
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:20
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
			
			#define Rte_Read_TmeCoc_TmeCoc_volfActElm3_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_volfActElm3_VW
			
if ((boolean)(SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 7)) == TRUE)
			
	if (Rte_Read_TmeCoc_TmeCoc_volfActElm3_VW(&volfActElm3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else  -----------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx1F_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_EM3_IstVolumenstrom
  SWC_Com.c.SWC_Com_TxProcessing_TmeCoc_volfActElm3_VW_To_TME_EM3_IstVolumenstrom
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_stVenAcv_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_stVenAcv_VW
			
if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_stVenAcv_VW( &SWC_Com_AppSig_TmeCtl_stVenAcv_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_STL_aktiv ComWrapper_CAN_Tx_Signals_Set_TME_STL_aktiv
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_stVenAcv_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:3
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_STL_aktiv
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_TmeCtl_stVenAcv_VW_To_TME_STL_aktiv
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_bAcDispOn_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_bAcDispOn_VW
			
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_bAcDispOn_VW( &SWC_Com_AppSig_TmeCtl_bAcDispOn_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_AC_LED ComWrapper_CAN_Tx_Signals_Set_TME_AC_LED
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_bAcDispOn_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:200
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_AC_LED
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bAcDispOn_VW_To_TME_AC_LED
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_bConfAcCabPsbl_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_bConfAcCabPsbl_VW
			
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_bConfAcCabPsbl_VW( &SWC_Com_AppSig_TmeCtl_bConfAcCabPsbl_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Kbr_Innenraum ComWrapper_CAN_Tx_Signals_Set_TME_Kbr_Innenraum
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_bConfAcCabPsbl_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:200
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Kbr_Innenraum
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bConfAcCabPsbl_VW_To_TME_Kbr_Innenraum
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_bConfHeatPmpAcv_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_bConfHeatPmpAcv_VW
			
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_bConfHeatPmpAcv_VW( &SWC_Com_AppSig_TmeCtl_bConfHeatPmpAcv_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Waermepumpe_aktiv ComWrapper_CAN_Tx_Signals_Set_TME_Waermepumpe_aktiv
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_bConfHeatPmpAcv_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:200
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Waermepumpe_aktiv
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bConfHeatPmpAcv_VW_To_TME_Waermepumpe_aktiv
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsLvAuxHeat_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsLvAuxHeat_VW
			
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsLvAuxHeat_VW( &SWC_Com_AppSig_TmeCtl_bRlsLvAuxHeat_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Luft_PTC ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Luft_PTC
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_bRlsLvAuxHeat_VW:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx1_Freigabe
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Luft_PTC
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bRlsLvAuxHeat_VW_To_TME_Freigabe_Luft_PTC
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsPreCdnCab_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsPreCdnCab_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 11))  --------> TRUE
			
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsPreCdnCab_VW( &SWC_Com_AppSig_TmeCtl_bRlsPreCdnCab_VW ) == RTE_E_OK )--------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_bRlsPreCdnCab_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond.TmeFim_stCodSigVldOut1_VW:2048
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsPreCdnCab_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsPreCdnCab_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 11))  --------> TRUE
			
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_bRlsPreCdnCab_VW( &SWC_Com_AppSig_TmeCtl_bRlsPreCdnCab_VW ) == RTE_E_OK )--------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_bRlsPreCdnCab_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond.TmeFim_stCodSigVldOut1_VW:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:0x0
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Freigabe_Vorkond
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bRlsPreCdnCab_VW_To_TME_Freigabe_Vorkond
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_bWeakCmbEngStrtStopReq_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_bWeakCmbEngStrtStopReq_VW
			
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_bWeakCmbEngStrtStopReq_VW( &SWC_Com_AppSig_TmeCtl_bWeakCmbEngStrtStopReq_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info_Prio ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info_Prio
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_bWeakCmbEngStrtStopReq_VW:7
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info_Prio
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_bWeakCmbEngStrtStopReq_VW_To_TME_StartStopp_Info_Prio
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_stCmbEngStrtStopInfo_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_stCmbEngStrtStopInfo_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 12))  ------> TRUE
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_stCmbEngStrtStopInfo_VW( &SWC_Com_AppSig_TmeCtl_stCmbEngStrtStopInfo_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else  ------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_stCmbEngStrtStopInfo_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info.TmeFim_stCodSigVldOut1_VW:20
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx3_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_stCmbEngStrtStopInfo_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_stCmbEngStrtStopInfo_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 12))  ------> TRUE
	if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_stCmbEngStrtStopInfo_VW( &SWC_Com_AppSig_TmeCtl_stCmbEngStrtStopInfo_VW ) == RTE_E_OK ) ------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_stCmbEngStrtStopInfo_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info.TmeFim_stCodSigVldOut1_VW:4096
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:3
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_StartStopp_Info
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stCmbEngStrtStopInfo_VW_To_TME_StartStopp_Info
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Berechnung:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Berechnung.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Berechnung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Berechnung.001
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.END


SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition.001
TEST.NOTES:
Seq & Probepoints for
SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition

#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_stEcuRunReqReas_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_stEcuRunReqReas_VW

if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_stEcuRunReqReas_VW( &SWC_Com_AppSig_TmeCtl_stEcuRunReqReas_VW ) == RTE_E_OK )

#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_NM_TME_NM_aktiv_Vorkondition ComWrapper_CAN_Tx_Signals_Set_NM_TME_NM_aktiv_Vorkondition
if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_stEcuRunReqReas_VW:4
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_NM_TME_NM_aktiv_Vorkondition
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stEcuRunReqReas_VW_To_NM_TME_NM_aktiv_Vorkondition
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb
				
				#define Rte_Read_TmeCtl_TmeCtl_stPreCdnCabAcv_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_stPreCdnCabAcv_VW
				
	if( Rte_Read_TmeCtl_TmeCtl_stPreCdnCabAcv_VW( &SWC_Com_AppSig_TmeCtl_stPreCdnCabAcv_VW ) == RTE_E_OK )
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Betrieb ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Betrieb
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else    IMP: It is not possible to test this condition as Rte_Read always return RTE_E_OK
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Betrieb ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Betrieb
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_stPreCdnCabAcv_VW:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Betrieb
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAcv_VW_To_TME_Kond_Innen_Betrieb
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status
			
			#define Rte_Read_TmeCtl_TmeCtl_stPreCdnCabAvl_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_stPreCdnCabAvl_VW
			
	if( Rte_Read_TmeCtl_TmeCtl_stPreCdnCabAvl_VW( &SWC_Com_AppSig_TmeCtl_stPreCdnCabAvl_VW ) == RTE_E_OK ) ---------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Status ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else    IMP: It is not possible to test this condition as Rte_Read always return RTE_E_OK
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Status ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_stPreCdnCabAvl_VW:10
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Kond_Innen_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stPreCdnCabAvl_VW_To_TME_Kond_Innen_Status
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie:

-- Test Case: SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_stStgyPreCdnCab_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_stStgyPreCdnCab_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 14))  ----> TRUE
			
		if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_stStgyPreCdnCab_VW( &SWC_Com_AppSig_TmeCtl_stStgyPreCdnCab_VW ) == RTE_E_OK ) ----> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_stStgyPreCdnCab_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie.TmeFim_stCodSigVldOut1_VW:16384
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:101
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
			
			#define Rte_Read_SWC_Com_TmeCtl_TmeCtl_stStgyPreCdnCab_VW Rte_Read_SWC_Com_TmeCtl_TmeCtl_stStgyPreCdnCab_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 14))
			
		if( Rte_Read_SWC_Com_TmeCtl_TmeCtl_stStgyPreCdnCab_VW( &SWC_Com_AppSig_TmeCtl_stStgyPreCdnCab_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else ----> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCtl_PP_TmeCtl_TmeCtl_stStgyPreCdnCab_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie.TmeFim_stCodSigVldOut1_VW:16000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=CxF_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Heizstrategie
  SWC_Com.c.SWC_Com_TxProcessing_TmeCtl_stStgyPreCdnCab_VW_To_TME_Heizstrategie
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp:

-- Test Case: SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp
			
			#define Rte_Read_SWC_Com_TmeDiag_TmeDiag_bRadBliSpSuc_VW Rte_Read_SWC_Com_TmeDiag_TmeDiag_bRadBliSpSuc_VW
			
	if( Rte_Read_SWC_Com_TmeDiag_TmeDiag_bRadBliSpSuc_VW( &SWC_Com_AppSig_TmeDiag_bRadBliSpSuc_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_PosResp ComWrapper_CAN_Tx_Signals_Set_TME_SKE_PosResp
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeDiag_PP_TmeDiag_TmeDiag_bRadBliSpSuc_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_SKE_PosResp
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_bRadBliSpSuc_VW_To_TME_SKE_PosResp
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count:

-- Test Case: SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count
			
			#define Rte_Read_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW Rte_Read_SWC_Com_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW
			
	if (Rte_Read_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW(&stRadBliAcvOffCyc_bAct1Tmr1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer1_count ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer1_count
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeDiag_PP_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer1_count
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr1_VW_To_SKE1_AOCCT_timer1_count
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count:

-- Test Case: SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count
			#define Rte_Read_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW Rte_Read_SWC_Com_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW
			
	if (Rte_Read_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW(&stRadBliAcvOffCyc_bAct1Tmr2_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer2_count ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer2_count
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeDiag_PP_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer2_count
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct1Tmr2_VW_To_SKE1_AOCCT_timer2_count
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count:

-- Test Case: SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count
			#define Rte_Read_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW Rte_Read_SWC_Com_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW
			
	if (Rte_Read_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW(&stRadBliAcvOffCyc_bAct2Tmr1_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer1_count ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer1_count
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeDiag_PP_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer1_count
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr1_VW_To_SKE2_AOCCT_timer1_count
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count:

-- Test Case: SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count
		#define Rte_Read_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW Rte_Read_SWC_Com_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW
		
	if (Rte_Read_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW(&stRadBliAcvOffCyc_bAct2Tmr2_VW) == RTE_E_OK)
		#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer2_count ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer2_count
		if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeDiag_PP_TmeDiag_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer2_count
  SWC_Com.c.SWC_Com_TxProcessing_TmeDiag_stRadBliAcvOffCyc_bAct2Tmr2_VW_To_SKE2_AOCCT_timer2_count
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll:

-- Test Case: SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll
				
				#define Rte_Read_RP_TmeEcu_TmeEcu_bEnaPmp_VW Rte_Read_SWC_Com_TmeEcu_TmeEcu_bEnaPmp_VW
				
	if(RTE_E_OK == Rte_Read_RP_TmeEcu_TmeEcu_bEnaPmp_VW(&SWC_Com_AppSig_TmeEcu_bEnaPmp_VW)) ----------> TRUE
				
		if((TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW,0)) && (TRUE == SWC_Com_AppSig_TmeEcu_bEnaPmp_VW)) ----------> TRUE
				
				#define Rte_Read_TmeCoc_TmeCoc_rPmpCmbEng_VW Rte_Read_SWC_Com_TmeCoc_TmeCoc_rPmpCmbEng_VW
				
	if(RTE_E_OK == Rte_Read_TmeCoc_TmeCoc_rPmpCmbEng_VW( &SWC_Com_AppSig_TmeCoc_rPmpCmbEng_VW )) ----------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe2_HK_Soll ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe2_HK_Soll
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe2_HK_Soll ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe2_HK_Soll
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_SWC_A_RELAIS_SWC_A_RELAIS_TmeEcu_TmeEcu_bEnaPmp_VW:MACRO=TRUE
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeCoc_PP_TmeCoc_TmeCoc_rPmpCmbEng_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll.TmeFim_stCodSigVldOut1_VW:1
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:50
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_PWM_Pumpe2_HK_Soll
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_bEnaPmp_VW_To_TME_PWM_Pumpe2_HK_Soll
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut:

-- Test Case: SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut
			#define Rte_Call_DatasetVector_Data_Get_TmeEcu_stCodPar4_C_VW DatasetVector_Data_Get_TmeEcu_stCodPar4_C_VW
			
			if (Rte_Call_DatasetVector_Data_Get_TmeEcu_stCodPar4_C_VW(&stCodPar4_C_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer1_verbaut ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer1_verbaut
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer2_verbaut ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer2_verbaut
			if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValSet; ComWrapper_INT136 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeEcu_stCodPar4_C_VW:33554432
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut
  DatasetVector_RteIf.c.DatasetVector_Data_Get_TmeEcu_stCodPar4_C_VW
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer1_verbaut
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_timer2_verbaut
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE1_AOCCT_timer_verbaut
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut:

-- Test Case: SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut
			#define Rte_Call_DatasetVector_Data_Get_TmeEcu_stCodPar4_C_VW DatasetVector_Data_Get_TmeEcu_stCodPar4_C_VW
			
			if (Rte_Call_DatasetVector_Data_Get_TmeEcu_stCodPar4_C_VW(&stCodPar4_C_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer1_verbaut ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer1_verbaut
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer2_verbaut ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer2_verbaut
			if(ComWrapper_INT135 == 2000){  ComWrapper_INT135 = physValSet; ComWrapper_INT136 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:2000
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config:<<malloc 1>>
TEST.VALUE:DatasetVector_RteIf.<<GLOBAL>>.TmeDatasetVector_Config[0].TmeEcu_stCodPar4_C_VW:1024
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT135:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT136:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut
  DatasetVector_RteIf.c.DatasetVector_Data_Get_TmeEcu_stCodPar4_C_VW
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer1_verbaut
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_timer2_verbaut
  SWC_Com.c.SWC_Com_TxProcessing_TmeEcu_stCodPar4_C_VW_To_SKE2_AOCCT_timer_verbaut
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung:

-- Test Case: SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwr_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwr_VW
				
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 18))   ----------> TRUE
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwr_VW( &SWC_Com_AppSig_TmeEm_TmeEm_pwr_VW ) == RTE_E_OK )
		if( 12650u < SWC_Com_AppSig_TmeEm_TmeEm_pwr_VW )
				SWC_Com_CanSig_TME_IstLeistung = (253u);/*253 (RawVal) = 12650 (PhysVal)*/
		else
				SWC_Com_CanSig_TME_IstLeistung = (uint16)SWC_Com_AppSig_TmeEm_TmeEm_pwr_VW / 50;
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
	else
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwr_VW:12651
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung.TmeFim_stCodSigVldOut1_VW:262144
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:253
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwr_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwr_VW
				
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 18))
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwr_VW( &SWC_Com_AppSig_TmeEm_TmeEm_pwr_VW ) == RTE_E_OK )
		if( 12650u < SWC_Com_AppSig_TmeEm_TmeEm_pwr_VW )
				SWC_Com_CanSig_TME_IstLeistung = (253u);/*253 (RawVal) = 12650 (PhysVal)*/
		else
				SWC_Com_CanSig_TME_IstLeistung = (uint16)SWC_Com_AppSig_TmeEm_TmeEm_pwr_VW / 50;
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
	else       ----------> TRUE
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=CxFF_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_KL_IstLeistung
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_TmeEm_pwr_VW_To_TME_IstLeistung
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf
				
				#define Rte_Read_TmePrePrc_TmePrePrc_stCodConfAlwBattCdn_VW Rte_Read_SWC_Com_TmePrePrc_TmePrePrc_stCodConfAlwBattCdn_VW
				
	if(Rte_Read_TmePrePrc_TmePrePrc_stCodConfAlwBattCdn_VW(&stCodConfAlwBattCdn_VW) == RTE_E_OK)
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Batt_Kond_Verf ComWrapper_CAN_Tx_Signals_Set_TME_Batt_Kond_Verf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmePrePrc_PP_TmePrePrc_TmePrePrc_stCodConfAlwBattCdn_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Batt_Kond_Verf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_TmePrePrc_stCodConfAlwBattCdn_VW_To_TME_Batt_Kond_Verf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsCmftOvf_VW Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsCmftOvf_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 15))    ----------> TRUE
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsCmftOvf_VW( &SWC_Com_AppSig_TmeEm_bCnsCmftOvf_VW ) == RTE_E_OK )   ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_bCnsCmftOvf_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf.TmeFim_stCodSigVldOut1_VW:32768
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsCmftOvf_VW Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsCmftOvf_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 15))
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsCmftOvf_VW( &SWC_Com_AppSig_TmeEm_bCnsCmftOvf_VW ) == RTE_E_OK )
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else   ----------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_bCnsCmftOvf_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf.TmeFim_stCodSigVldOut1_VW:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsCmftOvf_VW_To_Thermo_Verbrauch_Innen_Ueberlauf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsThmOvf_VW Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsThmOvf_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 16)) ------> TRUE
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsThmOvf_VW( &SWC_Com_AppSig_TmeEm_bCnsThmOvf_VW ) == RTE_E_OK )------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_bCnsThmOvf_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf.TmeFim_stCodSigVldOut1_VW:65536
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsThmOvf_VW Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsThmOvf_VW
				
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 16))
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsThmOvf_VW( &SWC_Com_AppSig_TmeEm_bCnsThmOvf_VW ) == RTE_E_OK )
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
	else------> TRUE
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_bCnsThmOvf_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf.TmeFim_stCodSigVldOut1_VW:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsThmOvf_VW_To_Thermo_Verbrauch_BTL_Ueberlauf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsTotOvf_VW Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsTotOvf_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 6))  -----------> TRUE
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsTotOvf_VW( &SWC_Com_AppSig_TmeEm_bCnsTotOvf_VW ) == RTE_E_OK )
				SWC_Com_CanSig_TME_Verbrauch_gesamt_Ueberlauf = SWC_Com_AppSig_TmeEm_bCnsTotOvf_VW;
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
		else
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_bCnsTotOvf_VW:255
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf.TmeFim_stCodSigVldOut1_VW:64
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:255
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsTotOvf_VW Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsTotOvf_VW
				
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 6))
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_bCnsTotOvf_VW( &SWC_Com_AppSig_TmeEm_bCnsTotOvf_VW ) == RTE_E_OK )
				SWC_Com_CanSig_TME_Verbrauch_gesamt_Ueberlauf = SWC_Com_AppSig_TmeEm_bCnsTotOvf_VW;
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
	else  -----------> TRUE
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt_Ueberlauf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bCnsTotOvf_VW_To_TME_Verbrauch_gesamt_Ueberlauf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_bHvCpntReq_VW Rte_Read_SWC_Com_TmeEm_TmeEm_bHvCpntReq_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 17)) -------> TRUE
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_bHvCpntReq_VW( &SWC_Com_AppSig_TmeEm_bHvCpntReq_VW ) == RTE_E_OK )   -------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_bHvCpntReq_VW:MACRO=TRUE
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf.TmeFim_stCodSigVldOut1_VW:131072
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx2_HV_Netz_angefordert
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_bHvCpntReq_VW Rte_Read_SWC_Com_TmeEm_TmeEm_bHvCpntReq_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 17))
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_bHvCpntReq_VW( &SWC_Com_AppSig_TmeEm_bHvCpntReq_VW ) == RTE_E_OK )
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else   -------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_bHvCpntReq_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf.TmeFim_stCodSigVldOut1_VW:4096
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx3_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_HVEM_HV_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_bHvCpntReq_VW_To_TME_HVEM_HV_Anf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler:

-- Test Case: SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler
			
			#define Rte_Read_TmeEm_TmeEm_ctLdPlanResp_VW Rte_Read_SWC_Com_TmeEm_TmeEm_ctLdPlanResp_VW
			
if (Rte_Read_TmeEm_TmeEm_ctLdPlanResp_VW(&ctLdPlanResp_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_PlanAntw_Zaehler ComWrapper_CAN_Tx_Signals_Set_TME_PlanAntw_Zaehler
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_ctLdPlanResp_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_PlanAntw_Zaehler
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_ctLdPlanResp_VW_To_TME_PlanAntw_Zaehler
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf
			
			#define Rte_Read_TmeEm_TmeEm_noTrigCabPredSys_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigCabPredSys_VW
			
if (Rte_Read_TmeEm_TmeEm_noTrigCabPredSys_VW(&SWC_Com_AppSig_TmeEm_noTrigCabPredSys_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_System_Anf ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_System_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigCabPredSys_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_System_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigCabPredSys_VW_To_Thermo_Pred_Innen_System_Anf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigCabPred_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigCabPred_VW
			
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigCabPred_VW( &SWC_Com_AppSig_TmeEm_noTrigCabPred_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else     -------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigCabPred_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf.TmeFim_stCodSigVldOut1_VW:20
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=DT_Thermo_Pred_Innen_Kunde_Anf_LowerLimit
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigCabPred_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigCabPred_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 21))    -------> TRUE
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigCabPred_VW( &SWC_Com_AppSig_TmeEm_noTrigCabPred_VW ) == RTE_E_OK )    -------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigCabPred_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf.TmeFim_stCodSigVldOut1_VW:2097152
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:3
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_Innen_Kunde_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigCabPred_VW_To_Thermo_Pred_Innen_Kunde_Anf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredCmftCusDrvProg1_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredCmftCusDrvProg1_VW
			
		if (Rte_Read_TmeEm_TmeEm_noTrigPredCmftCusDrvProg1_VW(&noTrigPredCmftCusDrvProg1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP1 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP1
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigPredCmftCusDrvProg1_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg1_VW_To_TME_Pred_KlimaKunde_Anf_FP1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredCmftCusDrvProg2_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredCmftCusDrvProg2_VW
			
	if (Rte_Read_TmeEm_TmeEm_noTrigPredCmftCusDrvProg2_VW(&noTrigPredCmftCusDrvProg2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP2 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigPredCmftCusDrvProg2_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg2_VW_To_TME_Pred_KlimaKunde_Anf_FP2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredCmftCusDrvProg3_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredCmftCusDrvProg3_VW
			
		if (Rte_Read_TmeEm_TmeEm_noTrigPredCmftCusDrvProg3_VW(&noTrigPredCmftCusDrvProg3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP3 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP3
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigPredCmftCusDrvProg3_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaKunde_Anf_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftCusDrvProg3_VW_To_TME_Pred_KlimaKunde_Anf_FP3
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredCmftSysDrvProg1_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredCmftSysDrvProg1_VW
			
	if (Rte_Read_TmeEm_TmeEm_noTrigPredCmftSysDrvProg1_VW(&noTrigPredCmftSysDrvProg1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP1 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP1
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigPredCmftSysDrvProg1_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg1_VW_To_TME_Pred_KlimaSys_Anf_FP1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredCmftSysDrvProg2_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredCmftSysDrvProg2_VW
			
if (Rte_Read_TmeEm_TmeEm_noTrigPredCmftSysDrvProg2_VW(&noTrigPredCmftSysDrvProg2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP2 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigPredCmftSysDrvProg2_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg2_VW_To_TME_Pred_KlimaSys_Anf_FP2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredCmftSysDrvProg3_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredCmftSysDrvProg3_VW
			
	if (Rte_Read_TmeEm_TmeEm_noTrigPredCmftSysDrvProg3_VW(&noTrigPredCmftSysDrvProg3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP3 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP3
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigPredCmftSysDrvProg3_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_KlimaSys_Anf_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredCmftSysDrvProg3_VW_To_TME_Pred_KlimaSys_Anf_FP3
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredThmSysDrvProg1_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredThmSysDrvProg1_VW
			
	if (Rte_Read_TmeEm_TmeEm_noTrigPredThmSysDrvProg1_VW(&noTrigPredThmSysDrvProg1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP1 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP1
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:0
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg1_VW_To_TME_Pred_BTLSys_Anf_FP1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredThmSysDrvProg2_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredThmSysDrvProg2_VW
			
	if (Rte_Read_TmeEm_TmeEm_noTrigPredThmSysDrvProg2_VW(&noTrigPredThmSysDrvProg2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP2 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:0
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg2_VW_To_TME_Pred_BTLSys_Anf_FP2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredThmSysDrvProg3_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredThmSysDrvProg3_VW
			
	if (Rte_Read_TmeEm_TmeEm_noTrigPredThmSysDrvProg3_VW(&noTrigPredThmSysDrvProg3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP3 ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP3
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:0
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Pred_BTLSys_Anf_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSysDrvProg3_VW_To_TME_Pred_BTLSys_Anf_FP3
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf
			
			#define Rte_Read_TmeEm_TmeEm_noTrigPredThmSys_VW Rte_Read_SWC_Com_TmeEm_TmeEm_noTrigPredThmSys_VW
			
	if (Rte_Read_TmeEm_TmeEm_noTrigPredThmSys_VW(&noTrigPredThmSys_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_BTL_System_Anf ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_BTL_System_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_noTrigPredThmSys_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_BTL_System_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_noTrigPredThmSys_VW_To_TME_ThermoPred_BTL_System_Anf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit
			
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwrAbsnCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrAbsnCmft_VW
			
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwrAbsnCmft_VW( &SWC_Com_AppSig_TmeEm_pwrAbsnCmft_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Klima_Defizit ComWrapper_CAN_Tx_Signals_Set_TME_Klima_Defizit
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrAbsnCmft_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:200
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Klima_Defizit
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrAbsnCmft_VW_To_TME_Klima_Defizit
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1
			
			#define Rte_Read_TmeEm_TmeEm_pwrDynPredCmftDrvProg1_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmftDrvProg1_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrDynPredCmftDrvProg1_VW(&pwrDynPredCmftDrvProg1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP1 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP1
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredCmftDrvProg1_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg1_VW_To_TME_ThermoPred_P_dyn_Klima_FP1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2
			
			#define Rte_Read_TmeEm_TmeEm_pwrDynPredCmftDrvProg2_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmftDrvProg2_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrDynPredCmftDrvProg2_VW(&pwrDynPredCmftDrvProg2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP2 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredCmftDrvProg2_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg2_VW_To_TME_ThermoPred_P_dyn_Klima_FP2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3
			
			#define Rte_Read_TmeEm_TmeEm_pwrDynPredCmftDrvProg3_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmftDrvProg3_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrDynPredCmftDrvProg3_VW(&pwrDynPredCmftDrvProg3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP3 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP3
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredCmftDrvProg3_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Klima_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmftDrvProg3_VW_To_TME_ThermoPred_P_dyn_Klima_FP3
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmft_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 19)) ------------> TRUE
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmft_VW( &SWC_Com_AppSig_TmeEm_pwrDynPredCmft_VW ) == RTE_E_OK ) ------------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredCmft_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen.TmeFim_stCodSigVldOut1_VW:524288
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmft_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 19))
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredCmft_VW( &SWC_Com_AppSig_TmeEm_pwrDynPredCmft_VW ) == RTE_E_OK )
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else ------------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredCmft_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen.TmeFim_stCodSigVldOut1_VW:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2047
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_dyn_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredCmft_VW_To_Thermo_Pred_P_dyn_Innen
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1
			
			#define Rte_Read_TmeEm_TmeEm_pwrDynPredThmDrvProg1_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredThmDrvProg1_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrDynPredThmDrvProg1_VW(&pwrDynPredThmDrvProg1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP1 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP1
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredThmDrvProg1_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg1_VW_To_TME_ThermoPred_P_dyn_BTL_FP1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2
			
			#define Rte_Read_TmeEm_TmeEm_pwrDynPredThmDrvProg2_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredThmDrvProg2_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrDynPredThmDrvProg2_VW(&pwrDynPredThmDrvProg2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP2 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredThmDrvProg2_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg2_VW_To_TME_ThermoPred_P_dyn_BTL_FP2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3
			
			#define Rte_Read_TmeEm_TmeEm_pwrDynPredThmDrvProg3_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredThmDrvProg3_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrDynPredThmDrvProg3_VW(&pwrDynPredThmDrvProg3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP3 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP3
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredThmDrvProg3_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_BTL_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThmDrvProg3_VW_To_TME_ThermoPred_P_dyn_BTL_FP3
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl
			
			#define Rte_Read_TmeEm_TmeEm_pwrDynPredThm_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrDynPredThm_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrDynPredThm_VW(&pwrDynPredThm_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Btl ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Btl
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrDynPredThm_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_dyn_Btl
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrDynPredThm_VW_To_TME_ThermoPred_P_dyn_Btl
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwrReqCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrReqCmft_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 8)) --------------> TRUE
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwrReqCmft_VW( &SWC_Com_TmeEm_pwrReqCmft_VW) == RTE_E_OK ) --------------> TRUE
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrReqCmft_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort.TmeFim_stCodSigVldOut2_VW:256
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwrReqCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrReqCmft_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 8))
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwrReqCmft_VW( &SWC_Com_TmeEm_pwrReqCmft_VW) == RTE_E_OK )
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else --------------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrReqCmft_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=CxFF_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Leistungsanf_Komfort
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrReqCmft_VW_To_TME_Leistungsanf_Komfort
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1
				
				#define Rte_Read_TmeEm_TmeEm_pwrStatPredCmftDrvProg1_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmftDrvProg1_VW
				
		if (Rte_Read_TmeEm_TmeEm_pwrStatPredCmftDrvProg1_VW(&pwrStatPredCmftDrvProg1_VW) == RTE_E_OK)
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP1 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP1
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrStatPredCmftDrvProg1_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg1_VW_To_TME_ThermoPred_P_stat_Klima_FP1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2
			
			#define Rte_Read_TmeEm_TmeEm_pwrStatPredCmftDrvProg2_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmftDrvProg2_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrStatPredCmftDrvProg2_VW(&pwrStatPredCmftDrvProg2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP2 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrStatPredCmftDrvProg2_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg2_VW_To_TME_ThermoPred_P_stat_Klima_FP2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3
			
			#define Rte_Read_TmeEm_TmeEm_pwrStatPredCmftDrvProg3_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmftDrvProg3_VW
			
	if (Rte_Read_TmeEm_TmeEm_pwrStatPredCmftDrvProg3_VW(&pwrStatPredCmftDrvProg3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP3 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP3
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrStatPredCmftDrvProg3_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:10
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_P_stat_Klima_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmftDrvProg3_VW_To_TME_ThermoPred_P_stat_Klima_FP3
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen:

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmft_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 20)) ----------> TRUE
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmft_VW( &SWC_Com_AppSig_TmeEm_pwrStatPredCmft_VW ) == RTE_E_OK ) ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrStatPredCmft_VW:MACRO=TRUE
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen.TmeFim_stCodSigVldOut1_VW:1048576
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmft_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 20))
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_pwrStatPredCmft_VW( &SWC_Com_AppSig_TmeEm_pwrStatPredCmft_VW ) == RTE_E_OK )
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else ----------> TRUE
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_pwrStatPredCmft_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen.TmeFim_stCodSigVldOut1_VW:4096
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx7FF_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_P_stat_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_pwrStatPredCmft_VW_To_Thermo_Pred_P_stat_Innen
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen
				#define Rte_Read_SWC_Com_TmeEm_TmeEm_tiCalcPreCdnCab_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiCalcPreCdnCab_VW
				
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_tiCalcPreCdnCab_VW( &SWC_Com_AppSig_TmeEm_tiCalcPreCdnCab_VW ) == RTE_E_OK )
		if( (61u) < SWC_Com_AppSig_TmeEm_tiCalcPreCdnCab_VW )
				SWC_Com_CanSig_TME_Dauer_Vorkond_innen = (61u);
		else
				SWC_Com_CanSig_TME_Dauer_Vorkond_innen = (uint8) SWC_Com_AppSig_TmeEm_tiCalcPreCdnCab_VW;
				SWC_COM_DEV_TX_ERROR_DETECTION_START();
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Dauer_Vorkond_innen ComWrapper_CAN_Tx_Signals_Set_TME_Dauer_Vorkond_innen
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				SWC_COM_DEV_TX_ERROR_DETECTION_END();
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiCalcPreCdnCab_VW:255
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:61
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Dauer_Vorkond_innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiCalcPreCdnCab_VW_To_TME_Dauer_Vorkond_innen
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1
			
			#define Rte_Read_TmeEm_TmeEm_tiDynPredCmftDrvProg1_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmftDrvProg1_VW
			
	if (Rte_Read_TmeEm_TmeEm_tiDynPredCmftDrvProg1_VW(&tiDynPredCmftDrvProg1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP1 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP1
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredCmftDrvProg1_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg1_VW_To_TME_ThermoPred_T_dyn_Klima_FP1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2
			
			#define Rte_Read_TmeEm_TmeEm_tiDynPredCmftDrvProg2_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmftDrvProg2_VW
			
	if (Rte_Read_TmeEm_TmeEm_tiDynPredCmftDrvProg2_VW(&tiDynPredCmftDrvProg2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP2 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredCmftDrvProg2_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg2_VW_To_TME_ThermoPred_T_dyn_Klima_FP2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3
			
			#define Rte_Read_TmeEm_TmeEm_tiDynPredCmftDrvProg3_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmftDrvProg3_VW
			
	if (Rte_Read_TmeEm_TmeEm_tiDynPredCmftDrvProg3_VW(&tiDynPredCmftDrvProg3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP3 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP3
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredCmftDrvProg3_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Klima_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmftDrvProg3_VW_To_TME_ThermoPred_T_dyn_Klima_FP3
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmft_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 23)) -----------> TRUE
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmft_VW( &SWC_Com_AppSig_TmeEm_tiDynPredCmft_VW ) == RTE_E_OK ) -----------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredCmft_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen.TmeFim_stCodSigVldOut1_VW:8388608
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmft_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 23))
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredCmft_VW( &SWC_Com_AppSig_TmeEm_tiDynPredCmft_VW ) == RTE_E_OK )
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else -----------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredCmft_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen.TmeFim_stCodSigVldOut1_VW:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=CxFF_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Pred_T_dyn_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredCmft_VW_To_Thermo_Pred_T_dyn_Innen
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1
			
			#define Rte_Read_TmeEm_TmeEm_tiDynPredThmDrvProg1_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredThmDrvProg1_VW
			
	if (Rte_Read_TmeEm_TmeEm_tiDynPredThmDrvProg1_VW(&tiDynPredThmDrvProg1_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP1 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP1
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredThmDrvProg1_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP1
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg1_VW_To_TME_ThermoPred_T_dyn_BTL_FP1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2
			
			#define Rte_Read_TmeEm_TmeEm_tiDynPredThmDrvProg2_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredThmDrvProg2_VW
			
		if (Rte_Read_TmeEm_TmeEm_tiDynPredThmDrvProg2_VW(&tiDynPredThmDrvProg2_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP2 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredThmDrvProg2_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP2
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg2_VW_To_TME_ThermoPred_T_dyn_BTL_FP2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3
			
			#define Rte_Read_TmeEm_TmeEm_tiDynPredThmDrvProg3_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredThmDrvProg3_VW
			
		if (Rte_Read_TmeEm_TmeEm_tiDynPredThmDrvProg3_VW(&tiDynPredThmDrvProg3_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP3 ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP3
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredThmDrvProg3_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_BTL_FP3
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThmDrvProg3_VW_To_TME_ThermoPred_T_dyn_BTL_FP3
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl:

-- Test Case: SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl
			
			#define Rte_Read_TmeEm_TmeEm_tiDynPredThm_VW Rte_Read_SWC_Com_TmeEm_TmeEm_tiDynPredThm_VW
			
		if (Rte_Read_TmeEm_TmeEm_tiDynPredThm_VW(&tiDynPredThm_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Btl ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Btl
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_tiDynPredThm_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_ThermoPred_T_dyn_Btl
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_tiDynPredThm_VW_To_TME_ThermoPred_T_dyn_Btl
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort:

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort
			
			#define Rte_Read_TmeEm_TmeEm_wCnsCmftLd_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsCmftLd_VW
			
		if (Rte_Read_TmeEm_TmeEm_wCnsCmftLd_VW(&wCnsCmftLd_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Energie_Komfort ComWrapper_CAN_Tx_Signals_Set_TME_Energie_Komfort
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsCmftLd_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:20
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Energie_Komfort
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsCmftLd_VW_To_TME_Energie_Komfort
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen:

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsCmft_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 24)) --------> TRUE
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsCmft_VW( &SWC_Com_AppSig_TmeEm_wCnsCmft_VW ) == RTE_E_OK ) --------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsCmft_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen.TmeFim_stCodSigVldOut1_VW:16777216
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsCmft_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsCmft_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 24))
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsCmft_VW( &SWC_Com_AppSig_TmeEm_wCnsCmft_VW ) == RTE_E_OK )
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
	else --------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsCmft_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen.TmeFim_stCodSigVldOut1_VW:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=DT_Thermo_Verbrauch_Innen_UpperLimit
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_Innen
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsCmft_VW_To_Thermo_Verbrauch_Innen
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf:

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf
			
			#define Rte_Read_TmeEm_TmeEm_wCnsPreCdnCab_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsPreCdnCab_VW
			
	if (Rte_Read_TmeEm_TmeEm_wCnsPreCdnCab_VW(&klHvEnergieAnf) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_KL_HV_Energie_Anf ComWrapper_CAN_Tx_Signals_Set_KL_HV_Energie_Anf
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsPreCdnCab_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_KL_HV_Energie_Anf
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsPreCdnCab_VW_To_KL_HV_Energie_Anf
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo:

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo
			
			#define Rte_Read_TmeEm_TmeEm_wCnsThmLd_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsThmLd_VW
			
	if (Rte_Read_TmeEm_TmeEm_wCnsThmLd_VW(&wCnsThmLd_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Energie_Thermo ComWrapper_CAN_Tx_Signals_Set_TME_Energie_Thermo
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsThmLd_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:20
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Energie_Thermo
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsThmLd_VW_To_TME_Energie_Thermo
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL:

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsThm_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsThm_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 25)) ---------> TRUE
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsThm_VW( &SWC_Com_AppSig_TmeEm_wCnsThm_VW ) == RTE_E_OK )---------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsThm_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL.TmeFim_stCodSigVldOut1_VW:33554432
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsThm_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsThm_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 25))
		if( Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsThm_VW( &SWC_Com_AppSig_TmeEm_wCnsThm_VW ) == RTE_E_OK )
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else---------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsThm_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL.TmeFim_stCodSigVldOut1_VW:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=DT_Thermo_Verbrauch_BTL_UpperLimit
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_Thermo_Verbrauch_BTL
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsThm_VW_To_Thermo_Verbrauch_BTL
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt:

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsTot_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsTot_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 5)
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsTot_VW( &SWC_Com_AppSig_TmeEm_wCnsTot_VW ) == RTE_E_OK )
		if( (4095u) < SWC_Com_AppSig_TmeEm_wCnsTot_VW )
			SWC_Com_CanSig_TME_Verbrauch_gesamt = (4095u);
		else
			SWC_Com_CanSig_TME_Verbrauch_gesamt = (uint16)SWC_Com_AppSig_TmeEm_wCnsTot_VW;
			SWC_COM_DEV_TX_ERROR_DETECTION_START();
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			SWC_COM_DEV_TX_ERROR_DETECTION_END();
	else        -----> TRUE
			SWC_COM_DEV_TX_ERROR_DETECTION_START();
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			SWC_COM_DEV_TX_ERROR_DETECTION_END();
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsTot_VW:5000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=DT_TME_Verbrauch_gesamt_UpperLimit
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
			#define Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsTot_VW Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsTot_VW
			
if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 5))        -----> TRUE
	if( Rte_Read_SWC_Com_TmeEm_TmeEm_wCnsTot_VW( &SWC_Com_AppSig_TmeEm_wCnsTot_VW ) == RTE_E_OK )      -----> TRUE
		if( (4095u) < SWC_Com_AppSig_TmeEm_wCnsTot_VW )
			SWC_Com_CanSig_TME_Verbrauch_gesamt = (4095u);
		else
			SWC_Com_CanSig_TME_Verbrauch_gesamt = (uint16)SWC_Com_AppSig_TmeEm_wCnsTot_VW;
			SWC_COM_DEV_TX_ERROR_DETECTION_START();
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			SWC_COM_DEV_TX_ERROR_DETECTION_END();
	else   
			SWC_COM_DEV_TX_ERROR_DETECTION_START();
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			SWC_COM_DEV_TX_ERROR_DETECTION_END();
			
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeEm_PP_TmeEm_TmeEm_wCnsTot_VW:5000
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt.TmeFim_stCodSigVldOut1_VW:32
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:4095
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Verbrauch_gesamt
  SWC_Com.c.SWC_Com_TxProcessing_TmeEm_wCnsTot_VW_To_TME_Verbrauch_gesamt
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL:

-- Test Case: SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
			
			#define Rte_Read_TmeFan_TmeFan_rFanRaw_VW Rte_Read_SWC_Com_TmeFan_TmeFan_rFanRaw_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 26)) ----------> TRUE
			
		if (Rte_Read_TmeFan_TmeFan_rFanRaw_VW(&SWC_Com_AppSig_TmeFan_rFanRaw_VW) == RTE_E_OK)  ----------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeFan_PP_TmeFan_TmeFan_rFanRaw_VW:4
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL.TmeFim_stCodSigVldOut1_VW:67108864
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL
  SWC_Com.c.SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL.002
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
				
				#define Rte_Read_TmeFan_TmeFan_rFanRaw_VW Rte_Read_SWC_Com_TmeFan_TmeFan_rFanRaw_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 26))
				
		if (Rte_Read_TmeFan_TmeFan_rFanRaw_VW(&SWC_Com_AppSig_TmeFan_rFanRaw_VW) == RTE_E_OK)
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else ----------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeFan_PP_TmeFan_TmeFan_rFanRaw_VW:4
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL.TmeFim_stCodSigVldOut1_VW:67
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx7F_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL
  SWC_Com.c.SWC_Com_TxProcessing_TmeFan_rFanRaw_VW_To_TME_Anf_KL
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus:

-- Test Case: SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus.001
TEST.NOTES:

Seq & Probepoints for SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus
			#define Rte_Read_TmeFim_TmeFim_stCodSigVldOut2_VW Rte_Read_SWC_Com_TmeFim_TmeFim_stCodSigVldOut2_VW
			
	if (Rte_Read_TmeFim_TmeFim_stCodSigVldOut2_VW(&stCodSigVldOut2_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_fehlerstatus ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_fehlerstatus
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_FunctionLocking_Xlock_TmeFim_TmeFim_stCodSigVldOut2_VW:8
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_fehlerstatus
  SWC_Com.c.SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE1_AOCCT_fehlerstatus
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus:

-- Test Case: SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus
			#define Rte_Read_TmeFim_TmeFim_stCodSigVldOut2_VW Rte_Read_SWC_Com_TmeFim_TmeFim_stCodSigVldOut2_VW
			
	if (Rte_Read_TmeFim_TmeFim_stCodSigVldOut2_VW(&stCodSigVldOut2_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_fehlerstatus ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_fehlerstatus
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_FunctionLocking_Xlock_TmeFim_TmeFim_stCodSigVldOut2_VW:16
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_fehlerstatus
  SWC_Com.c.SWC_Com_TxProcessing_TmeFim_stCodSigVldOut2_VW_To_SKE2_AOCCT_fehlerstatus
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus:

-- Test Case: SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus
			#define Rte_Read_TmeObdIf_TmeObdIf_stCoCirMonOkEl_VW Rte_Read_SWC_Com_TmeObdIf_TmeObdIf_stCoCirMonOkEl_VW
			
	if (Rte_Read_TmeObdIf_TmeObdIf_stCoCirMonOkEl_VW(&stCoCirMonOkEl_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_teststatus ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_teststatus
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_ErrorReporting_Xlock_TmeObdIf_TmeObdIf_stCoCirMonOkEl_VW:8192
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE1_AOCCT_teststatus
  SWC_Com.c.SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE1_AOCCT_teststatus
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus:

-- Test Case: SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus
			#define Rte_Read_TmeObdIf_TmeObdIf_stCoCirMonOkEl_VW Rte_Read_SWC_Com_TmeObdIf_TmeObdIf_stCoCirMonOkEl_VW
			
	if (Rte_Read_TmeObdIf_TmeObdIf_stCoCirMonOkEl_VW(&stCoCirMonOkEl_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_teststatus ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_teststatus
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_Xlock_ErrorReporting_Xlock_TmeObdIf_TmeObdIf_stCoCirMonOkEl_VW:32768
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_SKE2_AOCCT_teststatus
  SWC_Com.c.SWC_Com_TxProcessing_TmeObdIf_stCoCirMonOkEl_VW_To_SKE2_AOCCT_teststatus
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit:

-- Test Case: SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit
			
			#define Rte_Read_TmePostPrc_TmePostPrc_bAbsnCmft_pwrEvp_VW Rte_Read_SWC_Com_TmePostPrc_TmePostPrc_bAbsnCmft_pwrEvp_VW
			
	if( Rte_Read_TmePostPrc_TmePostPrc_bAbsnCmft_pwrEvp_VW( &SWC_Com_AppSig_TmePostPrc_bAbsnCmft_pwrEvp_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Klimadefizit ComWrapper_CAN_Tx_Signals_Set_TME_Klimadefizit
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=FALSE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Klimadefizit
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_bAbsnCmft_pwrEvp_VW_To_TME_Klimadefizit
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW:

-- Test Case: SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
			
			#define Rte_Read_TmePostPrc_TmePostPrc_noOpmPartCom_VW Rte_Read_SWC_Com_TmePostPrc_TmePostPrc_noOpmPartCom_VW
			
if (Rte_Read_TmePostPrc_TmePostPrc_noOpmPartCom_VW(&noOpmPartCom_VW) == RTE_E_OK)
			
if (Rte_Call_UR_TmeApp_ParttialNetwork_10_Klima_GetRequestedComMode(&requestedComMMode) != RTE_E_OK) -----------> TRUE
			
			#define Rte_Call_UR_TmeApp_ParttialNetwork_10_Klima_GetRequestedComMode(arg1) (ComM_GetRequestedComMode((ComM_UserHandleType)7, arg1))
			if(COMM_INT1 == 2000){  COMM_INT1 = User;  *ComMode = 0; COMM_INT2 =*ComMode; return 1;}
			else if(COMM_INT1 == 2001){  COMM_INT1 = User; *ComMode = 2; COMM_INT2 =*ComMode; return 1;}
			
if ((noOpmPartCom_VW & SWC_COM_TME_POST_PRC_NO_OPM_PART_COM_VW_ACTIVE) == SWC_COM_TME_POST_PRC_NO_OPM_PART_COM_VW_ACTIVE)  -----------> TRUE
			
		if (COMM_FULL_COMMUNICATION != requestedComMMode) -----------> TRUE
			
			#define Rte_Call_UR_TmeApp_ParttialNetwork_10_Klima_RequestComMode(arg1) (ComM_RequestComMode((ComM_UserHandleType)7, arg1))
			if(COMM_INT3 == 2000){  COMM_INT3 = User;  COMM_INT4 =ComMode; return 0;}
			else if(COMM_INT3 == 2001){  COMM_INT3 = User;  COMM_INT4 =ComMode; return 1;}
			
		else
			
	if ((COMM_NO_COMMUNICATION != requestedComMMode) && (0u == SWC_Com_CAB_10__Klima_activeTimer))
			
			#define Rte_Call_UR_TmeApp_ParttialNetwork_10_Klima_RequestComMode(arg1) (ComM_RequestComMode((ComM_UserHandleType)7, arg1))
			if(COMM_INT3 == 2000){  COMM_INT3 = User;  COMM_INT4 =ComMode; return 0;}
			else if(COMM_INT3 == 2001){  COMM_INT3 = User;  COMM_INT4 =ComMode; return 1;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT1:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT2:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT3:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT4:2001
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_CAB_10__Klima_activeTimer:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmePostPrc_PP_TmePostPrc_TmePostPrc_noOpmPartCom_VW:MACRO=SWC_COM_TME_POST_PRC_NO_OPM_PART_COM_VW_ACTIVE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT1:7
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT2:2
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT3:7
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT4:MACRO=COMM_FULL_COMMUNICATION
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_CAB_10__Klima_activeTimer:80
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
  ComM.c.ComM_GetRequestedComMode
  ComM.c.ComM_RequestComMode
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW.002
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
				
				#define Rte_Read_TmePostPrc_TmePostPrc_noOpmPartCom_VW Rte_Read_SWC_Com_TmePostPrc_TmePostPrc_noOpmPartCom_VW
				
	if (Rte_Read_TmePostPrc_TmePostPrc_noOpmPartCom_VW(&noOpmPartCom_VW) == RTE_E_OK)
				
	if (Rte_Call_UR_TmeApp_ParttialNetwork_10_Klima_GetRequestedComMode(&requestedComMMode) != RTE_E_OK) -----------> TRUE
				
				#define Rte_Call_UR_TmeApp_ParttialNetwork_10_Klima_GetRequestedComMode(arg1) (ComM_GetRequestedComMode((ComM_UserHandleType)7, arg1))
				if(COMM_INT1 == 2000){  COMM_INT1 = User;  *ComMode = 0; COMM_INT2 =*ComMode; return 1;}
				else if(COMM_INT1 == 2001){  COMM_INT1 = User; *ComMode = 2; COMM_INT2 =*ComMode; return 1;}
				
	if ((noOpmPartCom_VW & SWC_COM_TME_POST_PRC_NO_OPM_PART_COM_VW_ACTIVE) == SWC_COM_TME_POST_PRC_NO_OPM_PART_COM_VW_ACTIVE)
				
		if (COMM_FULL_COMMUNICATION != requestedComMMode)
				
				#define Rte_Call_UR_TmeApp_ParttialNetwork_10_Klima_RequestComMode(arg1) (ComM_RequestComMode((ComM_UserHandleType)7, arg1))
				if(COMM_INT3 == 2000){  COMM_INT3 = User;  COMM_INT4 =ComMode; return 0;}
				else if(COMM_INT3 == 2001){  COMM_INT3 = User;  COMM_INT4 =ComMode; return 1;}
				
		else   -----------> TRUE
				
	if ((COMM_NO_COMMUNICATION != requestedComMMode) && (0u == SWC_Com_CAB_10__Klima_activeTimer))
				
				#define Rte_Call_UR_TmeApp_ParttialNetwork_10_Klima_RequestComMode(arg1) (ComM_RequestComMode((ComM_UserHandleType)7, arg1))
				if(COMM_INT3 == 2000){  COMM_INT3 = User;  COMM_INT4 =ComMode; return 0;}
				else if(COMM_INT3 == 2001){  COMM_INT3 = User;  COMM_INT4 =ComMode; return 1;}

TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT1:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT2:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT3:2001
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT4:2001
TEST.VALUE:SWC_Com.<<GLOBAL>>.SWC_Com_CAB_10__Klima_activeTimer:1
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmePostPrc_PP_TmePostPrc_TmePostPrc_noOpmPartCom_VW:0
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT1:7
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT2:2
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT3:7
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.COMM_INT4:MACRO=COMM_NO_COMMUNICATION
TEST.EXPECTED:SWC_Com.<<GLOBAL>>.SWC_Com_CAB_10__Klima_activeTimer:0
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
  ComM.c.ComM_GetRequestedComMode
  ComM.c.ComM_RequestComMode
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_noOpmPartCom_VW
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung:

-- Test Case: SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung
			
			#define Rte_Read_TmePostPrc_TmePostPrc_stReqComCmft_VW Rte_Read_SWC_Com_TmePostPrc_TmePostPrc_stReqComCmft_VW
			
	if (Rte_Read_TmePostPrc_TmePostPrc_stReqComCmft_VW(&stReqComCmft_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Klimaanforderung ComWrapper_CAN_Tx_Signals_Set_TME_Klimaanforderung
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmePostPrc_PP_TmePostPrc_TmePostPrc_stReqComCmft_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Klimaanforderung
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_stReqComCmft_VW_To_TME_Klimaanforderung
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT:

-- Test Case: SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT
			
			#define Rte_Read_TmePostPrc_TmePostPrc_tFilCoHeatExchIn_VW Rte_Read_SWC_Com_TmePostPrc_TmePostPrc_tFilCoHeatExchIn_VW
			
	if (Rte_Read_TmePostPrc_TmePostPrc_tFilCoHeatExchIn_VW(&tFilCoHeatExchIn_VW) == RTE_E_OK)
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_HWT ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_HWT
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmePostPrc_PP_TmePostPrc_TmePostPrc_tFilCoHeatExchIn_VW:1100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:200
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_HWT
  SWC_Com.c.SWC_Com_TxProcessing_TmePostPrc_tFilCoHeatExchIn_VW_To_TME_Temp_KM_vor_HWT
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode:

-- Test Case: SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode
			#define Rte_Read_TmePrePrc_TmePrePrc_bCmprProtModAcv_VW Rte_Read_SWC_Com_TmePrePrc_TmePrePrc_bCmprProtModAcv_VW
			
	if (Rte_Read_TmePrePrc_TmePrePrc_bCmprProtModAcv_VW(&bCmprProtModAcv_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_EKK_ProtectionMode ComWrapper_CAN_Tx_Signals_Set_TME_EKK_ProtectionMode
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmePrePrc_PP_TmePrePrc_TmePrePrc_bCmprProtModAcv_VW:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_EKK_ProtectionMode
  SWC_Com.c.SWC_Com_TxProcessing_TmePrePrc_bCmprProtModAcv_VW_To_TME_EKK_ProtectionMode
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE:

-- Test Case: SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 7)) ----------> TRUE
			#define Rte_Read_SWC_Com_TmePrePrc_TmePrePrc_tCoInvIn_VW Rte_Read_SWC_Com_TmePrePrc_TmePrePrc_tCoInvIn_VW
		if( Rte_Read_SWC_Com_TmePrePrc_TmePrePrc_tCoInvIn_VW( &SWC_Com_TmePrePrc_tCoInvIn_VW) == RTE_E_OK ) ----------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmePrePrc_PP_TmePrePrc_TmePrePrc_tCoInvIn_VW:270
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE.TmeFim_stCodSigVldOut1_VW:128
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE
  SWC_Com.c.SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE.002
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 7))
			#define Rte_Read_SWC_Com_TmePrePrc_TmePrePrc_tCoInvIn_VW Rte_Read_SWC_Com_TmePrePrc_TmePrePrc_tCoInvIn_VW
		if( Rte_Read_SWC_Com_TmePrePrc_TmePrePrc_tCoInvIn_VW( &SWC_Com_TmePrePrc_tCoInvIn_VW) == RTE_E_OK )
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else  ----------> TRUE
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmePrePrc_PP_TmePrePrc_TmePrePrc_tCoInvIn_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE.TmeFim_stCodSigVldOut1_VW:12
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=CxFF_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Temp_KM_vor_LE
  SWC_Com.c.SWC_Com_TxProcessing_TmePrePrc_tCoInvIn_VW_To_TME_Temp_KM_vor_LE
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe:

-- Test Case: SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe
			#define Rte_Read_TmeRadBliCtl_TmeRadBliCtl_rRadBliSetSum_VW Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_rRadBliSetSum_VW
			
	if (Rte_Read_TmeRadBliCtl_TmeRadBliCtl_rRadBliSetSum_VW(&rRadBliSetSum_VW) == RTE_E_OK)
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Pos_Summe ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Pos_Summe
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRadBliCtl_PP_TmeRadBliCtl_TmeRadBliCtl_rRadBliSetSum_VW:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=TRUE
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Pos_Summe
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_rRadBliSetSum_VW_To_TME_SKE_Pos_Summe
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1:

-- Test Case: SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1.001
TEST.NOTES:
Seq & Probepoints for SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1
			#define Rte_Read_TmeRadBliCtl_TmeRadBliCtl_stRadBliAct_VW Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliAct_VW
			
	if( Rte_Read_TmeRadBliCtl_TmeRadBliCtl_stRadBliAct_VW(&SWC_Com_AppSig_TmeRadBliCtl_stRadBliAct_VW) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Position_1 ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Position_1
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRadBliCtl_PP_TmeRadBliCtl_TmeRadBliCtl_stRadBliAct_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Position_1
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAct_VW_To_TME_SKE_Position_1
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung:

-- Test Case: SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 29))  ---> TRUE
		if( Rte_Read_TmeRadBliCtl_TmeRadBliCtl_stRadBliAlw_VW(&SWC_Com_AppSig_TmeRadBliCtl_stRadBliAlw_VW) == RTE_E_OK)  ---> TRUE
			
			#define Rte_Read_TmeRadBliCtl_TmeRadBliCtl_stRadBliAlw_VW Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliAlw_VW
			
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRadBliCtl_PP_TmeRadBliCtl_TmeRadBliCtl_stRadBliAlw_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung.TmeFim_stCodSigVldOut1_VW:536870912
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Eingriff_SKE_Oeffnung
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 29))   ---> FALSE
		if( Rte_Read_TmeRadBliCtl_TmeRadBliCtl_stRadBliAlw_VW(&SWC_Com_AppSig_TmeRadBliCtl_stRadBliAlw_VW) == RTE_E_OK)
			
			#define Rte_Read_TmeRadBliCtl_TmeRadBliCtl_stRadBliAlw_VW Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliAlw_VW
			
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL ComWrapper_CAN_Tx_Signals_Set_TME_Anf_KL
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRadBliCtl_PP_TmeRadBliCtl_TmeRadBliCtl_stRadBliAlw_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung.TmeFim_stCodSigVldOut1_VW:53
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=FALSE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx0_Init
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Eingriff_SKE_Oeffnung
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliAlw_VW_To_TME_Eingriff_SKE_Oeffnung
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2:

-- Test Case: SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2.001
TEST.NOTES:
Seq & Probepoints for
				SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
				
				#define Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw2_VW Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw2_VW
				
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 2)) ---------------> TRUE
				
		if( Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw2_VW( &SWC_Com_AppSig_TmeRadBliCtl_stRadBliHw2_VW ) == RTE_E_OK )---------------> TRUE
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2 ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
				
		else
				
				#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2 ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2
				if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRadBliCtl_PP_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw2_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2.TmeFim_stCodSigVldOut2_VW:4
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
			
			#define Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw2_VW Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw2_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut2_VW, 2))
			
		if( Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw2_VW( &SWC_Com_AppSig_TmeRadBliCtl_stRadBliHw2_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2 ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else---------------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2 ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRadBliCtl_PP_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw2_VW:100
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx3_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status_2
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw2_VW_To_TME_SKE_Status_2
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status:

-- Test Case: SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
			
			#define Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw_VW Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 30)) ---------------> TRUE
			
		if( Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw_VW( &SWC_Com_AppSig_TmeRadBliCtl_stRadBliHw_VW ) == RTE_E_OK )---------------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRadBliCtl_PP_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status.TmeFim_stCodSigVldOut1_VW:1073741824
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:100
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
TEST.END_FLOW
TEST.END

-- Test Case: SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status.002
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status.002
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
			
			#define Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw_VW Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw_VW
			
	if (TRUE == SWC_COM_GET_BIT(TmeFim_stCodSigVldOut1_VW, 30))
			
		if( Rte_Read_SWC_Com_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw_VW( &SWC_Com_AppSig_TmeRadBliCtl_stRadBliHw_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
			
		else---------------> TRUE
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRadBliCtl_PP_TmeRadBliCtl_TmeRadBliCtl_stRadBliHw_VW:100
TEST.VALUE:SWC_Com.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status.TmeFim_stCodSigVldOut1_VW:3
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:MACRO=Cx3_Fehler
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_SKE_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeRadBliCtl_stRadBliHw_VW_To_TME_SKE_Status
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung:

-- Test Case: SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung
			
			#define Rte_Read_SWC_Com_TmeRcc_TmeRcc_stCmprResp_VW Rte_Read_SWC_Com_TmeRcc_TmeRcc_stCmprResp_VW
			
	if( Rte_Read_SWC_Com_TmeRcc_TmeRcc_stCmprResp_VW( &SWC_Com_AppSig_TmeRcc_stCmprResp_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_AC_Rueckmeldung ComWrapper_CAN_Tx_Signals_Set_TME_AC_Rueckmeldung
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRcc_PP_TmeRcc_TmeRcc_stCmprResp_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:3
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_AC_Rueckmeldung
  SWC_Com.c.SWC_Com_TxProcessing_TmeRcc_stCmprResp_VW_To_TME_AC_Rueckmeldung
TEST.END_FLOW
TEST.END


SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status:

-- Test Case: SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status.001
TEST.UNIT:SWC_Com
TEST.SUBPROGRAM:SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status
TEST.NEW
TEST.NAME:SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status.001
TEST.NOTES:
Seq & Probepoints for
			SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status
			
			#define Rte_Read_SWC_Com_TmeRcc_TmeRcc_stEvp_VW Rte_Read_SWC_Com_TmeRcc_TmeRcc_stEvp_VW
			
	if( Rte_Read_SWC_Com_TmeRcc_TmeRcc_stEvp_VW( &SWC_Com_AppSig_TmeRcc_stEvp_VW ) == RTE_E_OK )
			
			#define Rte_Call_ComWrapper_CAN_Tx_Signals_Set_TME_Verdampfer_Status ComWrapper_CAN_Tx_Signals_Set_TME_Verdampfer_Status
			if(ComWrapper_INT133 == 2000){  ComWrapper_INT133 = physValSet; ComWrapper_INT134 = data;   return 0;}
TEST.END_NOTES:
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349935
TEST.REQUIREMENT_KEY:AS_TME/ASTM-349936
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:2000
TEST.VALUE:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:2000
TEST.VALUE:SWC_Com.<<GLOBAL>>.Rte_TmeRcc_PP_TmeRcc_TmeRcc_stEvp_VW:200
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT133:MACRO=TRUE
TEST.EXPECTED:USER_GLOBALS_VCAST.<<GLOBAL>>.ComWrapper_INT134:0
TEST.FLOW
  SWC_Com.c.SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status
  ComWrapper.c.ComWrapper_CAN_Tx_Signals_Set_TME_Verdampfer_Status
  SWC_Com.c.SWC_Com_TxProcessing_TmeRcc_stEvp_VW_To_TME_Verdampfer_Status
TEST.END_FLOW
TEST.END

